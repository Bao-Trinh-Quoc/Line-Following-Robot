
PIF_POWER_READER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b0fc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002408  0800b210  0800b210  0001b210  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d618  0800d618  00020220  2**0
                  CONTENTS
  4 .ARM          00000000  0800d618  0800d618  00020220  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d618  0800d618  00020220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d618  0800d618  0001d618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d61c  0800d61c  0001d61c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000220  20000000  0800d620  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007f4  20000220  0800d840  00020220  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a14  0800d840  00020a14  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020249  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012b4b  00000000  00000000  0002028c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002bd6  00000000  00000000  00032dd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001278  00000000  00000000  000359b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e81  00000000  00000000  00036c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019e89  00000000  00000000  00037aa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000161fa  00000000  00000000  00051932  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00094bf4  00000000  00000000  00067b2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006588  00000000  00000000  000fc720  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00102ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000220 	.word	0x20000220
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b1f4 	.word	0x0800b1f4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000224 	.word	0x20000224
 800014c:	0800b1f4 	.word	0x0800b1f4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2iz>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001118:	d30f      	bcc.n	800113a <__aeabi_f2iz+0x2a>
 800111a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d90d      	bls.n	8001140 <__aeabi_f2iz+0x30>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800112c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001130:	fa23 f002 	lsr.w	r0, r3, r2
 8001134:	bf18      	it	ne
 8001136:	4240      	negne	r0, r0
 8001138:	4770      	bx	lr
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	4770      	bx	lr
 8001140:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001144:	d101      	bne.n	800114a <__aeabi_f2iz+0x3a>
 8001146:	0242      	lsls	r2, r0, #9
 8001148:	d105      	bne.n	8001156 <__aeabi_f2iz+0x46>
 800114a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800114e:	bf08      	it	eq
 8001150:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001154:	4770      	bx	lr
 8001156:	f04f 0000 	mov.w	r0, #0
 800115a:	4770      	bx	lr

0800115c <__aeabi_d2lz>:
 800115c:	b538      	push	{r3, r4, r5, lr}
 800115e:	4605      	mov	r5, r0
 8001160:	460c      	mov	r4, r1
 8001162:	2200      	movs	r2, #0
 8001164:	2300      	movs	r3, #0
 8001166:	4628      	mov	r0, r5
 8001168:	4621      	mov	r1, r4
 800116a:	f7ff fc27 	bl	80009bc <__aeabi_dcmplt>
 800116e:	b928      	cbnz	r0, 800117c <__aeabi_d2lz+0x20>
 8001170:	4628      	mov	r0, r5
 8001172:	4621      	mov	r1, r4
 8001174:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001178:	f000 b80a 	b.w	8001190 <__aeabi_d2ulz>
 800117c:	4628      	mov	r0, r5
 800117e:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001182:	f000 f805 	bl	8001190 <__aeabi_d2ulz>
 8001186:	4240      	negs	r0, r0
 8001188:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800118c:	bd38      	pop	{r3, r4, r5, pc}
 800118e:	bf00      	nop

08001190 <__aeabi_d2ulz>:
 8001190:	b5d0      	push	{r4, r6, r7, lr}
 8001192:	2200      	movs	r2, #0
 8001194:	4b0b      	ldr	r3, [pc, #44]	; (80011c4 <__aeabi_d2ulz+0x34>)
 8001196:	4606      	mov	r6, r0
 8001198:	460f      	mov	r7, r1
 800119a:	f7ff f99d 	bl	80004d8 <__aeabi_dmul>
 800119e:	f7ff fc73 	bl	8000a88 <__aeabi_d2uiz>
 80011a2:	4604      	mov	r4, r0
 80011a4:	f7ff f91e 	bl	80003e4 <__aeabi_ui2d>
 80011a8:	2200      	movs	r2, #0
 80011aa:	4b07      	ldr	r3, [pc, #28]	; (80011c8 <__aeabi_d2ulz+0x38>)
 80011ac:	f7ff f994 	bl	80004d8 <__aeabi_dmul>
 80011b0:	4602      	mov	r2, r0
 80011b2:	460b      	mov	r3, r1
 80011b4:	4630      	mov	r0, r6
 80011b6:	4639      	mov	r1, r7
 80011b8:	f7fe ffd6 	bl	8000168 <__aeabi_dsub>
 80011bc:	f7ff fc64 	bl	8000a88 <__aeabi_d2uiz>
 80011c0:	4621      	mov	r1, r4
 80011c2:	bdd0      	pop	{r4, r6, r7, pc}
 80011c4:	3df00000 	.word	0x3df00000
 80011c8:	41f00000 	.word	0x41f00000

080011cc <HAL_UART_RxCpltCallback>:
uint8_t u8_start = 0;
float Ki_value , Kp_value , Kd_value ;
int Speed_value = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
if (huart->Instance == USART1)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a12      	ldr	r2, [pc, #72]	; (8001224 <HAL_UART_RxCpltCallback+0x58>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d11e      	bne.n	800121c <HAL_UART_RxCpltCallback+0x50>
    {
      if (u8_RxData != 13) // NULL ASCII
 80011de:	4b12      	ldr	r3, [pc, #72]	; (8001228 <HAL_UART_RxCpltCallback+0x5c>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	2b0d      	cmp	r3, #13
 80011e4:	d00b      	beq.n	80011fe <HAL_UART_RxCpltCallback+0x32>
      {
        u8_RxBuff[_rxIndex++] = u8_RxData; // Them data vao rxbuffer
 80011e6:	4b11      	ldr	r3, [pc, #68]	; (800122c <HAL_UART_RxCpltCallback+0x60>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	1c5a      	adds	r2, r3, #1
 80011ec:	b2d1      	uxtb	r1, r2
 80011ee:	4a0f      	ldr	r2, [pc, #60]	; (800122c <HAL_UART_RxCpltCallback+0x60>)
 80011f0:	7011      	strb	r1, [r2, #0]
 80011f2:	461a      	mov	r2, r3
 80011f4:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <HAL_UART_RxCpltCallback+0x5c>)
 80011f6:	7819      	ldrb	r1, [r3, #0]
 80011f8:	4b0d      	ldr	r3, [pc, #52]	; (8001230 <HAL_UART_RxCpltCallback+0x64>)
 80011fa:	5499      	strb	r1, [r3, r2]
 80011fc:	e009      	b.n	8001212 <HAL_UART_RxCpltCallback+0x46>
      }
      else if(u8_RxData == 13)
 80011fe:	4b0a      	ldr	r3, [pc, #40]	; (8001228 <HAL_UART_RxCpltCallback+0x5c>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	2b0d      	cmp	r3, #13
 8001204:	d105      	bne.n	8001212 <HAL_UART_RxCpltCallback+0x46>
      {
        _rxIndex = 0;// reset lai con tro
 8001206:	4b09      	ldr	r3, [pc, #36]	; (800122c <HAL_UART_RxCpltCallback+0x60>)
 8001208:	2200      	movs	r2, #0
 800120a:	701a      	strb	r2, [r3, #0]
        Tx_Flag = 1;
 800120c:	4b09      	ldr	r3, [pc, #36]	; (8001234 <HAL_UART_RxCpltCallback+0x68>)
 800120e:	2201      	movs	r2, #1
 8001210:	801a      	strh	r2, [r3, #0]
      }
      HAL_UART_Receive_IT(&huart1, &u8_RxData, 1);
 8001212:	2201      	movs	r2, #1
 8001214:	4904      	ldr	r1, [pc, #16]	; (8001228 <HAL_UART_RxCpltCallback+0x5c>)
 8001216:	4808      	ldr	r0, [pc, #32]	; (8001238 <HAL_UART_RxCpltCallback+0x6c>)
 8001218:	f004 fdf9 	bl	8005e0e <HAL_UART_Receive_IT>
    }
}
 800121c:	bf00      	nop
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40013800 	.word	0x40013800
 8001228:	2000038a 	.word	0x2000038a
 800122c:	2000038b 	.word	0x2000038b
 8001230:	20000358 	.word	0x20000358
 8001234:	2000038c 	.word	0x2000038c
 8001238:	20000308 	.word	0x20000308

0800123c <UART_Handle_Menu>:
void UART_Handle_Menu()
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
	// Cut string

	    char *temp_token = strtok((char *)u8_RxBuff, " ");
 8001242:	49a9      	ldr	r1, [pc, #676]	; (80014e8 <UART_Handle_Menu+0x2ac>)
 8001244:	48a9      	ldr	r0, [pc, #676]	; (80014ec <UART_Handle_Menu+0x2b0>)
 8001246:	f007 f9f7 	bl	8008638 <strtok>
 800124a:	6078      	str	r0, [r7, #4]
	    uint8_t _Index_arg = 0;
 800124c:	2300      	movs	r3, #0
 800124e:	70fb      	strb	r3, [r7, #3]

	    while(temp_token != NULL)
 8001250:	e00f      	b.n	8001272 <UART_Handle_Menu+0x36>
	    {
	      arg_list[_Index_arg] = temp_token;
 8001252:	78fb      	ldrb	r3, [r7, #3]
 8001254:	49a6      	ldr	r1, [pc, #664]	; (80014f0 <UART_Handle_Menu+0x2b4>)
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	      _Index_arg = _Index_arg+1;
 800125c:	78fb      	ldrb	r3, [r7, #3]
 800125e:	3301      	adds	r3, #1
 8001260:	70fb      	strb	r3, [r7, #3]
	      temp_token = temp_token+1;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	3301      	adds	r3, #1
 8001266:	607b      	str	r3, [r7, #4]
	      temp_token = strtok(NULL, " ");
 8001268:	499f      	ldr	r1, [pc, #636]	; (80014e8 <UART_Handle_Menu+0x2ac>)
 800126a:	2000      	movs	r0, #0
 800126c:	f007 f9e4 	bl	8008638 <strtok>
 8001270:	6078      	str	r0, [r7, #4]
	    while(temp_token != NULL)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d1ec      	bne.n	8001252 <UART_Handle_Menu+0x16>
	    }
	    // Handle
	    if(strstr(arg_list[0], "M")!= NULL)
 8001278:	4b9d      	ldr	r3, [pc, #628]	; (80014f0 <UART_Handle_Menu+0x2b4>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	214d      	movs	r1, #77	; 0x4d
 800127e:	4618      	mov	r0, r3
 8001280:	f007 f9bb 	bl	80085fa <strchr>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d03c      	beq.n	8001304 <UART_Handle_Menu+0xc8>
	          {
	            if(strstr(arg_list[1], "START" )!= NULL)
 800128a:	4b99      	ldr	r3, [pc, #612]	; (80014f0 <UART_Handle_Menu+0x2b4>)
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	4999      	ldr	r1, [pc, #612]	; (80014f4 <UART_Handle_Menu+0x2b8>)
 8001290:	4618      	mov	r0, r3
 8001292:	f007 fa2d 	bl	80086f0 <strstr>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d015      	beq.n	80012c8 <UART_Handle_Menu+0x8c>
	            {
	              u8_start = 1;
 800129c:	4b96      	ldr	r3, [pc, #600]	; (80014f8 <UART_Handle_Menu+0x2bc>)
 800129e:	2201      	movs	r2, #1
 80012a0:	701a      	strb	r2, [r3, #0]
	              sprintf(result_str, "OK = %d\r\n", u8_start);
 80012a2:	4b95      	ldr	r3, [pc, #596]	; (80014f8 <UART_Handle_Menu+0x2bc>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	461a      	mov	r2, r3
 80012a8:	4994      	ldr	r1, [pc, #592]	; (80014fc <UART_Handle_Menu+0x2c0>)
 80012aa:	4895      	ldr	r0, [pc, #596]	; (8001500 <UART_Handle_Menu+0x2c4>)
 80012ac:	f007 f93a 	bl	8008524 <siprintf>
	    		  HAL_UART_Transmit(&huart1, (uint8_t *)result_str, strlen(result_str), HAL_MAX_DELAY);
 80012b0:	4893      	ldr	r0, [pc, #588]	; (8001500 <UART_Handle_Menu+0x2c4>)
 80012b2:	f7fe ff4d 	bl	8000150 <strlen>
 80012b6:	4603      	mov	r3, r0
 80012b8:	b29a      	uxth	r2, r3
 80012ba:	f04f 33ff 	mov.w	r3, #4294967295
 80012be:	4990      	ldr	r1, [pc, #576]	; (8001500 <UART_Handle_Menu+0x2c4>)
 80012c0:	4890      	ldr	r0, [pc, #576]	; (8001504 <UART_Handle_Menu+0x2c8>)
 80012c2:	f004 fd21 	bl	8005d08 <HAL_UART_Transmit>
 80012c6:	e01d      	b.n	8001304 <UART_Handle_Menu+0xc8>

	             } else if (strstr(arg_list[1], "STOP" )!= NULL){
 80012c8:	4b89      	ldr	r3, [pc, #548]	; (80014f0 <UART_Handle_Menu+0x2b4>)
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	498e      	ldr	r1, [pc, #568]	; (8001508 <UART_Handle_Menu+0x2cc>)
 80012ce:	4618      	mov	r0, r3
 80012d0:	f007 fa0e 	bl	80086f0 <strstr>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d014      	beq.n	8001304 <UART_Handle_Menu+0xc8>
	              u8_start = 0;
 80012da:	4b87      	ldr	r3, [pc, #540]	; (80014f8 <UART_Handle_Menu+0x2bc>)
 80012dc:	2200      	movs	r2, #0
 80012de:	701a      	strb	r2, [r3, #0]
	              sprintf(result_str, "OK = %d\r\n", u8_start);
 80012e0:	4b85      	ldr	r3, [pc, #532]	; (80014f8 <UART_Handle_Menu+0x2bc>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	461a      	mov	r2, r3
 80012e6:	4985      	ldr	r1, [pc, #532]	; (80014fc <UART_Handle_Menu+0x2c0>)
 80012e8:	4885      	ldr	r0, [pc, #532]	; (8001500 <UART_Handle_Menu+0x2c4>)
 80012ea:	f007 f91b 	bl	8008524 <siprintf>
	    		  HAL_UART_Transmit(&huart1, (uint8_t *)result_str, strlen(result_str), HAL_MAX_DELAY);
 80012ee:	4884      	ldr	r0, [pc, #528]	; (8001500 <UART_Handle_Menu+0x2c4>)
 80012f0:	f7fe ff2e 	bl	8000150 <strlen>
 80012f4:	4603      	mov	r3, r0
 80012f6:	b29a      	uxth	r2, r3
 80012f8:	f04f 33ff 	mov.w	r3, #4294967295
 80012fc:	4980      	ldr	r1, [pc, #512]	; (8001500 <UART_Handle_Menu+0x2c4>)
 80012fe:	4881      	ldr	r0, [pc, #516]	; (8001504 <UART_Handle_Menu+0x2c8>)
 8001300:	f004 fd02 	bl	8005d08 <HAL_UART_Transmit>
	             }
	          }

	    if(strstr(arg_list[0], "KI") != NULL)
 8001304:	4b7a      	ldr	r3, [pc, #488]	; (80014f0 <UART_Handle_Menu+0x2b4>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4980      	ldr	r1, [pc, #512]	; (800150c <UART_Handle_Menu+0x2d0>)
 800130a:	4618      	mov	r0, r3
 800130c:	f007 f9f0 	bl	80086f0 <strstr>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d012      	beq.n	800133c <UART_Handle_Menu+0x100>
	    {
	      u8_condition = 1;
 8001316:	4b7e      	ldr	r3, [pc, #504]	; (8001510 <UART_Handle_Menu+0x2d4>)
 8001318:	2201      	movs	r2, #1
 800131a:	701a      	strb	r2, [r3, #0]
	      sprintf(result_str, "OK KI = ?\r\n");
 800131c:	497d      	ldr	r1, [pc, #500]	; (8001514 <UART_Handle_Menu+0x2d8>)
 800131e:	4878      	ldr	r0, [pc, #480]	; (8001500 <UART_Handle_Menu+0x2c4>)
 8001320:	f007 f900 	bl	8008524 <siprintf>
	      HAL_UART_Transmit(&huart1, (uint8_t *)result_str, strlen(result_str), HAL_MAX_DELAY);
 8001324:	4876      	ldr	r0, [pc, #472]	; (8001500 <UART_Handle_Menu+0x2c4>)
 8001326:	f7fe ff13 	bl	8000150 <strlen>
 800132a:	4603      	mov	r3, r0
 800132c:	b29a      	uxth	r2, r3
 800132e:	f04f 33ff 	mov.w	r3, #4294967295
 8001332:	4973      	ldr	r1, [pc, #460]	; (8001500 <UART_Handle_Menu+0x2c4>)
 8001334:	4873      	ldr	r0, [pc, #460]	; (8001504 <UART_Handle_Menu+0x2c8>)
 8001336:	f004 fce7 	bl	8005d08 <HAL_UART_Transmit>
 800133a:	e062      	b.n	8001402 <UART_Handle_Menu+0x1c6>
	    } else if (strstr(arg_list[0], "KP") != NULL)
 800133c:	4b6c      	ldr	r3, [pc, #432]	; (80014f0 <UART_Handle_Menu+0x2b4>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4975      	ldr	r1, [pc, #468]	; (8001518 <UART_Handle_Menu+0x2dc>)
 8001342:	4618      	mov	r0, r3
 8001344:	f007 f9d4 	bl	80086f0 <strstr>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d012      	beq.n	8001374 <UART_Handle_Menu+0x138>
	    {
	      u8_condition = 2;
 800134e:	4b70      	ldr	r3, [pc, #448]	; (8001510 <UART_Handle_Menu+0x2d4>)
 8001350:	2202      	movs	r2, #2
 8001352:	701a      	strb	r2, [r3, #0]
	      sprintf(result_str, "OK KP = ?\r\n");
 8001354:	4971      	ldr	r1, [pc, #452]	; (800151c <UART_Handle_Menu+0x2e0>)
 8001356:	486a      	ldr	r0, [pc, #424]	; (8001500 <UART_Handle_Menu+0x2c4>)
 8001358:	f007 f8e4 	bl	8008524 <siprintf>
	      HAL_UART_Transmit(&huart1, (uint8_t *)result_str, strlen(result_str), HAL_MAX_DELAY);
 800135c:	4868      	ldr	r0, [pc, #416]	; (8001500 <UART_Handle_Menu+0x2c4>)
 800135e:	f7fe fef7 	bl	8000150 <strlen>
 8001362:	4603      	mov	r3, r0
 8001364:	b29a      	uxth	r2, r3
 8001366:	f04f 33ff 	mov.w	r3, #4294967295
 800136a:	4965      	ldr	r1, [pc, #404]	; (8001500 <UART_Handle_Menu+0x2c4>)
 800136c:	4865      	ldr	r0, [pc, #404]	; (8001504 <UART_Handle_Menu+0x2c8>)
 800136e:	f004 fccb 	bl	8005d08 <HAL_UART_Transmit>
 8001372:	e046      	b.n	8001402 <UART_Handle_Menu+0x1c6>
	    } else if (strstr(arg_list[0], "KD") != NULL)
 8001374:	4b5e      	ldr	r3, [pc, #376]	; (80014f0 <UART_Handle_Menu+0x2b4>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4969      	ldr	r1, [pc, #420]	; (8001520 <UART_Handle_Menu+0x2e4>)
 800137a:	4618      	mov	r0, r3
 800137c:	f007 f9b8 	bl	80086f0 <strstr>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d012      	beq.n	80013ac <UART_Handle_Menu+0x170>
	    {
	      u8_condition = 3;
 8001386:	4b62      	ldr	r3, [pc, #392]	; (8001510 <UART_Handle_Menu+0x2d4>)
 8001388:	2203      	movs	r2, #3
 800138a:	701a      	strb	r2, [r3, #0]
	      sprintf(result_str, "OK KD = ?\r\n");
 800138c:	4965      	ldr	r1, [pc, #404]	; (8001524 <UART_Handle_Menu+0x2e8>)
 800138e:	485c      	ldr	r0, [pc, #368]	; (8001500 <UART_Handle_Menu+0x2c4>)
 8001390:	f007 f8c8 	bl	8008524 <siprintf>
	      HAL_UART_Transmit(&huart1, (uint8_t *)result_str, strlen(result_str), HAL_MAX_DELAY);
 8001394:	485a      	ldr	r0, [pc, #360]	; (8001500 <UART_Handle_Menu+0x2c4>)
 8001396:	f7fe fedb 	bl	8000150 <strlen>
 800139a:	4603      	mov	r3, r0
 800139c:	b29a      	uxth	r2, r3
 800139e:	f04f 33ff 	mov.w	r3, #4294967295
 80013a2:	4957      	ldr	r1, [pc, #348]	; (8001500 <UART_Handle_Menu+0x2c4>)
 80013a4:	4857      	ldr	r0, [pc, #348]	; (8001504 <UART_Handle_Menu+0x2c8>)
 80013a6:	f004 fcaf 	bl	8005d08 <HAL_UART_Transmit>
 80013aa:	e02a      	b.n	8001402 <UART_Handle_Menu+0x1c6>
	    } else if (strstr(arg_list[0], "Speed") != NULL)
 80013ac:	4b50      	ldr	r3, [pc, #320]	; (80014f0 <UART_Handle_Menu+0x2b4>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	495d      	ldr	r1, [pc, #372]	; (8001528 <UART_Handle_Menu+0x2ec>)
 80013b2:	4618      	mov	r0, r3
 80013b4:	f007 f99c 	bl	80086f0 <strstr>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d012      	beq.n	80013e4 <UART_Handle_Menu+0x1a8>
	    {
	      u8_condition = 4;
 80013be:	4b54      	ldr	r3, [pc, #336]	; (8001510 <UART_Handle_Menu+0x2d4>)
 80013c0:	2204      	movs	r2, #4
 80013c2:	701a      	strb	r2, [r3, #0]
	      sprintf(result_str, "OK Speed = ?\r\n");
 80013c4:	4959      	ldr	r1, [pc, #356]	; (800152c <UART_Handle_Menu+0x2f0>)
 80013c6:	484e      	ldr	r0, [pc, #312]	; (8001500 <UART_Handle_Menu+0x2c4>)
 80013c8:	f007 f8ac 	bl	8008524 <siprintf>
	      HAL_UART_Transmit(&huart1, (uint8_t *)result_str, strlen(result_str), HAL_MAX_DELAY);
 80013cc:	484c      	ldr	r0, [pc, #304]	; (8001500 <UART_Handle_Menu+0x2c4>)
 80013ce:	f7fe febf 	bl	8000150 <strlen>
 80013d2:	4603      	mov	r3, r0
 80013d4:	b29a      	uxth	r2, r3
 80013d6:	f04f 33ff 	mov.w	r3, #4294967295
 80013da:	4949      	ldr	r1, [pc, #292]	; (8001500 <UART_Handle_Menu+0x2c4>)
 80013dc:	4849      	ldr	r0, [pc, #292]	; (8001504 <UART_Handle_Menu+0x2c8>)
 80013de:	f004 fc93 	bl	8005d08 <HAL_UART_Transmit>
 80013e2:	e00e      	b.n	8001402 <UART_Handle_Menu+0x1c6>
	    } else {
	      sprintf(result_str, "Invalid \r\n");
 80013e4:	4952      	ldr	r1, [pc, #328]	; (8001530 <UART_Handle_Menu+0x2f4>)
 80013e6:	4846      	ldr	r0, [pc, #280]	; (8001500 <UART_Handle_Menu+0x2c4>)
 80013e8:	f007 f89c 	bl	8008524 <siprintf>
	      HAL_UART_Transmit(&huart1, (uint8_t *)result_str, strlen(result_str), HAL_MAX_DELAY);
 80013ec:	4844      	ldr	r0, [pc, #272]	; (8001500 <UART_Handle_Menu+0x2c4>)
 80013ee:	f7fe feaf 	bl	8000150 <strlen>
 80013f2:	4603      	mov	r3, r0
 80013f4:	b29a      	uxth	r2, r3
 80013f6:	f04f 33ff 	mov.w	r3, #4294967295
 80013fa:	4941      	ldr	r1, [pc, #260]	; (8001500 <UART_Handle_Menu+0x2c4>)
 80013fc:	4841      	ldr	r0, [pc, #260]	; (8001504 <UART_Handle_Menu+0x2c8>)
 80013fe:	f004 fc83 	bl	8005d08 <HAL_UART_Transmit>
	    }


	    sprintf(result_str, "Condition:%d\r\n", u8_condition);
 8001402:	4b43      	ldr	r3, [pc, #268]	; (8001510 <UART_Handle_Menu+0x2d4>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	461a      	mov	r2, r3
 8001408:	494a      	ldr	r1, [pc, #296]	; (8001534 <UART_Handle_Menu+0x2f8>)
 800140a:	483d      	ldr	r0, [pc, #244]	; (8001500 <UART_Handle_Menu+0x2c4>)
 800140c:	f007 f88a 	bl	8008524 <siprintf>
	    HAL_UART_Transmit(&huart1, (uint8_t *)result_str, strlen(result_str), HAL_MAX_DELAY);
 8001410:	483b      	ldr	r0, [pc, #236]	; (8001500 <UART_Handle_Menu+0x2c4>)
 8001412:	f7fe fe9d 	bl	8000150 <strlen>
 8001416:	4603      	mov	r3, r0
 8001418:	b29a      	uxth	r2, r3
 800141a:	f04f 33ff 	mov.w	r3, #4294967295
 800141e:	4938      	ldr	r1, [pc, #224]	; (8001500 <UART_Handle_Menu+0x2c4>)
 8001420:	4838      	ldr	r0, [pc, #224]	; (8001504 <UART_Handle_Menu+0x2c8>)
 8001422:	f004 fc71 	bl	8005d08 <HAL_UART_Transmit>


	    switch (u8_condition)
 8001426:	4b3a      	ldr	r3, [pc, #232]	; (8001510 <UART_Handle_Menu+0x2d4>)
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	3b01      	subs	r3, #1
 800142c:	2b03      	cmp	r3, #3
 800142e:	f200 80d1 	bhi.w	80015d4 <UART_Handle_Menu+0x398>
 8001432:	a201      	add	r2, pc, #4	; (adr r2, 8001438 <UART_Handle_Menu+0x1fc>)
 8001434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001438:	08001449 	.word	0x08001449
 800143c:	08001499 	.word	0x08001499
 8001440:	08001549 	.word	0x08001549
 8001444:	08001599 	.word	0x08001599
	  {
	   case 1:
			Ki_value = atof(arg_list[1]);
 8001448:	4b29      	ldr	r3, [pc, #164]	; (80014f0 <UART_Handle_Menu+0x2b4>)
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	4618      	mov	r0, r3
 800144e:	f005 fa83 	bl	8006958 <atof>
 8001452:	4602      	mov	r2, r0
 8001454:	460b      	mov	r3, r1
 8001456:	4610      	mov	r0, r2
 8001458:	4619      	mov	r1, r3
 800145a:	f7ff fb35 	bl	8000ac8 <__aeabi_d2f>
 800145e:	4603      	mov	r3, r0
 8001460:	4a35      	ldr	r2, [pc, #212]	; (8001538 <UART_Handle_Menu+0x2fc>)
 8001462:	6013      	str	r3, [r2, #0]
			sprintf(result_str, "OK KI = %0.5f\r\n", Ki_value);
 8001464:	4b34      	ldr	r3, [pc, #208]	; (8001538 <UART_Handle_Menu+0x2fc>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4618      	mov	r0, r3
 800146a:	f7fe ffdd 	bl	8000428 <__aeabi_f2d>
 800146e:	4602      	mov	r2, r0
 8001470:	460b      	mov	r3, r1
 8001472:	4932      	ldr	r1, [pc, #200]	; (800153c <UART_Handle_Menu+0x300>)
 8001474:	4822      	ldr	r0, [pc, #136]	; (8001500 <UART_Handle_Menu+0x2c4>)
 8001476:	f007 f855 	bl	8008524 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t *)result_str, strlen(result_str), HAL_MAX_DELAY);
 800147a:	4821      	ldr	r0, [pc, #132]	; (8001500 <UART_Handle_Menu+0x2c4>)
 800147c:	f7fe fe68 	bl	8000150 <strlen>
 8001480:	4603      	mov	r3, r0
 8001482:	b29a      	uxth	r2, r3
 8001484:	f04f 33ff 	mov.w	r3, #4294967295
 8001488:	491d      	ldr	r1, [pc, #116]	; (8001500 <UART_Handle_Menu+0x2c4>)
 800148a:	481e      	ldr	r0, [pc, #120]	; (8001504 <UART_Handle_Menu+0x2c8>)
 800148c:	f004 fc3c 	bl	8005d08 <HAL_UART_Transmit>
			u8_condition = 0;
 8001490:	4b1f      	ldr	r3, [pc, #124]	; (8001510 <UART_Handle_Menu+0x2d4>)
 8001492:	2200      	movs	r2, #0
 8001494:	701a      	strb	r2, [r3, #0]
			break;
 8001496:	e09d      	b.n	80015d4 <UART_Handle_Menu+0x398>
	  case 2:
		  Kp_value = atof(arg_list[1]);
 8001498:	4b15      	ldr	r3, [pc, #84]	; (80014f0 <UART_Handle_Menu+0x2b4>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	4618      	mov	r0, r3
 800149e:	f005 fa5b 	bl	8006958 <atof>
 80014a2:	4602      	mov	r2, r0
 80014a4:	460b      	mov	r3, r1
 80014a6:	4610      	mov	r0, r2
 80014a8:	4619      	mov	r1, r3
 80014aa:	f7ff fb0d 	bl	8000ac8 <__aeabi_d2f>
 80014ae:	4603      	mov	r3, r0
 80014b0:	4a23      	ldr	r2, [pc, #140]	; (8001540 <UART_Handle_Menu+0x304>)
 80014b2:	6013      	str	r3, [r2, #0]
		  sprintf(result_str, "OK KP = %0.5f\r\n", Kp_value);
 80014b4:	4b22      	ldr	r3, [pc, #136]	; (8001540 <UART_Handle_Menu+0x304>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7fe ffb5 	bl	8000428 <__aeabi_f2d>
 80014be:	4602      	mov	r2, r0
 80014c0:	460b      	mov	r3, r1
 80014c2:	4920      	ldr	r1, [pc, #128]	; (8001544 <UART_Handle_Menu+0x308>)
 80014c4:	480e      	ldr	r0, [pc, #56]	; (8001500 <UART_Handle_Menu+0x2c4>)
 80014c6:	f007 f82d 	bl	8008524 <siprintf>
		  HAL_UART_Transmit(&huart1, (uint8_t *)result_str, strlen(result_str), HAL_MAX_DELAY);
 80014ca:	480d      	ldr	r0, [pc, #52]	; (8001500 <UART_Handle_Menu+0x2c4>)
 80014cc:	f7fe fe40 	bl	8000150 <strlen>
 80014d0:	4603      	mov	r3, r0
 80014d2:	b29a      	uxth	r2, r3
 80014d4:	f04f 33ff 	mov.w	r3, #4294967295
 80014d8:	4909      	ldr	r1, [pc, #36]	; (8001500 <UART_Handle_Menu+0x2c4>)
 80014da:	480a      	ldr	r0, [pc, #40]	; (8001504 <UART_Handle_Menu+0x2c8>)
 80014dc:	f004 fc14 	bl	8005d08 <HAL_UART_Transmit>
		  u8_condition = 0;
 80014e0:	4b0b      	ldr	r3, [pc, #44]	; (8001510 <UART_Handle_Menu+0x2d4>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	701a      	strb	r2, [r3, #0]
		break;
 80014e6:	e075      	b.n	80015d4 <UART_Handle_Menu+0x398>
 80014e8:	0800b210 	.word	0x0800b210
 80014ec:	20000358 	.word	0x20000358
 80014f0:	200003c4 	.word	0x200003c4
 80014f4:	0800b214 	.word	0x0800b214
 80014f8:	2000048c 	.word	0x2000048c
 80014fc:	0800b21c 	.word	0x0800b21c
 8001500:	20000390 	.word	0x20000390
 8001504:	20000308 	.word	0x20000308
 8001508:	0800b228 	.word	0x0800b228
 800150c:	0800b230 	.word	0x0800b230
 8001510:	2000038e 	.word	0x2000038e
 8001514:	0800b234 	.word	0x0800b234
 8001518:	0800b240 	.word	0x0800b240
 800151c:	0800b244 	.word	0x0800b244
 8001520:	0800b250 	.word	0x0800b250
 8001524:	0800b254 	.word	0x0800b254
 8001528:	0800b260 	.word	0x0800b260
 800152c:	0800b268 	.word	0x0800b268
 8001530:	0800b278 	.word	0x0800b278
 8001534:	0800b284 	.word	0x0800b284
 8001538:	20000490 	.word	0x20000490
 800153c:	0800b294 	.word	0x0800b294
 8001540:	20000494 	.word	0x20000494
 8001544:	0800b2a4 	.word	0x0800b2a4
	  case 3:
		Kd_value = atof(arg_list[1]);
 8001548:	4b24      	ldr	r3, [pc, #144]	; (80015dc <UART_Handle_Menu+0x3a0>)
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	4618      	mov	r0, r3
 800154e:	f005 fa03 	bl	8006958 <atof>
 8001552:	4602      	mov	r2, r0
 8001554:	460b      	mov	r3, r1
 8001556:	4610      	mov	r0, r2
 8001558:	4619      	mov	r1, r3
 800155a:	f7ff fab5 	bl	8000ac8 <__aeabi_d2f>
 800155e:	4603      	mov	r3, r0
 8001560:	4a1f      	ldr	r2, [pc, #124]	; (80015e0 <UART_Handle_Menu+0x3a4>)
 8001562:	6013      	str	r3, [r2, #0]
		sprintf(result_str, "OK KD = %0.5f\r\n", Kd_value);
 8001564:	4b1e      	ldr	r3, [pc, #120]	; (80015e0 <UART_Handle_Menu+0x3a4>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4618      	mov	r0, r3
 800156a:	f7fe ff5d 	bl	8000428 <__aeabi_f2d>
 800156e:	4602      	mov	r2, r0
 8001570:	460b      	mov	r3, r1
 8001572:	491c      	ldr	r1, [pc, #112]	; (80015e4 <UART_Handle_Menu+0x3a8>)
 8001574:	481c      	ldr	r0, [pc, #112]	; (80015e8 <UART_Handle_Menu+0x3ac>)
 8001576:	f006 ffd5 	bl	8008524 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t *)result_str, strlen(result_str), HAL_MAX_DELAY);
 800157a:	481b      	ldr	r0, [pc, #108]	; (80015e8 <UART_Handle_Menu+0x3ac>)
 800157c:	f7fe fde8 	bl	8000150 <strlen>
 8001580:	4603      	mov	r3, r0
 8001582:	b29a      	uxth	r2, r3
 8001584:	f04f 33ff 	mov.w	r3, #4294967295
 8001588:	4917      	ldr	r1, [pc, #92]	; (80015e8 <UART_Handle_Menu+0x3ac>)
 800158a:	4818      	ldr	r0, [pc, #96]	; (80015ec <UART_Handle_Menu+0x3b0>)
 800158c:	f004 fbbc 	bl	8005d08 <HAL_UART_Transmit>
		u8_condition = 0;
 8001590:	4b17      	ldr	r3, [pc, #92]	; (80015f0 <UART_Handle_Menu+0x3b4>)
 8001592:	2200      	movs	r2, #0
 8001594:	701a      	strb	r2, [r3, #0]
		break;
 8001596:	e01d      	b.n	80015d4 <UART_Handle_Menu+0x398>
	  case 4:
		  Speed_value = atoi(arg_list[1]);
 8001598:	4b10      	ldr	r3, [pc, #64]	; (80015dc <UART_Handle_Menu+0x3a0>)
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	4618      	mov	r0, r3
 800159e:	f005 f9de 	bl	800695e <atoi>
 80015a2:	4603      	mov	r3, r0
 80015a4:	4a13      	ldr	r2, [pc, #76]	; (80015f4 <UART_Handle_Menu+0x3b8>)
 80015a6:	6013      	str	r3, [r2, #0]
		  sprintf(result_str, "OK Speed = %d\r\n", Speed_value);
 80015a8:	4b12      	ldr	r3, [pc, #72]	; (80015f4 <UART_Handle_Menu+0x3b8>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	461a      	mov	r2, r3
 80015ae:	4912      	ldr	r1, [pc, #72]	; (80015f8 <UART_Handle_Menu+0x3bc>)
 80015b0:	480d      	ldr	r0, [pc, #52]	; (80015e8 <UART_Handle_Menu+0x3ac>)
 80015b2:	f006 ffb7 	bl	8008524 <siprintf>
		  HAL_UART_Transmit(&huart1, (uint8_t *)result_str, strlen(result_str), HAL_MAX_DELAY);
 80015b6:	480c      	ldr	r0, [pc, #48]	; (80015e8 <UART_Handle_Menu+0x3ac>)
 80015b8:	f7fe fdca 	bl	8000150 <strlen>
 80015bc:	4603      	mov	r3, r0
 80015be:	b29a      	uxth	r2, r3
 80015c0:	f04f 33ff 	mov.w	r3, #4294967295
 80015c4:	4908      	ldr	r1, [pc, #32]	; (80015e8 <UART_Handle_Menu+0x3ac>)
 80015c6:	4809      	ldr	r0, [pc, #36]	; (80015ec <UART_Handle_Menu+0x3b0>)
 80015c8:	f004 fb9e 	bl	8005d08 <HAL_UART_Transmit>
		  u8_condition = 0;
 80015cc:	4b08      	ldr	r3, [pc, #32]	; (80015f0 <UART_Handle_Menu+0x3b4>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	701a      	strb	r2, [r3, #0]
		break;
 80015d2:	bf00      	nop
	  }
}
 80015d4:	bf00      	nop
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	200003c4 	.word	0x200003c4
 80015e0:	20000498 	.word	0x20000498
 80015e4:	0800b2b4 	.word	0x0800b2b4
 80015e8:	20000390 	.word	0x20000390
 80015ec:	20000308 	.word	0x20000308
 80015f0:	2000038e 	.word	0x2000038e
 80015f4:	2000049c 	.word	0x2000049c
 80015f8:	0800b2c4 	.word	0x0800b2c4

080015fc <My_Motor_Control>:

/* Control Motor using timer */
void My_Motor_Control(int32_t left_vel ,int32_t right_vel)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	6039      	str	r1, [r7, #0]
	// Left motor control
	if(left_vel < 0)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2b00      	cmp	r3, #0
 800160a:	da06      	bge.n	800161a <My_Motor_Control+0x1e>
	{
		TIM4->CCR1 = left_vel;
 800160c:	4a10      	ldr	r2, [pc, #64]	; (8001650 <My_Motor_Control+0x54>)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6353      	str	r3, [r2, #52]	; 0x34
		TIM4->CCR2 = 0;
 8001612:	4b0f      	ldr	r3, [pc, #60]	; (8001650 <My_Motor_Control+0x54>)
 8001614:	2200      	movs	r2, #0
 8001616:	639a      	str	r2, [r3, #56]	; 0x38
 8001618:	e005      	b.n	8001626 <My_Motor_Control+0x2a>
	}
	else
	{
		TIM4->CCR1 = 0;
 800161a:	4b0d      	ldr	r3, [pc, #52]	; (8001650 <My_Motor_Control+0x54>)
 800161c:	2200      	movs	r2, #0
 800161e:	635a      	str	r2, [r3, #52]	; 0x34
		TIM4->CCR2 = left_vel;
 8001620:	4a0b      	ldr	r2, [pc, #44]	; (8001650 <My_Motor_Control+0x54>)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6393      	str	r3, [r2, #56]	; 0x38
	}

	//Right motor control
	if(right_vel < 0)
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	2b00      	cmp	r3, #0
 800162a:	da06      	bge.n	800163a <My_Motor_Control+0x3e>
	{
//		TIM4->CCR4 = right_vel;
//		TIM4->CCR3 = 0;
		TIM4->CCR4 = 0;
 800162c:	4b08      	ldr	r3, [pc, #32]	; (8001650 <My_Motor_Control+0x54>)
 800162e:	2200      	movs	r2, #0
 8001630:	641a      	str	r2, [r3, #64]	; 0x40
		TIM4->CCR3 = right_vel;
 8001632:	4a07      	ldr	r2, [pc, #28]	; (8001650 <My_Motor_Control+0x54>)
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	63d3      	str	r3, [r2, #60]	; 0x3c
//		TIM4->CCR4 = 0;
//		TIM4->CCR3 = right_vel;
		TIM4->CCR4 = right_vel;
		TIM4->CCR3 = 0;
	}
}
 8001638:	e005      	b.n	8001646 <My_Motor_Control+0x4a>
		TIM4->CCR4 = right_vel;
 800163a:	4a05      	ldr	r2, [pc, #20]	; (8001650 <My_Motor_Control+0x54>)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	6413      	str	r3, [r2, #64]	; 0x40
		TIM4->CCR3 = 0;
 8001640:	4b03      	ldr	r3, [pc, #12]	; (8001650 <My_Motor_Control+0x54>)
 8001642:	2200      	movs	r2, #0
 8001644:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001646:	bf00      	nop
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	bc80      	pop	{r7}
 800164e:	4770      	bx	lr
 8001650:	40000800 	.word	0x40000800

08001654 <Display_PID>:
//
//	 }else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
//}

void Display_PID(float Kp_val , float Ki_val , float Kd_val , uint16_t M_Speed_val )
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b08c      	sub	sp, #48	; 0x30
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]
 8001660:	807b      	strh	r3, [r7, #2]
	  char Ki_Val_Str[6] ;
	  char Kd_Val_Str[6] ;
	  char M_Speed_Val_Str[6];

	  /* Display PID value */
	  sprintf(Kp_Val_Str , "%.3f" , Kp_val);
 8001662:	68f8      	ldr	r0, [r7, #12]
 8001664:	f7fe fee0 	bl	8000428 <__aeabi_f2d>
 8001668:	4602      	mov	r2, r0
 800166a:	460b      	mov	r3, r1
 800166c:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001670:	4932      	ldr	r1, [pc, #200]	; (800173c <Display_PID+0xe8>)
 8001672:	f006 ff57 	bl	8008524 <siprintf>
	  sprintf(Ki_Val_Str , "%.3f" , Ki_val);
 8001676:	68b8      	ldr	r0, [r7, #8]
 8001678:	f7fe fed6 	bl	8000428 <__aeabi_f2d>
 800167c:	4602      	mov	r2, r0
 800167e:	460b      	mov	r3, r1
 8001680:	f107 0020 	add.w	r0, r7, #32
 8001684:	492d      	ldr	r1, [pc, #180]	; (800173c <Display_PID+0xe8>)
 8001686:	f006 ff4d 	bl	8008524 <siprintf>
	  sprintf(Kd_Val_Str , "%.3f" , Kd_val);
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f7fe fecc 	bl	8000428 <__aeabi_f2d>
 8001690:	4602      	mov	r2, r0
 8001692:	460b      	mov	r3, r1
 8001694:	f107 0018 	add.w	r0, r7, #24
 8001698:	4928      	ldr	r1, [pc, #160]	; (800173c <Display_PID+0xe8>)
 800169a:	f006 ff43 	bl	8008524 <siprintf>
	  sprintf(M_Speed_Val_Str , "%d" , M_Speed_val);
 800169e:	887a      	ldrh	r2, [r7, #2]
 80016a0:	f107 0310 	add.w	r3, r7, #16
 80016a4:	4926      	ldr	r1, [pc, #152]	; (8001740 <Display_PID+0xec>)
 80016a6:	4618      	mov	r0, r3
 80016a8:	f006 ff3c 	bl	8008524 <siprintf>

/* Display Kp */
	  ssd1306_SetCursor(75 , 20);
 80016ac:	2114      	movs	r1, #20
 80016ae:	204b      	movs	r0, #75	; 0x4b
 80016b0:	f001 f806 	bl	80026c0 <ssd1306_SetCursor>
	  ssd1306_WriteString("P: ",Font_6x8,White);
 80016b4:	4a23      	ldr	r2, [pc, #140]	; (8001744 <Display_PID+0xf0>)
 80016b6:	2301      	movs	r3, #1
 80016b8:	ca06      	ldmia	r2, {r1, r2}
 80016ba:	4823      	ldr	r0, [pc, #140]	; (8001748 <Display_PID+0xf4>)
 80016bc:	f000 ffda 	bl	8002674 <ssd1306_WriteString>
	  ssd1306_WriteString(Kp_Val_Str,Font_6x8,White);
 80016c0:	4a20      	ldr	r2, [pc, #128]	; (8001744 <Display_PID+0xf0>)
 80016c2:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80016c6:	2301      	movs	r3, #1
 80016c8:	ca06      	ldmia	r2, {r1, r2}
 80016ca:	f000 ffd3 	bl	8002674 <ssd1306_WriteString>

/* Display Ki */
	  ssd1306_SetCursor(75 , 30);
 80016ce:	211e      	movs	r1, #30
 80016d0:	204b      	movs	r0, #75	; 0x4b
 80016d2:	f000 fff5 	bl	80026c0 <ssd1306_SetCursor>
	  ssd1306_WriteString("I: ",Font_6x8,White);
 80016d6:	4a1b      	ldr	r2, [pc, #108]	; (8001744 <Display_PID+0xf0>)
 80016d8:	2301      	movs	r3, #1
 80016da:	ca06      	ldmia	r2, {r1, r2}
 80016dc:	481b      	ldr	r0, [pc, #108]	; (800174c <Display_PID+0xf8>)
 80016de:	f000 ffc9 	bl	8002674 <ssd1306_WriteString>
	  ssd1306_WriteString(Ki_Val_Str,Font_6x8,White);
 80016e2:	4a18      	ldr	r2, [pc, #96]	; (8001744 <Display_PID+0xf0>)
 80016e4:	f107 0020 	add.w	r0, r7, #32
 80016e8:	2301      	movs	r3, #1
 80016ea:	ca06      	ldmia	r2, {r1, r2}
 80016ec:	f000 ffc2 	bl	8002674 <ssd1306_WriteString>

/* Display Kd */
	  ssd1306_SetCursor(75 , 40);
 80016f0:	2128      	movs	r1, #40	; 0x28
 80016f2:	204b      	movs	r0, #75	; 0x4b
 80016f4:	f000 ffe4 	bl	80026c0 <ssd1306_SetCursor>
	  ssd1306_WriteString("D: ",Font_6x8,White);
 80016f8:	4a12      	ldr	r2, [pc, #72]	; (8001744 <Display_PID+0xf0>)
 80016fa:	2301      	movs	r3, #1
 80016fc:	ca06      	ldmia	r2, {r1, r2}
 80016fe:	4814      	ldr	r0, [pc, #80]	; (8001750 <Display_PID+0xfc>)
 8001700:	f000 ffb8 	bl	8002674 <ssd1306_WriteString>
	  ssd1306_WriteString(Kd_Val_Str,Font_6x8,White);
 8001704:	4a0f      	ldr	r2, [pc, #60]	; (8001744 <Display_PID+0xf0>)
 8001706:	f107 0018 	add.w	r0, r7, #24
 800170a:	2301      	movs	r3, #1
 800170c:	ca06      	ldmia	r2, {r1, r2}
 800170e:	f000 ffb1 	bl	8002674 <ssd1306_WriteString>

	  /* Display M_Speed Value */
	  ssd1306_SetCursor(75, 50);
 8001712:	2132      	movs	r1, #50	; 0x32
 8001714:	204b      	movs	r0, #75	; 0x4b
 8001716:	f000 ffd3 	bl	80026c0 <ssd1306_SetCursor>
	  ssd1306_WriteString("Sp:",Font_6x8,White);
 800171a:	4a0a      	ldr	r2, [pc, #40]	; (8001744 <Display_PID+0xf0>)
 800171c:	2301      	movs	r3, #1
 800171e:	ca06      	ldmia	r2, {r1, r2}
 8001720:	480c      	ldr	r0, [pc, #48]	; (8001754 <Display_PID+0x100>)
 8001722:	f000 ffa7 	bl	8002674 <ssd1306_WriteString>
	  ssd1306_WriteString(M_Speed_Val_Str,Font_6x8,White);
 8001726:	4a07      	ldr	r2, [pc, #28]	; (8001744 <Display_PID+0xf0>)
 8001728:	f107 0010 	add.w	r0, r7, #16
 800172c:	2301      	movs	r3, #1
 800172e:	ca06      	ldmia	r2, {r1, r2}
 8001730:	f000 ffa0 	bl	8002674 <ssd1306_WriteString>
}
 8001734:	bf00      	nop
 8001736:	3730      	adds	r7, #48	; 0x30
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	0800b2d4 	.word	0x0800b2d4
 8001740:	0800b2dc 	.word	0x0800b2dc
 8001744:	20000034 	.word	0x20000034
 8001748:	0800b2e0 	.word	0x0800b2e0
 800174c:	0800b2e4 	.word	0x0800b2e4
 8001750:	0800b2e8 	.word	0x0800b2e8
 8001754:	0800b2ec 	.word	0x0800b2ec

08001758 <Display_Battery>:

void Display_Battery()
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b086      	sub	sp, #24
 800175c:	af02      	add	r7, sp, #8

	Battery_voltage =  ((float)HAL_ADC_GetValue(&hadc1)*3.3*4 /4096);
 800175e:	4888      	ldr	r0, [pc, #544]	; (8001980 <Display_Battery+0x228>)
 8001760:	f001 fd56 	bl	8003210 <HAL_ADC_GetValue>
 8001764:	4603      	mov	r3, r0
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff fab4 	bl	8000cd4 <__aeabi_ui2f>
 800176c:	4603      	mov	r3, r0
 800176e:	4618      	mov	r0, r3
 8001770:	f7fe fe5a 	bl	8000428 <__aeabi_f2d>
 8001774:	a37a      	add	r3, pc, #488	; (adr r3, 8001960 <Display_Battery+0x208>)
 8001776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800177a:	f7fe fead 	bl	80004d8 <__aeabi_dmul>
 800177e:	4602      	mov	r2, r0
 8001780:	460b      	mov	r3, r1
 8001782:	4610      	mov	r0, r2
 8001784:	4619      	mov	r1, r3
 8001786:	f04f 0200 	mov.w	r2, #0
 800178a:	4b7e      	ldr	r3, [pc, #504]	; (8001984 <Display_Battery+0x22c>)
 800178c:	f7fe fea4 	bl	80004d8 <__aeabi_dmul>
 8001790:	4602      	mov	r2, r0
 8001792:	460b      	mov	r3, r1
 8001794:	4610      	mov	r0, r2
 8001796:	4619      	mov	r1, r3
 8001798:	f04f 0200 	mov.w	r2, #0
 800179c:	4b7a      	ldr	r3, [pc, #488]	; (8001988 <Display_Battery+0x230>)
 800179e:	f7fe ffc5 	bl	800072c <__aeabi_ddiv>
 80017a2:	4602      	mov	r2, r0
 80017a4:	460b      	mov	r3, r1
 80017a6:	4610      	mov	r0, r2
 80017a8:	4619      	mov	r1, r3
 80017aa:	f7ff f98d 	bl	8000ac8 <__aeabi_d2f>
 80017ae:	4603      	mov	r3, r0
 80017b0:	4a76      	ldr	r2, [pc, #472]	; (800198c <Display_Battery+0x234>)
 80017b2:	6013      	str	r3, [r2, #0]

	char BatStr[9] ;
	/* Display battery status */
		  sprintf(BatStr, "%.0f", Battery_voltage);
 80017b4:	4b75      	ldr	r3, [pc, #468]	; (800198c <Display_Battery+0x234>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7fe fe35 	bl	8000428 <__aeabi_f2d>
 80017be:	4602      	mov	r2, r0
 80017c0:	460b      	mov	r3, r1
 80017c2:	1d38      	adds	r0, r7, #4
 80017c4:	4972      	ldr	r1, [pc, #456]	; (8001990 <Display_Battery+0x238>)
 80017c6:	f006 fead 	bl	8008524 <siprintf>
		  if (Battery_voltage <= 10.8)
 80017ca:	4b70      	ldr	r3, [pc, #448]	; (800198c <Display_Battery+0x234>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7fe fe2a 	bl	8000428 <__aeabi_f2d>
 80017d4:	a364      	add	r3, pc, #400	; (adr r3, 8001968 <Display_Battery+0x210>)
 80017d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017da:	f7ff f8f9 	bl	80009d0 <__aeabi_dcmple>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d019      	beq.n	8001818 <Display_Battery+0xc0>
		  {
			  ssd1306_DrawBitmap(2, 17, battery_5 , 25 ,25 ,White); //Bat [0 - 5%]
 80017e4:	2301      	movs	r3, #1
 80017e6:	9301      	str	r3, [sp, #4]
 80017e8:	2319      	movs	r3, #25
 80017ea:	9300      	str	r3, [sp, #0]
 80017ec:	2319      	movs	r3, #25
 80017ee:	4a69      	ldr	r2, [pc, #420]	; (8001994 <Display_Battery+0x23c>)
 80017f0:	2111      	movs	r1, #17
 80017f2:	2002      	movs	r0, #2
 80017f4:	f000 ffe8 	bl	80027c8 <ssd1306_DrawBitmap>
			  ssd1306_DrawBitmap(115, 1, plug , 16, 16, White);
 80017f8:	2301      	movs	r3, #1
 80017fa:	9301      	str	r3, [sp, #4]
 80017fc:	2310      	movs	r3, #16
 80017fe:	9300      	str	r3, [sp, #0]
 8001800:	2310      	movs	r3, #16
 8001802:	4a65      	ldr	r2, [pc, #404]	; (8001998 <Display_Battery+0x240>)
 8001804:	2101      	movs	r1, #1
 8001806:	2073      	movs	r0, #115	; 0x73
 8001808:	f000 ffde 	bl	80027c8 <ssd1306_DrawBitmap>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 800180c:	2201      	movs	r2, #1
 800180e:	2102      	movs	r1, #2
 8001810:	4862      	ldr	r0, [pc, #392]	; (800199c <Display_Battery+0x244>)
 8001812:	f002 fac8 	bl	8003da6 <HAL_GPIO_WritePin>
 8001816:	e08e      	b.n	8001936 <Display_Battery+0x1de>
		  }
		  else if (Battery_voltage <= 11.25 && Battery_voltage >= 10.8)
 8001818:	4b5c      	ldr	r3, [pc, #368]	; (800198c <Display_Battery+0x234>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4960      	ldr	r1, [pc, #384]	; (80019a0 <Display_Battery+0x248>)
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff fc58 	bl	80010d4 <__aeabi_fcmple>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d026      	beq.n	8001878 <Display_Battery+0x120>
 800182a:	4b58      	ldr	r3, [pc, #352]	; (800198c <Display_Battery+0x234>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4618      	mov	r0, r3
 8001830:	f7fe fdfa 	bl	8000428 <__aeabi_f2d>
 8001834:	a34c      	add	r3, pc, #304	; (adr r3, 8001968 <Display_Battery+0x210>)
 8001836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800183a:	f7ff f8d3 	bl	80009e4 <__aeabi_dcmpge>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d019      	beq.n	8001878 <Display_Battery+0x120>
		  {
			  ssd1306_DrawBitmap(2, 17, battery_4 , 25, 25, White); //Bat [5 - 25%]
 8001844:	2301      	movs	r3, #1
 8001846:	9301      	str	r3, [sp, #4]
 8001848:	2319      	movs	r3, #25
 800184a:	9300      	str	r3, [sp, #0]
 800184c:	2319      	movs	r3, #25
 800184e:	4a55      	ldr	r2, [pc, #340]	; (80019a4 <Display_Battery+0x24c>)
 8001850:	2111      	movs	r1, #17
 8001852:	2002      	movs	r0, #2
 8001854:	f000 ffb8 	bl	80027c8 <ssd1306_DrawBitmap>
			  ssd1306_DrawBitmap(115, 1, plug , 16, 16, White);
 8001858:	2301      	movs	r3, #1
 800185a:	9301      	str	r3, [sp, #4]
 800185c:	2310      	movs	r3, #16
 800185e:	9300      	str	r3, [sp, #0]
 8001860:	2310      	movs	r3, #16
 8001862:	4a4d      	ldr	r2, [pc, #308]	; (8001998 <Display_Battery+0x240>)
 8001864:	2101      	movs	r1, #1
 8001866:	2073      	movs	r0, #115	; 0x73
 8001868:	f000 ffae 	bl	80027c8 <ssd1306_DrawBitmap>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 800186c:	2200      	movs	r2, #0
 800186e:	2102      	movs	r1, #2
 8001870:	484a      	ldr	r0, [pc, #296]	; (800199c <Display_Battery+0x244>)
 8001872:	f002 fa98 	bl	8003da6 <HAL_GPIO_WritePin>
 8001876:	e05e      	b.n	8001936 <Display_Battery+0x1de>

		  }
		  else if (Battery_voltage <= 11.7 && Battery_voltage >=11.25)
 8001878:	4b44      	ldr	r3, [pc, #272]	; (800198c <Display_Battery+0x234>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4618      	mov	r0, r3
 800187e:	f7fe fdd3 	bl	8000428 <__aeabi_f2d>
 8001882:	a33b      	add	r3, pc, #236	; (adr r3, 8001970 <Display_Battery+0x218>)
 8001884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001888:	f7ff f8a2 	bl	80009d0 <__aeabi_dcmple>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d018      	beq.n	80018c4 <Display_Battery+0x16c>
 8001892:	4b3e      	ldr	r3, [pc, #248]	; (800198c <Display_Battery+0x234>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4942      	ldr	r1, [pc, #264]	; (80019a0 <Display_Battery+0x248>)
 8001898:	4618      	mov	r0, r3
 800189a:	f7ff fc25 	bl	80010e8 <__aeabi_fcmpge>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d00f      	beq.n	80018c4 <Display_Battery+0x16c>
		  {
			  ssd1306_DrawBitmap(2, 17, battery_3 , 25, 25, White); //Bat [25 - 50%]
 80018a4:	2301      	movs	r3, #1
 80018a6:	9301      	str	r3, [sp, #4]
 80018a8:	2319      	movs	r3, #25
 80018aa:	9300      	str	r3, [sp, #0]
 80018ac:	2319      	movs	r3, #25
 80018ae:	4a3e      	ldr	r2, [pc, #248]	; (80019a8 <Display_Battery+0x250>)
 80018b0:	2111      	movs	r1, #17
 80018b2:	2002      	movs	r0, #2
 80018b4:	f000 ff88 	bl	80027c8 <ssd1306_DrawBitmap>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 80018b8:	2200      	movs	r2, #0
 80018ba:	2102      	movs	r1, #2
 80018bc:	4837      	ldr	r0, [pc, #220]	; (800199c <Display_Battery+0x244>)
 80018be:	f002 fa72 	bl	8003da6 <HAL_GPIO_WritePin>
 80018c2:	e038      	b.n	8001936 <Display_Battery+0x1de>
		  }
		  else if (Battery_voltage <= 12.15 && Battery_voltage >= 11.7)
 80018c4:	4b31      	ldr	r3, [pc, #196]	; (800198c <Display_Battery+0x234>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7fe fdad 	bl	8000428 <__aeabi_f2d>
 80018ce:	a32a      	add	r3, pc, #168	; (adr r3, 8001978 <Display_Battery+0x220>)
 80018d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d4:	f7ff f87c 	bl	80009d0 <__aeabi_dcmple>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d01c      	beq.n	8001918 <Display_Battery+0x1c0>
 80018de:	4b2b      	ldr	r3, [pc, #172]	; (800198c <Display_Battery+0x234>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7fe fda0 	bl	8000428 <__aeabi_f2d>
 80018e8:	a321      	add	r3, pc, #132	; (adr r3, 8001970 <Display_Battery+0x218>)
 80018ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ee:	f7ff f879 	bl	80009e4 <__aeabi_dcmpge>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d00f      	beq.n	8001918 <Display_Battery+0x1c0>
		  {
			  ssd1306_DrawBitmap(2, 17, battery_2 , 25, 25, White); //Bat [50 - 75%]
 80018f8:	2301      	movs	r3, #1
 80018fa:	9301      	str	r3, [sp, #4]
 80018fc:	2319      	movs	r3, #25
 80018fe:	9300      	str	r3, [sp, #0]
 8001900:	2319      	movs	r3, #25
 8001902:	4a2a      	ldr	r2, [pc, #168]	; (80019ac <Display_Battery+0x254>)
 8001904:	2111      	movs	r1, #17
 8001906:	2002      	movs	r0, #2
 8001908:	f000 ff5e 	bl	80027c8 <ssd1306_DrawBitmap>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 800190c:	2200      	movs	r2, #0
 800190e:	2102      	movs	r1, #2
 8001910:	4822      	ldr	r0, [pc, #136]	; (800199c <Display_Battery+0x244>)
 8001912:	f002 fa48 	bl	8003da6 <HAL_GPIO_WritePin>
 8001916:	e00e      	b.n	8001936 <Display_Battery+0x1de>
		  }
		  else
		  {
			  ssd1306_DrawBitmap(2, 17, battery_1 , 25, 25, White); //Bat [75 - 100%]
 8001918:	2301      	movs	r3, #1
 800191a:	9301      	str	r3, [sp, #4]
 800191c:	2319      	movs	r3, #25
 800191e:	9300      	str	r3, [sp, #0]
 8001920:	2319      	movs	r3, #25
 8001922:	4a23      	ldr	r2, [pc, #140]	; (80019b0 <Display_Battery+0x258>)
 8001924:	2111      	movs	r1, #17
 8001926:	2002      	movs	r0, #2
 8001928:	f000 ff4e 	bl	80027c8 <ssd1306_DrawBitmap>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 800192c:	2200      	movs	r2, #0
 800192e:	2102      	movs	r1, #2
 8001930:	481a      	ldr	r0, [pc, #104]	; (800199c <Display_Battery+0x244>)
 8001932:	f002 fa38 	bl	8003da6 <HAL_GPIO_WritePin>
		  }

		  ssd1306_SetCursor(30 , 21);
 8001936:	2115      	movs	r1, #21
 8001938:	201e      	movs	r0, #30
 800193a:	f000 fec1 	bl	80026c0 <ssd1306_SetCursor>
		  ssd1306_WriteString(BatStr,Font_11x18 , White);
 800193e:	4a1d      	ldr	r2, [pc, #116]	; (80019b4 <Display_Battery+0x25c>)
 8001940:	1d38      	adds	r0, r7, #4
 8001942:	2301      	movs	r3, #1
 8001944:	ca06      	ldmia	r2, {r1, r2}
 8001946:	f000 fe95 	bl	8002674 <ssd1306_WriteString>
		  ssd1306_WriteString("v",Font_7x10 , White);
 800194a:	4a1b      	ldr	r2, [pc, #108]	; (80019b8 <Display_Battery+0x260>)
 800194c:	2301      	movs	r3, #1
 800194e:	ca06      	ldmia	r2, {r1, r2}
 8001950:	481a      	ldr	r0, [pc, #104]	; (80019bc <Display_Battery+0x264>)
 8001952:	f000 fe8f 	bl	8002674 <ssd1306_WriteString>

}
 8001956:	bf00      	nop
 8001958:	3710      	adds	r7, #16
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	66666666 	.word	0x66666666
 8001964:	400a6666 	.word	0x400a6666
 8001968:	9999999a 	.word	0x9999999a
 800196c:	40259999 	.word	0x40259999
 8001970:	66666666 	.word	0x66666666
 8001974:	40276666 	.word	0x40276666
 8001978:	cccccccd 	.word	0xcccccccd
 800197c:	40284ccc 	.word	0x40284ccc
 8001980:	2000023c 	.word	0x2000023c
 8001984:	40100000 	.word	0x40100000
 8001988:	40b00000 	.word	0x40b00000
 800198c:	20000350 	.word	0x20000350
 8001990:	0800b2f0 	.word	0x0800b2f0
 8001994:	0800b48c 	.word	0x0800b48c
 8001998:	0800b5b0 	.word	0x0800b5b0
 800199c:	40010c00 	.word	0x40010c00
 80019a0:	41340000 	.word	0x41340000
 80019a4:	0800b428 	.word	0x0800b428
 80019a8:	0800b3c4 	.word	0x0800b3c4
 80019ac:	0800b360 	.word	0x0800b360
 80019b0:	0800b2fc 	.word	0x0800b2fc
 80019b4:	20000044 	.word	0x20000044
 80019b8:	2000003c 	.word	0x2000003c
 80019bc:	0800b2f8 	.word	0x0800b2f8

080019c0 <Display_Frame>:

void Display_Frame()
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af02      	add	r7, sp, #8
	/* Draw Frames */
		  ssd1306_Line(1, 17, 128, 17, White);
 80019c6:	2301      	movs	r3, #1
 80019c8:	9300      	str	r3, [sp, #0]
 80019ca:	2311      	movs	r3, #17
 80019cc:	2280      	movs	r2, #128	; 0x80
 80019ce:	2111      	movs	r1, #17
 80019d0:	2001      	movs	r0, #1
 80019d2:	f000 fe8d 	bl	80026f0 <ssd1306_Line>
		  ssd1306_Line(70, 18, 70, 64, White);
 80019d6:	2301      	movs	r3, #1
 80019d8:	9300      	str	r3, [sp, #0]
 80019da:	2340      	movs	r3, #64	; 0x40
 80019dc:	2246      	movs	r2, #70	; 0x46
 80019de:	2112      	movs	r1, #18
 80019e0:	2046      	movs	r0, #70	; 0x46
 80019e2:	f000 fe85 	bl	80026f0 <ssd1306_Line>
		  ssd1306_Line(1, 41, 69, 41,  White);
 80019e6:	2301      	movs	r3, #1
 80019e8:	9300      	str	r3, [sp, #0]
 80019ea:	2329      	movs	r3, #41	; 0x29
 80019ec:	2245      	movs	r2, #69	; 0x45
 80019ee:	2129      	movs	r1, #41	; 0x29
 80019f0:	2001      	movs	r0, #1
 80019f2:	f000 fe7d 	bl	80026f0 <ssd1306_Line>

}
 80019f6:	bf00      	nop
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}

080019fc <Display_Logo>:

void Display_Logo()
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af02      	add	r7, sp, #8
	/* Display Logo */
		  ssd1306_DrawBitmap(1, 1, LogoPIFAVENGER , 90, 16, White); //Logo
 8001a02:	2301      	movs	r3, #1
 8001a04:	9301      	str	r3, [sp, #4]
 8001a06:	2310      	movs	r3, #16
 8001a08:	9300      	str	r3, [sp, #0]
 8001a0a:	235a      	movs	r3, #90	; 0x5a
 8001a0c:	4a03      	ldr	r2, [pc, #12]	; (8001a1c <Display_Logo+0x20>)
 8001a0e:	2101      	movs	r1, #1
 8001a10:	2001      	movs	r0, #1
 8001a12:	f000 fed9 	bl	80027c8 <ssd1306_DrawBitmap>

}
 8001a16:	bf00      	nop
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	0800b4f0 	.word	0x0800b4f0

08001a20 <Display_Bluetooth_status>:

void Display_Bluetooth_status()
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af02      	add	r7, sp, #8
	  /* Display Bluetooth Status*/
	  if(1)
	  {
	  	  ssd1306_DrawBitmap(107, 4, bluetooth , 10, 10, White);
 8001a26:	2301      	movs	r3, #1
 8001a28:	9301      	str	r3, [sp, #4]
 8001a2a:	230a      	movs	r3, #10
 8001a2c:	9300      	str	r3, [sp, #0]
 8001a2e:	230a      	movs	r3, #10
 8001a30:	4a03      	ldr	r2, [pc, #12]	; (8001a40 <Display_Bluetooth_status+0x20>)
 8001a32:	2104      	movs	r1, #4
 8001a34:	206b      	movs	r0, #107	; 0x6b
 8001a36:	f000 fec7 	bl	80027c8 <ssd1306_DrawBitmap>
	  }

}
 8001a3a:	bf00      	nop
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	0800b5d0 	.word	0x0800b5d0

08001a44 <my_Oled_Display>:


void my_Oled_Display(float Kp_val , float Ki_val , float Kd_val , uint16_t M_Speed_val )
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af02      	add	r7, sp, #8
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	607a      	str	r2, [r7, #4]
 8001a50:	807b      	strh	r3, [r7, #2]

	  bluetooth_status = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7);
 8001a52:	2180      	movs	r1, #128	; 0x80
 8001a54:	4815      	ldr	r0, [pc, #84]	; (8001aac <my_Oled_Display+0x68>)
 8001a56:	f002 f98f 	bl	8003d78 <HAL_GPIO_ReadPin>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	4b14      	ldr	r3, [pc, #80]	; (8001ab0 <my_Oled_Display+0x6c>)
 8001a60:	701a      	strb	r2, [r3, #0]
	  ssd1306_Fill(Black);
 8001a62:	2000      	movs	r0, #0
 8001a64:	f000 fcec 	bl	8002440 <ssd1306_Fill>
	  Display_Logo();
 8001a68:	f7ff ffc8 	bl	80019fc <Display_Logo>
	  Display_Frame();
 8001a6c:	f7ff ffa8 	bl	80019c0 <Display_Frame>
	  Display_Bluetooth_status(bluetooth_status);
 8001a70:	4b0f      	ldr	r3, [pc, #60]	; (8001ab0 <my_Oled_Display+0x6c>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff ffd3 	bl	8001a20 <Display_Bluetooth_status>
	  Display_Battery();
 8001a7a:	f7ff fe6d 	bl	8001758 <Display_Battery>
	  ssd1306_DrawBitmap(1 , 40 , Bug , 59 , 26 ,White);
 8001a7e:	2301      	movs	r3, #1
 8001a80:	9301      	str	r3, [sp, #4]
 8001a82:	231a      	movs	r3, #26
 8001a84:	9300      	str	r3, [sp, #0]
 8001a86:	233b      	movs	r3, #59	; 0x3b
 8001a88:	4a0a      	ldr	r2, [pc, #40]	; (8001ab4 <my_Oled_Display+0x70>)
 8001a8a:	2128      	movs	r1, #40	; 0x28
 8001a8c:	2001      	movs	r0, #1
 8001a8e:	f000 fe9b 	bl	80027c8 <ssd1306_DrawBitmap>
	  Display_PID(Kp_val,Ki_val,Kd_val,M_Speed_val);
 8001a92:	887b      	ldrh	r3, [r7, #2]
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	68b9      	ldr	r1, [r7, #8]
 8001a98:	68f8      	ldr	r0, [r7, #12]
 8001a9a:	f7ff fddb 	bl	8001654 <Display_PID>

/* Initialize Screen */
	  ssd1306_UpdateScreen();
 8001a9e:	f000 fce7 	bl	8002470 <ssd1306_UpdateScreen>


}
 8001aa2:	bf00      	nop
 8001aa4:	3710      	adds	r7, #16
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40010800 	.word	0x40010800
 8001ab0:	20000356 	.word	0x20000356
 8001ab4:	0800b5e4 	.word	0x0800b5e4

08001ab8 <sensorRead>:

uint16_t sum = 0;
uint16_t s[5];

void sensorRead() {
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
	  s[0] = (GPIOA->IDR >> 0) & 0x01;
 8001abc:	4b17      	ldr	r3, [pc, #92]	; (8001b1c <sensorRead+0x64>)
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	f003 0301 	and.w	r3, r3, #1
 8001ac6:	b29a      	uxth	r2, r3
 8001ac8:	4b15      	ldr	r3, [pc, #84]	; (8001b20 <sensorRead+0x68>)
 8001aca:	801a      	strh	r2, [r3, #0]
	  s[1] = (GPIOA->IDR >> 1) & 0x01;
 8001acc:	4b13      	ldr	r3, [pc, #76]	; (8001b1c <sensorRead+0x64>)
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	085b      	lsrs	r3, r3, #1
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	f003 0301 	and.w	r3, r3, #1
 8001ad8:	b29a      	uxth	r2, r3
 8001ada:	4b11      	ldr	r3, [pc, #68]	; (8001b20 <sensorRead+0x68>)
 8001adc:	805a      	strh	r2, [r3, #2]
	  s[2] = (GPIOA->IDR >> 2) & 0x01;
 8001ade:	4b0f      	ldr	r3, [pc, #60]	; (8001b1c <sensorRead+0x64>)
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	089b      	lsrs	r3, r3, #2
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	b29a      	uxth	r2, r3
 8001aec:	4b0c      	ldr	r3, [pc, #48]	; (8001b20 <sensorRead+0x68>)
 8001aee:	809a      	strh	r2, [r3, #4]
	  s[3] = (GPIOA->IDR >> 3) & 0x01;
 8001af0:	4b0a      	ldr	r3, [pc, #40]	; (8001b1c <sensorRead+0x64>)
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	08db      	lsrs	r3, r3, #3
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	f003 0301 	and.w	r3, r3, #1
 8001afc:	b29a      	uxth	r2, r3
 8001afe:	4b08      	ldr	r3, [pc, #32]	; (8001b20 <sensorRead+0x68>)
 8001b00:	80da      	strh	r2, [r3, #6]
	  s[4] = (GPIOA->IDR >> 4) & 0x01;
 8001b02:	4b06      	ldr	r3, [pc, #24]	; (8001b1c <sensorRead+0x64>)
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	091b      	lsrs	r3, r3, #4
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	f003 0301 	and.w	r3, r3, #1
 8001b0e:	b29a      	uxth	r2, r3
 8001b10:	4b03      	ldr	r3, [pc, #12]	; (8001b20 <sensorRead+0x68>)
 8001b12:	811a      	strh	r2, [r3, #8]
}
 8001b14:	bf00      	nop
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bc80      	pop	{r7}
 8001b1a:	4770      	bx	lr
 8001b1c:	40010800 	.word	0x40010800
 8001b20:	200004a4 	.word	0x200004a4

08001b24 <Distance>:

uint16_t old_d;
uint16_t Distance(uint16_t sensor_value []) {
 8001b24:	b480      	push	{r7}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
	uint16_t d = 0;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	81fb      	strh	r3, [r7, #14]
	char i = 0;
 8001b30:	2300      	movs	r3, #0
 8001b32:	737b      	strb	r3, [r7, #13]
	//calibration step
	for(char k = 1; k < 6; k++) {
 8001b34:	2301      	movs	r3, #1
 8001b36:	733b      	strb	r3, [r7, #12]
 8001b38:	e01e      	b.n	8001b78 <Distance+0x54>
		if(!sensor_value[k-1])	// black line
 8001b3a:	7b3b      	ldrb	r3, [r7, #12]
 8001b3c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8001b40:	3b01      	subs	r3, #1
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	4413      	add	r3, r2
 8001b48:	881b      	ldrh	r3, [r3, #0]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d111      	bne.n	8001b72 <Distance+0x4e>
		{
			i++;
 8001b4e:	7b7b      	ldrb	r3, [r7, #13]
 8001b50:	3301      	adds	r3, #1
 8001b52:	737b      	strb	r3, [r7, #13]
			d += k*100;
 8001b54:	7b3b      	ldrb	r3, [r7, #12]
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	461a      	mov	r2, r3
 8001b5a:	0092      	lsls	r2, r2, #2
 8001b5c:	4413      	add	r3, r2
 8001b5e:	461a      	mov	r2, r3
 8001b60:	0091      	lsls	r1, r2, #2
 8001b62:	461a      	mov	r2, r3
 8001b64:	460b      	mov	r3, r1
 8001b66:	4413      	add	r3, r2
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	b29a      	uxth	r2, r3
 8001b6c:	89fb      	ldrh	r3, [r7, #14]
 8001b6e:	4413      	add	r3, r2
 8001b70:	81fb      	strh	r3, [r7, #14]
	for(char k = 1; k < 6; k++) {
 8001b72:	7b3b      	ldrb	r3, [r7, #12]
 8001b74:	3301      	adds	r3, #1
 8001b76:	733b      	strb	r3, [r7, #12]
 8001b78:	7b3b      	ldrb	r3, [r7, #12]
 8001b7a:	2b05      	cmp	r3, #5
 8001b7c:	d9dd      	bls.n	8001b3a <Distance+0x16>
		}
	}
	if(i>0 && i<5) {
 8001b7e:	7b7b      	ldrb	r3, [r7, #13]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d00c      	beq.n	8001b9e <Distance+0x7a>
 8001b84:	7b7b      	ldrb	r3, [r7, #13]
 8001b86:	2b04      	cmp	r3, #4
 8001b88:	d809      	bhi.n	8001b9e <Distance+0x7a>
		old_d = d/i;
 8001b8a:	89fa      	ldrh	r2, [r7, #14]
 8001b8c:	7b7b      	ldrb	r3, [r7, #13]
 8001b8e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001b92:	b29a      	uxth	r2, r3
 8001b94:	4b0e      	ldr	r3, [pc, #56]	; (8001bd0 <Distance+0xac>)
 8001b96:	801a      	strh	r2, [r3, #0]
		return old_d;
 8001b98:	4b0d      	ldr	r3, [pc, #52]	; (8001bd0 <Distance+0xac>)
 8001b9a:	881b      	ldrh	r3, [r3, #0]
 8001b9c:	e013      	b.n	8001bc6 <Distance+0xa2>
	}
	else if (i==5) //when all sensor detect black line --- very special case
 8001b9e:	7b7b      	ldrb	r3, [r7, #13]
 8001ba0:	2b05      	cmp	r3, #5
 8001ba2:	d102      	bne.n	8001baa <Distance+0x86>
	{
		return 300;	// keep moving forward
 8001ba4:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001ba8:	e00d      	b.n	8001bc6 <Distance+0xa2>
	}
	else	//no line? -- khi ma xe no chay lo qua duong vach vi du vo cua gap
	{
		if(old_d < 200 && old_d < 400) {
 8001baa:	4b09      	ldr	r3, [pc, #36]	; (8001bd0 <Distance+0xac>)
 8001bac:	881b      	ldrh	r3, [r3, #0]
 8001bae:	2bc7      	cmp	r3, #199	; 0xc7
 8001bb0:	d807      	bhi.n	8001bc2 <Distance+0x9e>
 8001bb2:	4b07      	ldr	r3, [pc, #28]	; (8001bd0 <Distance+0xac>)
 8001bb4:	881b      	ldrh	r3, [r3, #0]
 8001bb6:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001bba:	d202      	bcs.n	8001bc2 <Distance+0x9e>
			return 300;
 8001bbc:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001bc0:	e001      	b.n	8001bc6 <Distance+0xa2>
		}
		else
			return old_d;	// thi nho lai truong hop truoc do ma tiep tuc di nhu vay
 8001bc2:	4b03      	ldr	r3, [pc, #12]	; (8001bd0 <Distance+0xac>)
 8001bc4:	881b      	ldrh	r3, [r3, #0]
		// vi du cua gap ma queo phai ma bi lo thi cu tiep tuc chay nhu trang thai truoc do
	}
	//06-12-23 -- chua giai quyet duoc truong hop goc nhon or goc vuong.
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3714      	adds	r7, #20
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bc80      	pop	{r7}
 8001bce:	4770      	bx	lr
 8001bd0:	200004ae 	.word	0x200004ae

08001bd4 <PID_control>:

void PID_control(float _Kp, float _Ki, float _Kd, uint16_t base_speed, uint16_t distance) {
 8001bd4:	b590      	push	{r4, r7, lr}
 8001bd6:	b08b      	sub	sp, #44	; 0x2c
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	60b9      	str	r1, [r7, #8]
 8001bde:	607a      	str	r2, [r7, #4]
 8001be0:	807b      	strh	r3, [r7, #2]
		int distance_error;
		static int old_distance_error = 0;
		static float I = 0;
		float P = 0, D = 0, Total = 0;
 8001be2:	f04f 0300 	mov.w	r3, #0
 8001be6:	627b      	str	r3, [r7, #36]	; 0x24
 8001be8:	f04f 0300 	mov.w	r3, #0
 8001bec:	623b      	str	r3, [r7, #32]
 8001bee:	f04f 0300 	mov.w	r3, #0
 8001bf2:	61fb      	str	r3, [r7, #28]
		int16_t increased_speed = 0, decreased_speed = 0;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	837b      	strh	r3, [r7, #26]
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	833b      	strh	r3, [r7, #24]

		distance_error = 300 - distance;
 8001bfc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001bfe:	f5c3 7396 	rsb	r3, r3, #300	; 0x12c
 8001c02:	617b      	str	r3, [r7, #20]
		P = _Kp * distance_error ;	// change a number based on real situ
 8001c04:	6978      	ldr	r0, [r7, #20]
 8001c06:	f7ff f869 	bl	8000cdc <__aeabi_i2f>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	68f8      	ldr	r0, [r7, #12]
 8001c10:	f7ff f8b8 	bl	8000d84 <__aeabi_fmul>
 8001c14:	4603      	mov	r3, r0
 8001c16:	627b      	str	r3, [r7, #36]	; 0x24

		D = _Kd * (distance_error - old_distance_error) / 5;
 8001c18:	4b4d      	ldr	r3, [pc, #308]	; (8001d50 <PID_control+0x17c>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	697a      	ldr	r2, [r7, #20]
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff f85b 	bl	8000cdc <__aeabi_i2f>
 8001c26:	4603      	mov	r3, r0
 8001c28:	6879      	ldr	r1, [r7, #4]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7ff f8aa 	bl	8000d84 <__aeabi_fmul>
 8001c30:	4603      	mov	r3, r0
 8001c32:	4948      	ldr	r1, [pc, #288]	; (8001d54 <PID_control+0x180>)
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff f959 	bl	8000eec <__aeabi_fdiv>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	623b      	str	r3, [r7, #32]
		// should you divide by 5 ? should change it when
		// you could
		old_distance_error = distance_error;
 8001c3e:	4a44      	ldr	r2, [pc, #272]	; (8001d50 <PID_control+0x17c>)
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	6013      	str	r3, [r2, #0]

		if((-100 < distance_error) && ( distance_error<100))
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8001c4a:	db17      	blt.n	8001c7c <PID_control+0xa8>
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	2b63      	cmp	r3, #99	; 0x63
 8001c50:	dc14      	bgt.n	8001c7c <PID_control+0xa8>
			I = I + (_Ki * distance_error);
 8001c52:	6978      	ldr	r0, [r7, #20]
 8001c54:	f7ff f842 	bl	8000cdc <__aeabi_i2f>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	68b9      	ldr	r1, [r7, #8]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff f891 	bl	8000d84 <__aeabi_fmul>
 8001c62:	4603      	mov	r3, r0
 8001c64:	461a      	mov	r2, r3
 8001c66:	4b3c      	ldr	r3, [pc, #240]	; (8001d58 <PID_control+0x184>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	4610      	mov	r0, r2
 8001c6e:	f7fe ff81 	bl	8000b74 <__addsf3>
 8001c72:	4603      	mov	r3, r0
 8001c74:	461a      	mov	r2, r3
 8001c76:	4b38      	ldr	r3, [pc, #224]	; (8001d58 <PID_control+0x184>)
 8001c78:	601a      	str	r2, [r3, #0]
 8001c7a:	e002      	b.n	8001c82 <PID_control+0xae>
		else
			_Ki = 0;
 8001c7c:	f04f 0300 	mov.w	r3, #0
 8001c80:	60bb      	str	r3, [r7, #8]

		Total = P + I + D;
 8001c82:	4b35      	ldr	r3, [pc, #212]	; (8001d58 <PID_control+0x184>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7fe ff73 	bl	8000b74 <__addsf3>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	4619      	mov	r1, r3
 8001c92:	6a38      	ldr	r0, [r7, #32]
 8001c94:	f7fe ff6e 	bl	8000b74 <__addsf3>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	61fb      	str	r3, [r7, #28]

		////************************
		increased_speed = base_speed + ((Total > 0) ? Total : -Total);
 8001c9c:	887b      	ldrh	r3, [r7, #2]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7ff f81c 	bl	8000cdc <__aeabi_i2f>
 8001ca4:	4604      	mov	r4, r0
 8001ca6:	f04f 0100 	mov.w	r1, #0
 8001caa:	69f8      	ldr	r0, [r7, #28]
 8001cac:	f7ff fa26 	bl	80010fc <__aeabi_fcmpgt>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <PID_control+0xe6>
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	e002      	b.n	8001cc0 <PID_control+0xec>
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001cc0:	4621      	mov	r1, r4
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7fe ff56 	bl	8000b74 <__addsf3>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff fa20 	bl	8001110 <__aeabi_f2iz>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	837b      	strh	r3, [r7, #26]
		decreased_speed = base_speed - ((Total > 0) ? Total : -Total);
 8001cd4:	887b      	ldrh	r3, [r7, #2]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7ff f800 	bl	8000cdc <__aeabi_i2f>
 8001cdc:	4604      	mov	r4, r0
 8001cde:	f04f 0100 	mov.w	r1, #0
 8001ce2:	69f8      	ldr	r0, [r7, #28]
 8001ce4:	f7ff fa0a 	bl	80010fc <__aeabi_fcmpgt>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <PID_control+0x11e>
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	e002      	b.n	8001cf8 <PID_control+0x124>
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4620      	mov	r0, r4
 8001cfc:	f7fe ff38 	bl	8000b70 <__aeabi_fsub>
 8001d00:	4603      	mov	r3, r0
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7ff fa04 	bl	8001110 <__aeabi_f2iz>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	833b      	strh	r3, [r7, #24]
//			decreased_speed = 0;
//		if(decreased_speed > 900)
//			decreased_speed = 900;

		// Motor control
		if (distance_error > 0)
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	dd08      	ble.n	8001d24 <PID_control+0x150>
		{
			My_Motor_Control(decreased_speed, increased_speed);
 8001d12:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001d16:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8001d1a:	4611      	mov	r1, r2
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff fc6d 	bl	80015fc <My_Motor_Control>
		}
		else
		{
			My_Motor_Control(base_speed , base_speed);
		}
}
 8001d22:	e011      	b.n	8001d48 <PID_control+0x174>
		else if (distance_error < 0)
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	da08      	bge.n	8001d3c <PID_control+0x168>
			My_Motor_Control(increased_speed, decreased_speed);
 8001d2a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001d2e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001d32:	4611      	mov	r1, r2
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7ff fc61 	bl	80015fc <My_Motor_Control>
}
 8001d3a:	e005      	b.n	8001d48 <PID_control+0x174>
			My_Motor_Control(base_speed , base_speed);
 8001d3c:	887b      	ldrh	r3, [r7, #2]
 8001d3e:	887a      	ldrh	r2, [r7, #2]
 8001d40:	4611      	mov	r1, r2
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7ff fc5a 	bl	80015fc <My_Motor_Control>
}
 8001d48:	bf00      	nop
 8001d4a:	372c      	adds	r7, #44	; 0x2c
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd90      	pop	{r4, r7, pc}
 8001d50:	200004b0 	.word	0x200004b0
 8001d54:	40a00000 	.word	0x40a00000
 8001d58:	200004b4 	.word	0x200004b4

08001d5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d62:	f001 f841 	bl	8002de8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d66:	f000 f8ab 	bl	8001ec0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d6a:	f000 fa2d 	bl	80021c8 <MX_GPIO_Init>
  MX_I2C2_Init();
 8001d6e:	f000 f93b 	bl	8001fe8 <MX_I2C2_Init>
  MX_ADC1_Init();
 8001d72:	f000 f8fb 	bl	8001f6c <MX_ADC1_Init>
  MX_TIM4_Init();
 8001d76:	f000 f965 	bl	8002044 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8001d7a:	f000 f9fb 	bl	8002174 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_IT(&hadc1);
 8001d7e:	4844      	ldr	r0, [pc, #272]	; (8001e90 <main+0x134>)
 8001d80:	f001 f990 	bl	80030a4 <HAL_ADC_Start_IT>
//  HAL_UART_Receive_IT(&huart1,&rxData,1);

  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 8001d84:	2100      	movs	r1, #0
 8001d86:	4843      	ldr	r0, [pc, #268]	; (8001e94 <main+0x138>)
 8001d88:	f003 fa40 	bl	800520c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_2);
 8001d8c:	2104      	movs	r1, #4
 8001d8e:	4841      	ldr	r0, [pc, #260]	; (8001e94 <main+0x138>)
 8001d90:	f003 fa3c 	bl	800520c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_3);
 8001d94:	2108      	movs	r1, #8
 8001d96:	483f      	ldr	r0, [pc, #252]	; (8001e94 <main+0x138>)
 8001d98:	f003 fa38 	bl	800520c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_4);
 8001d9c:	210c      	movs	r1, #12
 8001d9e:	483d      	ldr	r0, [pc, #244]	; (8001e94 <main+0x138>)
 8001da0:	f003 fa34 	bl	800520c <HAL_TIM_PWM_Start>
  ssd1306_Init();
 8001da4:	f000 fae2 	bl	800236c <ssd1306_Init>
  my_Oled_Display(Kp , Ki , Kd , Default_speed);
 8001da8:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 8001dac:	4a3a      	ldr	r2, [pc, #232]	; (8001e98 <main+0x13c>)
 8001dae:	f04f 0100 	mov.w	r1, #0
 8001db2:	483a      	ldr	r0, [pc, #232]	; (8001e9c <main+0x140>)
 8001db4:	f7ff fe46 	bl	8001a44 <my_Oled_Display>
//   my_Oled_Display(Kp_value, Ki_value, Kd_value, Speed_value);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Transmit(&huart1, u8_TxBuff, sizeof(u8_TxBuff), 100);
 8001db8:	2364      	movs	r3, #100	; 0x64
 8001dba:	2232      	movs	r2, #50	; 0x32
 8001dbc:	4938      	ldr	r1, [pc, #224]	; (8001ea0 <main+0x144>)
 8001dbe:	4839      	ldr	r0, [pc, #228]	; (8001ea4 <main+0x148>)
 8001dc0:	f003 ffa2 	bl	8005d08 <HAL_UART_Transmit>
  while (1)
  {
	  //for bluetooth
	  		 HAL_UART_Receive_IT(&huart1, &u8_RxData, 1);
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	4938      	ldr	r1, [pc, #224]	; (8001ea8 <main+0x14c>)
 8001dc8:	4836      	ldr	r0, [pc, #216]	; (8001ea4 <main+0x148>)
 8001dca:	f004 f820 	bl	8005e0e <HAL_UART_Receive_IT>

			 if (Tx_Flag)
 8001dce:	4b37      	ldr	r3, [pc, #220]	; (8001eac <main+0x150>)
 8001dd0:	881b      	ldrh	r3, [r3, #0]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d04b      	beq.n	8001e6e <main+0x112>
			  {
				for(int i = 0; i < 50; i++) // copy data tu Rx sang Tx
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	607b      	str	r3, [r7, #4]
 8001dda:	e00b      	b.n	8001df4 <main+0x98>
			  {
				u8_TxBuff[i] = u8_RxBuff[i];
 8001ddc:	4a34      	ldr	r2, [pc, #208]	; (8001eb0 <main+0x154>)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4413      	add	r3, r2
 8001de2:	7819      	ldrb	r1, [r3, #0]
 8001de4:	4a2e      	ldr	r2, [pc, #184]	; (8001ea0 <main+0x144>)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4413      	add	r3, r2
 8001dea:	460a      	mov	r2, r1
 8001dec:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i < 50; i++) // copy data tu Rx sang Tx
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	3301      	adds	r3, #1
 8001df2:	607b      	str	r3, [r7, #4]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2b31      	cmp	r3, #49	; 0x31
 8001df8:	ddf0      	ble.n	8001ddc <main+0x80>
				}
				//UART_Handle_Condition();
				UART_Handle_Menu();
 8001dfa:	f7ff fa1f 	bl	800123c <UART_Handle_Menu>
				Tx_Flag = 0;
 8001dfe:	4b2b      	ldr	r3, [pc, #172]	; (8001eac <main+0x150>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	801a      	strh	r2, [r3, #0]
			  }

			 while (u8_start == 1) {
 8001e04:	e033      	b.n	8001e6e <main+0x112>
				 sensorRead();
 8001e06:	f7ff fe57 	bl	8001ab8 <sensorRead>
				 sum = Distance(s);
 8001e0a:	482a      	ldr	r0, [pc, #168]	; (8001eb4 <main+0x158>)
 8001e0c:	f7ff fe8a 	bl	8001b24 <Distance>
 8001e10:	4603      	mov	r3, r0
 8001e12:	461a      	mov	r2, r3
 8001e14:	4b28      	ldr	r3, [pc, #160]	; (8001eb8 <main+0x15c>)
 8001e16:	801a      	strh	r2, [r3, #0]
				 // Bluetooth tuning
				 //	PID_control(Kp_value, 0, 0, 700, sum);
				 // normal tuning.
				 PID_control(Kp, Ki, Kd, Default_speed, sum);
 8001e18:	4b27      	ldr	r3, [pc, #156]	; (8001eb8 <main+0x15c>)
 8001e1a:	881b      	ldrh	r3, [r3, #0]
 8001e1c:	9300      	str	r3, [sp, #0]
 8001e1e:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 8001e22:	4a1d      	ldr	r2, [pc, #116]	; (8001e98 <main+0x13c>)
 8001e24:	f04f 0100 	mov.w	r1, #0
 8001e28:	481c      	ldr	r0, [pc, #112]	; (8001e9c <main+0x140>)
 8001e2a:	f7ff fed3 	bl	8001bd4 <PID_control>

		  		 HAL_UART_Receive_IT(&huart1, &u8_RxData, 1);
 8001e2e:	2201      	movs	r2, #1
 8001e30:	491d      	ldr	r1, [pc, #116]	; (8001ea8 <main+0x14c>)
 8001e32:	481c      	ldr	r0, [pc, #112]	; (8001ea4 <main+0x148>)
 8001e34:	f003 ffeb 	bl	8005e0e <HAL_UART_Receive_IT>

				 if(Tx_Flag)
 8001e38:	4b1c      	ldr	r3, [pc, #112]	; (8001eac <main+0x150>)
 8001e3a:	881b      	ldrh	r3, [r3, #0]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d016      	beq.n	8001e6e <main+0x112>
				  {
					for(int i = 0; i < 50; i++) // copy data tu Rx sang Tx
 8001e40:	2300      	movs	r3, #0
 8001e42:	603b      	str	r3, [r7, #0]
 8001e44:	e00b      	b.n	8001e5e <main+0x102>
				  {
					u8_TxBuff[i] = u8_RxBuff[i];
 8001e46:	4a1a      	ldr	r2, [pc, #104]	; (8001eb0 <main+0x154>)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	7819      	ldrb	r1, [r3, #0]
 8001e4e:	4a14      	ldr	r2, [pc, #80]	; (8001ea0 <main+0x144>)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	4413      	add	r3, r2
 8001e54:	460a      	mov	r2, r1
 8001e56:	701a      	strb	r2, [r3, #0]
					for(int i = 0; i < 50; i++) // copy data tu Rx sang Tx
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	603b      	str	r3, [r7, #0]
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	2b31      	cmp	r3, #49	; 0x31
 8001e62:	ddf0      	ble.n	8001e46 <main+0xea>
					}
					//UART_Handle_Condition();
				 UART_Handle_Menu();
 8001e64:	f7ff f9ea 	bl	800123c <UART_Handle_Menu>
		  		 Tx_Flag = 0;
 8001e68:	4b10      	ldr	r3, [pc, #64]	; (8001eac <main+0x150>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	801a      	strh	r2, [r3, #0]
			 while (u8_start == 1) {
 8001e6e:	4b13      	ldr	r3, [pc, #76]	; (8001ebc <main+0x160>)
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d0c7      	beq.n	8001e06 <main+0xaa>
				  }
			 }

			 PID_control(0, 0, 0, 0, 0);
 8001e76:	2300      	movs	r3, #0
 8001e78:	9300      	str	r3, [sp, #0]
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	f04f 0200 	mov.w	r2, #0
 8001e80:	f04f 0100 	mov.w	r1, #0
 8001e84:	f04f 0000 	mov.w	r0, #0
 8001e88:	f7ff fea4 	bl	8001bd4 <PID_control>
	  		 HAL_UART_Receive_IT(&huart1, &u8_RxData, 1);
 8001e8c:	e79a      	b.n	8001dc4 <main+0x68>
 8001e8e:	bf00      	nop
 8001e90:	2000023c 	.word	0x2000023c
 8001e94:	200002c0 	.word	0x200002c0
 8001e98:	42480000 	.word	0x42480000
 8001e9c:	408a8f5c 	.word	0x408a8f5c
 8001ea0:	20000000 	.word	0x20000000
 8001ea4:	20000308 	.word	0x20000308
 8001ea8:	2000038a 	.word	0x2000038a
 8001eac:	2000038c 	.word	0x2000038c
 8001eb0:	20000358 	.word	0x20000358
 8001eb4:	200004a4 	.word	0x200004a4
 8001eb8:	200004a0 	.word	0x200004a0
 8001ebc:	2000048c 	.word	0x2000048c

08001ec0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b094      	sub	sp, #80	; 0x50
 8001ec4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ec6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001eca:	2228      	movs	r2, #40	; 0x28
 8001ecc:	2100      	movs	r1, #0
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f006 fb8b 	bl	80085ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ed4:	f107 0314 	add.w	r3, r7, #20
 8001ed8:	2200      	movs	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]
 8001edc:	605a      	str	r2, [r3, #4]
 8001ede:	609a      	str	r2, [r3, #8]
 8001ee0:	60da      	str	r2, [r3, #12]
 8001ee2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ee4:	1d3b      	adds	r3, r7, #4
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	601a      	str	r2, [r3, #0]
 8001eea:	605a      	str	r2, [r3, #4]
 8001eec:	609a      	str	r2, [r3, #8]
 8001eee:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ef8:	2310      	movs	r3, #16
 8001efa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001efc:	2302      	movs	r3, #2
 8001efe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001f00:	2300      	movs	r3, #0
 8001f02:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8001f04:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001f08:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f002 fc0e 	bl	8004730 <HAL_RCC_OscConfig>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001f1a:	f000 f9e9 	bl	80022f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f1e:	230f      	movs	r3, #15
 8001f20:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f22:	2302      	movs	r3, #2
 8001f24:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f26:	2300      	movs	r3, #0
 8001f28:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001f32:	f107 0314 	add.w	r3, r7, #20
 8001f36:	2100      	movs	r1, #0
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f002 fe7b 	bl	8004c34 <HAL_RCC_ClockConfig>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001f44:	f000 f9d4 	bl	80022f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001f48:	2302      	movs	r3, #2
 8001f4a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f50:	1d3b      	adds	r3, r7, #4
 8001f52:	4618      	mov	r0, r3
 8001f54:	f002 fffc 	bl	8004f50 <HAL_RCCEx_PeriphCLKConfig>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001f5e:	f000 f9c7 	bl	80022f0 <Error_Handler>
  }
}
 8001f62:	bf00      	nop
 8001f64:	3750      	adds	r7, #80	; 0x50
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
	...

08001f6c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001f72:	1d3b      	adds	r3, r7, #4
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]
 8001f78:	605a      	str	r2, [r3, #4]
 8001f7a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001f7c:	4b18      	ldr	r3, [pc, #96]	; (8001fe0 <MX_ADC1_Init+0x74>)
 8001f7e:	4a19      	ldr	r2, [pc, #100]	; (8001fe4 <MX_ADC1_Init+0x78>)
 8001f80:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001f82:	4b17      	ldr	r3, [pc, #92]	; (8001fe0 <MX_ADC1_Init+0x74>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001f88:	4b15      	ldr	r3, [pc, #84]	; (8001fe0 <MX_ADC1_Init+0x74>)
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001f8e:	4b14      	ldr	r3, [pc, #80]	; (8001fe0 <MX_ADC1_Init+0x74>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f94:	4b12      	ldr	r3, [pc, #72]	; (8001fe0 <MX_ADC1_Init+0x74>)
 8001f96:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001f9a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f9c:	4b10      	ldr	r3, [pc, #64]	; (8001fe0 <MX_ADC1_Init+0x74>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001fa2:	4b0f      	ldr	r3, [pc, #60]	; (8001fe0 <MX_ADC1_Init+0x74>)
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001fa8:	480d      	ldr	r0, [pc, #52]	; (8001fe0 <MX_ADC1_Init+0x74>)
 8001faa:	f000 ffa3 	bl	8002ef4 <HAL_ADC_Init>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001fb4:	f000 f99c 	bl	80022f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001fb8:	2308      	movs	r3, #8
 8001fba:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001fc0:	2307      	movs	r3, #7
 8001fc2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fc4:	1d3b      	adds	r3, r7, #4
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	4805      	ldr	r0, [pc, #20]	; (8001fe0 <MX_ADC1_Init+0x74>)
 8001fca:	f001 f9f5 	bl	80033b8 <HAL_ADC_ConfigChannel>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001fd4:	f000 f98c 	bl	80022f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001fd8:	bf00      	nop
 8001fda:	3710      	adds	r7, #16
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	2000023c 	.word	0x2000023c
 8001fe4:	40012400 	.word	0x40012400

08001fe8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001fec:	4b12      	ldr	r3, [pc, #72]	; (8002038 <MX_I2C2_Init+0x50>)
 8001fee:	4a13      	ldr	r2, [pc, #76]	; (800203c <MX_I2C2_Init+0x54>)
 8001ff0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001ff2:	4b11      	ldr	r3, [pc, #68]	; (8002038 <MX_I2C2_Init+0x50>)
 8001ff4:	4a12      	ldr	r2, [pc, #72]	; (8002040 <MX_I2C2_Init+0x58>)
 8001ff6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ff8:	4b0f      	ldr	r3, [pc, #60]	; (8002038 <MX_I2C2_Init+0x50>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001ffe:	4b0e      	ldr	r3, [pc, #56]	; (8002038 <MX_I2C2_Init+0x50>)
 8002000:	2200      	movs	r2, #0
 8002002:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002004:	4b0c      	ldr	r3, [pc, #48]	; (8002038 <MX_I2C2_Init+0x50>)
 8002006:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800200a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800200c:	4b0a      	ldr	r3, [pc, #40]	; (8002038 <MX_I2C2_Init+0x50>)
 800200e:	2200      	movs	r2, #0
 8002010:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002012:	4b09      	ldr	r3, [pc, #36]	; (8002038 <MX_I2C2_Init+0x50>)
 8002014:	2200      	movs	r2, #0
 8002016:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002018:	4b07      	ldr	r3, [pc, #28]	; (8002038 <MX_I2C2_Init+0x50>)
 800201a:	2200      	movs	r2, #0
 800201c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800201e:	4b06      	ldr	r3, [pc, #24]	; (8002038 <MX_I2C2_Init+0x50>)
 8002020:	2200      	movs	r2, #0
 8002022:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002024:	4804      	ldr	r0, [pc, #16]	; (8002038 <MX_I2C2_Init+0x50>)
 8002026:	f001 fed7 	bl	8003dd8 <HAL_I2C_Init>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002030:	f000 f95e 	bl	80022f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002034:	bf00      	nop
 8002036:	bd80      	pop	{r7, pc}
 8002038:	2000026c 	.word	0x2000026c
 800203c:	40005800 	.word	0x40005800
 8002040:	000186a0 	.word	0x000186a0

08002044 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b08e      	sub	sp, #56	; 0x38
 8002048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800204a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800204e:	2200      	movs	r2, #0
 8002050:	601a      	str	r2, [r3, #0]
 8002052:	605a      	str	r2, [r3, #4]
 8002054:	609a      	str	r2, [r3, #8]
 8002056:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002058:	f107 0320 	add.w	r3, r7, #32
 800205c:	2200      	movs	r2, #0
 800205e:	601a      	str	r2, [r3, #0]
 8002060:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002062:	1d3b      	adds	r3, r7, #4
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	605a      	str	r2, [r3, #4]
 800206a:	609a      	str	r2, [r3, #8]
 800206c:	60da      	str	r2, [r3, #12]
 800206e:	611a      	str	r2, [r3, #16]
 8002070:	615a      	str	r2, [r3, #20]
 8002072:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002074:	4b3d      	ldr	r3, [pc, #244]	; (800216c <MX_TIM4_Init+0x128>)
 8002076:	4a3e      	ldr	r2, [pc, #248]	; (8002170 <MX_TIM4_Init+0x12c>)
 8002078:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 159;
 800207a:	4b3c      	ldr	r3, [pc, #240]	; (800216c <MX_TIM4_Init+0x128>)
 800207c:	229f      	movs	r2, #159	; 0x9f
 800207e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002080:	4b3a      	ldr	r3, [pc, #232]	; (800216c <MX_TIM4_Init+0x128>)
 8002082:	2200      	movs	r2, #0
 8002084:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8002086:	4b39      	ldr	r3, [pc, #228]	; (800216c <MX_TIM4_Init+0x128>)
 8002088:	f240 32e7 	movw	r2, #999	; 0x3e7
 800208c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800208e:	4b37      	ldr	r3, [pc, #220]	; (800216c <MX_TIM4_Init+0x128>)
 8002090:	2200      	movs	r2, #0
 8002092:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002094:	4b35      	ldr	r3, [pc, #212]	; (800216c <MX_TIM4_Init+0x128>)
 8002096:	2280      	movs	r2, #128	; 0x80
 8002098:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800209a:	4834      	ldr	r0, [pc, #208]	; (800216c <MX_TIM4_Init+0x128>)
 800209c:	f003 f80e 	bl	80050bc <HAL_TIM_Base_Init>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80020a6:	f000 f923 	bl	80022f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020ae:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80020b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020b4:	4619      	mov	r1, r3
 80020b6:	482d      	ldr	r0, [pc, #180]	; (800216c <MX_TIM4_Init+0x128>)
 80020b8:	f003 fa0c 	bl	80054d4 <HAL_TIM_ConfigClockSource>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80020c2:	f000 f915 	bl	80022f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80020c6:	4829      	ldr	r0, [pc, #164]	; (800216c <MX_TIM4_Init+0x128>)
 80020c8:	f003 f847 	bl	800515a <HAL_TIM_PWM_Init>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80020d2:	f000 f90d 	bl	80022f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020d6:	2300      	movs	r3, #0
 80020d8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020da:	2300      	movs	r3, #0
 80020dc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80020de:	f107 0320 	add.w	r3, r7, #32
 80020e2:	4619      	mov	r1, r3
 80020e4:	4821      	ldr	r0, [pc, #132]	; (800216c <MX_TIM4_Init+0x128>)
 80020e6:	f003 fd61 	bl	8005bac <HAL_TIMEx_MasterConfigSynchronization>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80020f0:	f000 f8fe 	bl	80022f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020f4:	2360      	movs	r3, #96	; 0x60
 80020f6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80020f8:	2300      	movs	r3, #0
 80020fa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020fc:	2300      	movs	r3, #0
 80020fe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002100:	2300      	movs	r3, #0
 8002102:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002104:	1d3b      	adds	r3, r7, #4
 8002106:	2200      	movs	r2, #0
 8002108:	4619      	mov	r1, r3
 800210a:	4818      	ldr	r0, [pc, #96]	; (800216c <MX_TIM4_Init+0x128>)
 800210c:	f003 f920 	bl	8005350 <HAL_TIM_PWM_ConfigChannel>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8002116:	f000 f8eb 	bl	80022f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800211a:	1d3b      	adds	r3, r7, #4
 800211c:	2204      	movs	r2, #4
 800211e:	4619      	mov	r1, r3
 8002120:	4812      	ldr	r0, [pc, #72]	; (800216c <MX_TIM4_Init+0x128>)
 8002122:	f003 f915 	bl	8005350 <HAL_TIM_PWM_ConfigChannel>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d001      	beq.n	8002130 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 800212c:	f000 f8e0 	bl	80022f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002130:	1d3b      	adds	r3, r7, #4
 8002132:	2208      	movs	r2, #8
 8002134:	4619      	mov	r1, r3
 8002136:	480d      	ldr	r0, [pc, #52]	; (800216c <MX_TIM4_Init+0x128>)
 8002138:	f003 f90a 	bl	8005350 <HAL_TIM_PWM_ConfigChannel>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8002142:	f000 f8d5 	bl	80022f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002146:	1d3b      	adds	r3, r7, #4
 8002148:	220c      	movs	r2, #12
 800214a:	4619      	mov	r1, r3
 800214c:	4807      	ldr	r0, [pc, #28]	; (800216c <MX_TIM4_Init+0x128>)
 800214e:	f003 f8ff 	bl	8005350 <HAL_TIM_PWM_ConfigChannel>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8002158:	f000 f8ca 	bl	80022f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800215c:	4803      	ldr	r0, [pc, #12]	; (800216c <MX_TIM4_Init+0x128>)
 800215e:	f000 fc93 	bl	8002a88 <HAL_TIM_MspPostInit>

}
 8002162:	bf00      	nop
 8002164:	3738      	adds	r7, #56	; 0x38
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	200002c0 	.word	0x200002c0
 8002170:	40000800 	.word	0x40000800

08002174 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002178:	4b11      	ldr	r3, [pc, #68]	; (80021c0 <MX_USART1_UART_Init+0x4c>)
 800217a:	4a12      	ldr	r2, [pc, #72]	; (80021c4 <MX_USART1_UART_Init+0x50>)
 800217c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800217e:	4b10      	ldr	r3, [pc, #64]	; (80021c0 <MX_USART1_UART_Init+0x4c>)
 8002180:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002184:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002186:	4b0e      	ldr	r3, [pc, #56]	; (80021c0 <MX_USART1_UART_Init+0x4c>)
 8002188:	2200      	movs	r2, #0
 800218a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800218c:	4b0c      	ldr	r3, [pc, #48]	; (80021c0 <MX_USART1_UART_Init+0x4c>)
 800218e:	2200      	movs	r2, #0
 8002190:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002192:	4b0b      	ldr	r3, [pc, #44]	; (80021c0 <MX_USART1_UART_Init+0x4c>)
 8002194:	2200      	movs	r2, #0
 8002196:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002198:	4b09      	ldr	r3, [pc, #36]	; (80021c0 <MX_USART1_UART_Init+0x4c>)
 800219a:	220c      	movs	r2, #12
 800219c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800219e:	4b08      	ldr	r3, [pc, #32]	; (80021c0 <MX_USART1_UART_Init+0x4c>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80021a4:	4b06      	ldr	r3, [pc, #24]	; (80021c0 <MX_USART1_UART_Init+0x4c>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80021aa:	4805      	ldr	r0, [pc, #20]	; (80021c0 <MX_USART1_UART_Init+0x4c>)
 80021ac:	f003 fd5c 	bl	8005c68 <HAL_UART_Init>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80021b6:	f000 f89b 	bl	80022f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80021ba:	bf00      	nop
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	20000308 	.word	0x20000308
 80021c4:	40013800 	.word	0x40013800

080021c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b088      	sub	sp, #32
 80021cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ce:	f107 0310 	add.w	r3, r7, #16
 80021d2:	2200      	movs	r2, #0
 80021d4:	601a      	str	r2, [r3, #0]
 80021d6:	605a      	str	r2, [r3, #4]
 80021d8:	609a      	str	r2, [r3, #8]
 80021da:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021dc:	4b33      	ldr	r3, [pc, #204]	; (80022ac <MX_GPIO_Init+0xe4>)
 80021de:	699b      	ldr	r3, [r3, #24]
 80021e0:	4a32      	ldr	r2, [pc, #200]	; (80022ac <MX_GPIO_Init+0xe4>)
 80021e2:	f043 0310 	orr.w	r3, r3, #16
 80021e6:	6193      	str	r3, [r2, #24]
 80021e8:	4b30      	ldr	r3, [pc, #192]	; (80022ac <MX_GPIO_Init+0xe4>)
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	f003 0310 	and.w	r3, r3, #16
 80021f0:	60fb      	str	r3, [r7, #12]
 80021f2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80021f4:	4b2d      	ldr	r3, [pc, #180]	; (80022ac <MX_GPIO_Init+0xe4>)
 80021f6:	699b      	ldr	r3, [r3, #24]
 80021f8:	4a2c      	ldr	r2, [pc, #176]	; (80022ac <MX_GPIO_Init+0xe4>)
 80021fa:	f043 0320 	orr.w	r3, r3, #32
 80021fe:	6193      	str	r3, [r2, #24]
 8002200:	4b2a      	ldr	r3, [pc, #168]	; (80022ac <MX_GPIO_Init+0xe4>)
 8002202:	699b      	ldr	r3, [r3, #24]
 8002204:	f003 0320 	and.w	r3, r3, #32
 8002208:	60bb      	str	r3, [r7, #8]
 800220a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800220c:	4b27      	ldr	r3, [pc, #156]	; (80022ac <MX_GPIO_Init+0xe4>)
 800220e:	699b      	ldr	r3, [r3, #24]
 8002210:	4a26      	ldr	r2, [pc, #152]	; (80022ac <MX_GPIO_Init+0xe4>)
 8002212:	f043 0304 	orr.w	r3, r3, #4
 8002216:	6193      	str	r3, [r2, #24]
 8002218:	4b24      	ldr	r3, [pc, #144]	; (80022ac <MX_GPIO_Init+0xe4>)
 800221a:	699b      	ldr	r3, [r3, #24]
 800221c:	f003 0304 	and.w	r3, r3, #4
 8002220:	607b      	str	r3, [r7, #4]
 8002222:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002224:	4b21      	ldr	r3, [pc, #132]	; (80022ac <MX_GPIO_Init+0xe4>)
 8002226:	699b      	ldr	r3, [r3, #24]
 8002228:	4a20      	ldr	r2, [pc, #128]	; (80022ac <MX_GPIO_Init+0xe4>)
 800222a:	f043 0308 	orr.w	r3, r3, #8
 800222e:	6193      	str	r3, [r2, #24]
 8002230:	4b1e      	ldr	r3, [pc, #120]	; (80022ac <MX_GPIO_Init+0xe4>)
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	f003 0308 	and.w	r3, r3, #8
 8002238:	603b      	str	r3, [r7, #0]
 800223a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800223c:	2200      	movs	r2, #0
 800223e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002242:	481b      	ldr	r0, [pc, #108]	; (80022b0 <MX_GPIO_Init+0xe8>)
 8002244:	f001 fdaf 	bl	8003da6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8002248:	2200      	movs	r2, #0
 800224a:	2102      	movs	r1, #2
 800224c:	4819      	ldr	r0, [pc, #100]	; (80022b4 <MX_GPIO_Init+0xec>)
 800224e:	f001 fdaa 	bl	8003da6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002252:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002256:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002258:	2301      	movs	r3, #1
 800225a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225c:	2300      	movs	r3, #0
 800225e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002260:	2302      	movs	r3, #2
 8002262:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002264:	f107 0310 	add.w	r3, r7, #16
 8002268:	4619      	mov	r1, r3
 800226a:	4811      	ldr	r0, [pc, #68]	; (80022b0 <MX_GPIO_Init+0xe8>)
 800226c:	f001 fc00 	bl	8003a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002270:	23bf      	movs	r3, #191	; 0xbf
 8002272:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002274:	2300      	movs	r3, #0
 8002276:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002278:	2300      	movs	r3, #0
 800227a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800227c:	f107 0310 	add.w	r3, r7, #16
 8002280:	4619      	mov	r1, r3
 8002282:	480d      	ldr	r0, [pc, #52]	; (80022b8 <MX_GPIO_Init+0xf0>)
 8002284:	f001 fbf4 	bl	8003a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002288:	2302      	movs	r3, #2
 800228a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800228c:	2301      	movs	r3, #1
 800228e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002290:	2300      	movs	r3, #0
 8002292:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002294:	2302      	movs	r3, #2
 8002296:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002298:	f107 0310 	add.w	r3, r7, #16
 800229c:	4619      	mov	r1, r3
 800229e:	4805      	ldr	r0, [pc, #20]	; (80022b4 <MX_GPIO_Init+0xec>)
 80022a0:	f001 fbe6 	bl	8003a70 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80022a4:	bf00      	nop
 80022a6:	3720      	adds	r7, #32
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	40021000 	.word	0x40021000
 80022b0:	40011000 	.word	0x40011000
 80022b4:	40010c00 	.word	0x40010c00
 80022b8:	40010800 	.word	0x40010800

080022bc <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
//ADC Interrupt
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
	  if(hadc->Instance == hadc1.Instance)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	4b07      	ldr	r3, [pc, #28]	; (80022e8 <HAL_ADC_ConvCpltCallback+0x2c>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d106      	bne.n	80022de <HAL_ADC_ConvCpltCallback+0x22>
	  {
		  ADC_Data =  HAL_ADC_GetValue(&hadc1);
 80022d0:	4805      	ldr	r0, [pc, #20]	; (80022e8 <HAL_ADC_ConvCpltCallback+0x2c>)
 80022d2:	f000 ff9d 	bl	8003210 <HAL_ADC_GetValue>
 80022d6:	4603      	mov	r3, r0
 80022d8:	b29a      	uxth	r2, r3
 80022da:	4b04      	ldr	r3, [pc, #16]	; (80022ec <HAL_ADC_ConvCpltCallback+0x30>)
 80022dc:	801a      	strh	r2, [r3, #0]

	  }
}
 80022de:	bf00      	nop
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	2000023c 	.word	0x2000023c
 80022ec:	20000354 	.word	0x20000354

080022f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022f4:	b672      	cpsid	i
}
 80022f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022f8:	e7fe      	b.n	80022f8 <Error_Handler+0x8>

080022fa <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80022fa:	b480      	push	{r7}
 80022fc:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80022fe:	bf00      	nop
 8002300:	46bd      	mov	sp, r7
 8002302:	bc80      	pop	{r7}
 8002304:	4770      	bx	lr
	...

08002308 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002308:	b580      	push	{r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af04      	add	r7, sp, #16
 800230e:	4603      	mov	r3, r0
 8002310:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002312:	f04f 33ff 	mov.w	r3, #4294967295
 8002316:	9302      	str	r3, [sp, #8]
 8002318:	2301      	movs	r3, #1
 800231a:	9301      	str	r3, [sp, #4]
 800231c:	1dfb      	adds	r3, r7, #7
 800231e:	9300      	str	r3, [sp, #0]
 8002320:	2301      	movs	r3, #1
 8002322:	2200      	movs	r2, #0
 8002324:	2178      	movs	r1, #120	; 0x78
 8002326:	4803      	ldr	r0, [pc, #12]	; (8002334 <ssd1306_WriteCommand+0x2c>)
 8002328:	f001 fe9a 	bl	8004060 <HAL_I2C_Mem_Write>
}
 800232c:	bf00      	nop
 800232e:	3708      	adds	r7, #8
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	2000026c 	.word	0x2000026c

08002338 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af04      	add	r7, sp, #16
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	b29b      	uxth	r3, r3
 8002346:	f04f 32ff 	mov.w	r2, #4294967295
 800234a:	9202      	str	r2, [sp, #8]
 800234c:	9301      	str	r3, [sp, #4]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	9300      	str	r3, [sp, #0]
 8002352:	2301      	movs	r3, #1
 8002354:	2240      	movs	r2, #64	; 0x40
 8002356:	2178      	movs	r1, #120	; 0x78
 8002358:	4803      	ldr	r0, [pc, #12]	; (8002368 <ssd1306_WriteData+0x30>)
 800235a:	f001 fe81 	bl	8004060 <HAL_I2C_Mem_Write>
}
 800235e:	bf00      	nop
 8002360:	3708      	adds	r7, #8
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	2000026c 	.word	0x2000026c

0800236c <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8002370:	f7ff ffc3 	bl	80022fa <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(5);
 8002374:	2005      	movs	r0, #5
 8002376:	f000 fd99 	bl	8002eac <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800237a:	2000      	movs	r0, #0
 800237c:	f000 fa92 	bl	80028a4 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8002380:	2020      	movs	r0, #32
 8002382:	f7ff ffc1 	bl	8002308 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8002386:	2000      	movs	r0, #0
 8002388:	f7ff ffbe 	bl	8002308 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800238c:	20b0      	movs	r0, #176	; 0xb0
 800238e:	f7ff ffbb 	bl	8002308 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8002392:	20c8      	movs	r0, #200	; 0xc8
 8002394:	f7ff ffb8 	bl	8002308 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8002398:	2000      	movs	r0, #0
 800239a:	f7ff ffb5 	bl	8002308 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800239e:	2010      	movs	r0, #16
 80023a0:	f7ff ffb2 	bl	8002308 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80023a4:	2040      	movs	r0, #64	; 0x40
 80023a6:	f7ff ffaf 	bl	8002308 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80023aa:	20ff      	movs	r0, #255	; 0xff
 80023ac:	f000 fa67 	bl	800287e <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80023b0:	20a1      	movs	r0, #161	; 0xa1
 80023b2:	f7ff ffa9 	bl	8002308 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80023b6:	20a6      	movs	r0, #166	; 0xa6
 80023b8:	f7ff ffa6 	bl	8002308 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80023bc:	20a8      	movs	r0, #168	; 0xa8
 80023be:	f7ff ffa3 	bl	8002308 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80023c2:	203f      	movs	r0, #63	; 0x3f
 80023c4:	f7ff ffa0 	bl	8002308 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80023c8:	20a4      	movs	r0, #164	; 0xa4
 80023ca:	f7ff ff9d 	bl	8002308 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80023ce:	20d3      	movs	r0, #211	; 0xd3
 80023d0:	f7ff ff9a 	bl	8002308 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80023d4:	2000      	movs	r0, #0
 80023d6:	f7ff ff97 	bl	8002308 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80023da:	20d5      	movs	r0, #213	; 0xd5
 80023dc:	f7ff ff94 	bl	8002308 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80023e0:	20f0      	movs	r0, #240	; 0xf0
 80023e2:	f7ff ff91 	bl	8002308 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80023e6:	20d9      	movs	r0, #217	; 0xd9
 80023e8:	f7ff ff8e 	bl	8002308 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80023ec:	2022      	movs	r0, #34	; 0x22
 80023ee:	f7ff ff8b 	bl	8002308 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80023f2:	20da      	movs	r0, #218	; 0xda
 80023f4:	f7ff ff88 	bl	8002308 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80023f8:	2012      	movs	r0, #18
 80023fa:	f7ff ff85 	bl	8002308 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80023fe:	20db      	movs	r0, #219	; 0xdb
 8002400:	f7ff ff82 	bl	8002308 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002404:	2020      	movs	r0, #32
 8002406:	f7ff ff7f 	bl	8002308 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800240a:	208d      	movs	r0, #141	; 0x8d
 800240c:	f7ff ff7c 	bl	8002308 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8002410:	2014      	movs	r0, #20
 8002412:	f7ff ff79 	bl	8002308 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8002416:	2001      	movs	r0, #1
 8002418:	f000 fa44 	bl	80028a4 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 800241c:	2000      	movs	r0, #0
 800241e:	f000 f80f 	bl	8002440 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8002422:	f000 f825 	bl	8002470 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002426:	4b05      	ldr	r3, [pc, #20]	; (800243c <ssd1306_Init+0xd0>)
 8002428:	2200      	movs	r2, #0
 800242a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800242c:	4b03      	ldr	r3, [pc, #12]	; (800243c <ssd1306_Init+0xd0>)
 800242e:	2200      	movs	r2, #0
 8002430:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8002432:	4b02      	ldr	r3, [pc, #8]	; (800243c <ssd1306_Init+0xd0>)
 8002434:	2201      	movs	r2, #1
 8002436:	711a      	strb	r2, [r3, #4]
}
 8002438:	bf00      	nop
 800243a:	bd80      	pop	{r7, pc}
 800243c:	200008b8 	.word	0x200008b8

08002440 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	4603      	mov	r3, r0
 8002448:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800244a:	79fb      	ldrb	r3, [r7, #7]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d101      	bne.n	8002454 <ssd1306_Fill+0x14>
 8002450:	2300      	movs	r3, #0
 8002452:	e000      	b.n	8002456 <ssd1306_Fill+0x16>
 8002454:	23ff      	movs	r3, #255	; 0xff
 8002456:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800245a:	4619      	mov	r1, r3
 800245c:	4803      	ldr	r0, [pc, #12]	; (800246c <ssd1306_Fill+0x2c>)
 800245e:	f006 f8c4 	bl	80085ea <memset>
}
 8002462:	bf00      	nop
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	200004b8 	.word	0x200004b8

08002470 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002476:	2300      	movs	r3, #0
 8002478:	71fb      	strb	r3, [r7, #7]
 800247a:	e016      	b.n	80024aa <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800247c:	79fb      	ldrb	r3, [r7, #7]
 800247e:	3b50      	subs	r3, #80	; 0x50
 8002480:	b2db      	uxtb	r3, r3
 8002482:	4618      	mov	r0, r3
 8002484:	f7ff ff40 	bl	8002308 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8002488:	2000      	movs	r0, #0
 800248a:	f7ff ff3d 	bl	8002308 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800248e:	2010      	movs	r0, #16
 8002490:	f7ff ff3a 	bl	8002308 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002494:	79fb      	ldrb	r3, [r7, #7]
 8002496:	01db      	lsls	r3, r3, #7
 8002498:	4a08      	ldr	r2, [pc, #32]	; (80024bc <ssd1306_UpdateScreen+0x4c>)
 800249a:	4413      	add	r3, r2
 800249c:	2180      	movs	r1, #128	; 0x80
 800249e:	4618      	mov	r0, r3
 80024a0:	f7ff ff4a 	bl	8002338 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80024a4:	79fb      	ldrb	r3, [r7, #7]
 80024a6:	3301      	adds	r3, #1
 80024a8:	71fb      	strb	r3, [r7, #7]
 80024aa:	79fb      	ldrb	r3, [r7, #7]
 80024ac:	2b07      	cmp	r3, #7
 80024ae:	d9e5      	bls.n	800247c <ssd1306_UpdateScreen+0xc>
    }
}
 80024b0:	bf00      	nop
 80024b2:	bf00      	nop
 80024b4:	3708      	adds	r7, #8
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	200004b8 	.word	0x200004b8

080024c0 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	4603      	mov	r3, r0
 80024c8:	71fb      	strb	r3, [r7, #7]
 80024ca:	460b      	mov	r3, r1
 80024cc:	71bb      	strb	r3, [r7, #6]
 80024ce:	4613      	mov	r3, r2
 80024d0:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80024d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	db3d      	blt.n	8002556 <ssd1306_DrawPixel+0x96>
 80024da:	79bb      	ldrb	r3, [r7, #6]
 80024dc:	2b3f      	cmp	r3, #63	; 0x3f
 80024de:	d83a      	bhi.n	8002556 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80024e0:	797b      	ldrb	r3, [r7, #5]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d11a      	bne.n	800251c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80024e6:	79fa      	ldrb	r2, [r7, #7]
 80024e8:	79bb      	ldrb	r3, [r7, #6]
 80024ea:	08db      	lsrs	r3, r3, #3
 80024ec:	b2d8      	uxtb	r0, r3
 80024ee:	4603      	mov	r3, r0
 80024f0:	01db      	lsls	r3, r3, #7
 80024f2:	4413      	add	r3, r2
 80024f4:	4a1a      	ldr	r2, [pc, #104]	; (8002560 <ssd1306_DrawPixel+0xa0>)
 80024f6:	5cd3      	ldrb	r3, [r2, r3]
 80024f8:	b25a      	sxtb	r2, r3
 80024fa:	79bb      	ldrb	r3, [r7, #6]
 80024fc:	f003 0307 	and.w	r3, r3, #7
 8002500:	2101      	movs	r1, #1
 8002502:	fa01 f303 	lsl.w	r3, r1, r3
 8002506:	b25b      	sxtb	r3, r3
 8002508:	4313      	orrs	r3, r2
 800250a:	b259      	sxtb	r1, r3
 800250c:	79fa      	ldrb	r2, [r7, #7]
 800250e:	4603      	mov	r3, r0
 8002510:	01db      	lsls	r3, r3, #7
 8002512:	4413      	add	r3, r2
 8002514:	b2c9      	uxtb	r1, r1
 8002516:	4a12      	ldr	r2, [pc, #72]	; (8002560 <ssd1306_DrawPixel+0xa0>)
 8002518:	54d1      	strb	r1, [r2, r3]
 800251a:	e01d      	b.n	8002558 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800251c:	79fa      	ldrb	r2, [r7, #7]
 800251e:	79bb      	ldrb	r3, [r7, #6]
 8002520:	08db      	lsrs	r3, r3, #3
 8002522:	b2d8      	uxtb	r0, r3
 8002524:	4603      	mov	r3, r0
 8002526:	01db      	lsls	r3, r3, #7
 8002528:	4413      	add	r3, r2
 800252a:	4a0d      	ldr	r2, [pc, #52]	; (8002560 <ssd1306_DrawPixel+0xa0>)
 800252c:	5cd3      	ldrb	r3, [r2, r3]
 800252e:	b25a      	sxtb	r2, r3
 8002530:	79bb      	ldrb	r3, [r7, #6]
 8002532:	f003 0307 	and.w	r3, r3, #7
 8002536:	2101      	movs	r1, #1
 8002538:	fa01 f303 	lsl.w	r3, r1, r3
 800253c:	b25b      	sxtb	r3, r3
 800253e:	43db      	mvns	r3, r3
 8002540:	b25b      	sxtb	r3, r3
 8002542:	4013      	ands	r3, r2
 8002544:	b259      	sxtb	r1, r3
 8002546:	79fa      	ldrb	r2, [r7, #7]
 8002548:	4603      	mov	r3, r0
 800254a:	01db      	lsls	r3, r3, #7
 800254c:	4413      	add	r3, r2
 800254e:	b2c9      	uxtb	r1, r1
 8002550:	4a03      	ldr	r2, [pc, #12]	; (8002560 <ssd1306_DrawPixel+0xa0>)
 8002552:	54d1      	strb	r1, [r2, r3]
 8002554:	e000      	b.n	8002558 <ssd1306_DrawPixel+0x98>
        return;
 8002556:	bf00      	nop
    }
}
 8002558:	370c      	adds	r7, #12
 800255a:	46bd      	mov	sp, r7
 800255c:	bc80      	pop	{r7}
 800255e:	4770      	bx	lr
 8002560:	200004b8 	.word	0x200004b8

08002564 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8002564:	b590      	push	{r4, r7, lr}
 8002566:	b089      	sub	sp, #36	; 0x24
 8002568:	af00      	add	r7, sp, #0
 800256a:	4604      	mov	r4, r0
 800256c:	1d38      	adds	r0, r7, #4
 800256e:	e880 0006 	stmia.w	r0, {r1, r2}
 8002572:	461a      	mov	r2, r3
 8002574:	4623      	mov	r3, r4
 8002576:	73fb      	strb	r3, [r7, #15]
 8002578:	4613      	mov	r3, r2
 800257a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800257c:	7bfb      	ldrb	r3, [r7, #15]
 800257e:	2b1f      	cmp	r3, #31
 8002580:	d902      	bls.n	8002588 <ssd1306_WriteChar+0x24>
 8002582:	7bfb      	ldrb	r3, [r7, #15]
 8002584:	2b7e      	cmp	r3, #126	; 0x7e
 8002586:	d901      	bls.n	800258c <ssd1306_WriteChar+0x28>
        return 0;
 8002588:	2300      	movs	r3, #0
 800258a:	e06d      	b.n	8002668 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800258c:	4b38      	ldr	r3, [pc, #224]	; (8002670 <ssd1306_WriteChar+0x10c>)
 800258e:	881b      	ldrh	r3, [r3, #0]
 8002590:	461a      	mov	r2, r3
 8002592:	793b      	ldrb	r3, [r7, #4]
 8002594:	4413      	add	r3, r2
 8002596:	2b80      	cmp	r3, #128	; 0x80
 8002598:	dc06      	bgt.n	80025a8 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 800259a:	4b35      	ldr	r3, [pc, #212]	; (8002670 <ssd1306_WriteChar+0x10c>)
 800259c:	885b      	ldrh	r3, [r3, #2]
 800259e:	461a      	mov	r2, r3
 80025a0:	797b      	ldrb	r3, [r7, #5]
 80025a2:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80025a4:	2b40      	cmp	r3, #64	; 0x40
 80025a6:	dd01      	ble.n	80025ac <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80025a8:	2300      	movs	r3, #0
 80025aa:	e05d      	b.n	8002668 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80025ac:	2300      	movs	r3, #0
 80025ae:	61fb      	str	r3, [r7, #28]
 80025b0:	e04c      	b.n	800264c <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80025b2:	68ba      	ldr	r2, [r7, #8]
 80025b4:	7bfb      	ldrb	r3, [r7, #15]
 80025b6:	3b20      	subs	r3, #32
 80025b8:	7979      	ldrb	r1, [r7, #5]
 80025ba:	fb01 f303 	mul.w	r3, r1, r3
 80025be:	4619      	mov	r1, r3
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	440b      	add	r3, r1
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	4413      	add	r3, r2
 80025c8:	881b      	ldrh	r3, [r3, #0]
 80025ca:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80025cc:	2300      	movs	r3, #0
 80025ce:	61bb      	str	r3, [r7, #24]
 80025d0:	e034      	b.n	800263c <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80025d2:	697a      	ldr	r2, [r7, #20]
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	fa02 f303 	lsl.w	r3, r2, r3
 80025da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d012      	beq.n	8002608 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80025e2:	4b23      	ldr	r3, [pc, #140]	; (8002670 <ssd1306_WriteChar+0x10c>)
 80025e4:	881b      	ldrh	r3, [r3, #0]
 80025e6:	b2da      	uxtb	r2, r3
 80025e8:	69bb      	ldr	r3, [r7, #24]
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	4413      	add	r3, r2
 80025ee:	b2d8      	uxtb	r0, r3
 80025f0:	4b1f      	ldr	r3, [pc, #124]	; (8002670 <ssd1306_WriteChar+0x10c>)
 80025f2:	885b      	ldrh	r3, [r3, #2]
 80025f4:	b2da      	uxtb	r2, r3
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	4413      	add	r3, r2
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	7bba      	ldrb	r2, [r7, #14]
 8002600:	4619      	mov	r1, r3
 8002602:	f7ff ff5d 	bl	80024c0 <ssd1306_DrawPixel>
 8002606:	e016      	b.n	8002636 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002608:	4b19      	ldr	r3, [pc, #100]	; (8002670 <ssd1306_WriteChar+0x10c>)
 800260a:	881b      	ldrh	r3, [r3, #0]
 800260c:	b2da      	uxtb	r2, r3
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	b2db      	uxtb	r3, r3
 8002612:	4413      	add	r3, r2
 8002614:	b2d8      	uxtb	r0, r3
 8002616:	4b16      	ldr	r3, [pc, #88]	; (8002670 <ssd1306_WriteChar+0x10c>)
 8002618:	885b      	ldrh	r3, [r3, #2]
 800261a:	b2da      	uxtb	r2, r3
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	b2db      	uxtb	r3, r3
 8002620:	4413      	add	r3, r2
 8002622:	b2d9      	uxtb	r1, r3
 8002624:	7bbb      	ldrb	r3, [r7, #14]
 8002626:	2b00      	cmp	r3, #0
 8002628:	bf0c      	ite	eq
 800262a:	2301      	moveq	r3, #1
 800262c:	2300      	movne	r3, #0
 800262e:	b2db      	uxtb	r3, r3
 8002630:	461a      	mov	r2, r3
 8002632:	f7ff ff45 	bl	80024c0 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	3301      	adds	r3, #1
 800263a:	61bb      	str	r3, [r7, #24]
 800263c:	793b      	ldrb	r3, [r7, #4]
 800263e:	461a      	mov	r2, r3
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	4293      	cmp	r3, r2
 8002644:	d3c5      	bcc.n	80025d2 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	3301      	adds	r3, #1
 800264a:	61fb      	str	r3, [r7, #28]
 800264c:	797b      	ldrb	r3, [r7, #5]
 800264e:	461a      	mov	r2, r3
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	4293      	cmp	r3, r2
 8002654:	d3ad      	bcc.n	80025b2 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8002656:	4b06      	ldr	r3, [pc, #24]	; (8002670 <ssd1306_WriteChar+0x10c>)
 8002658:	881a      	ldrh	r2, [r3, #0]
 800265a:	793b      	ldrb	r3, [r7, #4]
 800265c:	b29b      	uxth	r3, r3
 800265e:	4413      	add	r3, r2
 8002660:	b29a      	uxth	r2, r3
 8002662:	4b03      	ldr	r3, [pc, #12]	; (8002670 <ssd1306_WriteChar+0x10c>)
 8002664:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8002666:	7bfb      	ldrb	r3, [r7, #15]
}
 8002668:	4618      	mov	r0, r3
 800266a:	3724      	adds	r7, #36	; 0x24
 800266c:	46bd      	mov	sp, r7
 800266e:	bd90      	pop	{r4, r7, pc}
 8002670:	200008b8 	.word	0x200008b8

08002674 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	1d38      	adds	r0, r7, #4
 800267e:	e880 0006 	stmia.w	r0, {r1, r2}
 8002682:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8002684:	e012      	b.n	80026ac <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	7818      	ldrb	r0, [r3, #0]
 800268a:	78fb      	ldrb	r3, [r7, #3]
 800268c:	1d3a      	adds	r2, r7, #4
 800268e:	ca06      	ldmia	r2, {r1, r2}
 8002690:	f7ff ff68 	bl	8002564 <ssd1306_WriteChar>
 8002694:	4603      	mov	r3, r0
 8002696:	461a      	mov	r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	429a      	cmp	r2, r3
 800269e:	d002      	beq.n	80026a6 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	e008      	b.n	80026b8 <ssd1306_WriteString+0x44>
        }
        str++;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	3301      	adds	r3, #1
 80026aa:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d1e8      	bne.n	8002686 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	781b      	ldrb	r3, [r3, #0]
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3710      	adds	r7, #16
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	4603      	mov	r3, r0
 80026c8:	460a      	mov	r2, r1
 80026ca:	71fb      	strb	r3, [r7, #7]
 80026cc:	4613      	mov	r3, r2
 80026ce:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80026d0:	79fb      	ldrb	r3, [r7, #7]
 80026d2:	b29a      	uxth	r2, r3
 80026d4:	4b05      	ldr	r3, [pc, #20]	; (80026ec <ssd1306_SetCursor+0x2c>)
 80026d6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80026d8:	79bb      	ldrb	r3, [r7, #6]
 80026da:	b29a      	uxth	r2, r3
 80026dc:	4b03      	ldr	r3, [pc, #12]	; (80026ec <ssd1306_SetCursor+0x2c>)
 80026de:	805a      	strh	r2, [r3, #2]
}
 80026e0:	bf00      	nop
 80026e2:	370c      	adds	r7, #12
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bc80      	pop	{r7}
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	200008b8 	.word	0x200008b8

080026f0 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80026f0:	b590      	push	{r4, r7, lr}
 80026f2:	b089      	sub	sp, #36	; 0x24
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	4604      	mov	r4, r0
 80026f8:	4608      	mov	r0, r1
 80026fa:	4611      	mov	r1, r2
 80026fc:	461a      	mov	r2, r3
 80026fe:	4623      	mov	r3, r4
 8002700:	71fb      	strb	r3, [r7, #7]
 8002702:	4603      	mov	r3, r0
 8002704:	71bb      	strb	r3, [r7, #6]
 8002706:	460b      	mov	r3, r1
 8002708:	717b      	strb	r3, [r7, #5]
 800270a:	4613      	mov	r3, r2
 800270c:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 800270e:	797a      	ldrb	r2, [r7, #5]
 8002710:	79fb      	ldrb	r3, [r7, #7]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	2b00      	cmp	r3, #0
 8002716:	bfb8      	it	lt
 8002718:	425b      	neglt	r3, r3
 800271a:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 800271c:	793a      	ldrb	r2, [r7, #4]
 800271e:	79bb      	ldrb	r3, [r7, #6]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b00      	cmp	r3, #0
 8002724:	bfb8      	it	lt
 8002726:	425b      	neglt	r3, r3
 8002728:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 800272a:	79fa      	ldrb	r2, [r7, #7]
 800272c:	797b      	ldrb	r3, [r7, #5]
 800272e:	429a      	cmp	r2, r3
 8002730:	d201      	bcs.n	8002736 <ssd1306_Line+0x46>
 8002732:	2301      	movs	r3, #1
 8002734:	e001      	b.n	800273a <ssd1306_Line+0x4a>
 8002736:	f04f 33ff 	mov.w	r3, #4294967295
 800273a:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 800273c:	79ba      	ldrb	r2, [r7, #6]
 800273e:	793b      	ldrb	r3, [r7, #4]
 8002740:	429a      	cmp	r2, r3
 8002742:	d201      	bcs.n	8002748 <ssd1306_Line+0x58>
 8002744:	2301      	movs	r3, #1
 8002746:	e001      	b.n	800274c <ssd1306_Line+0x5c>
 8002748:	f04f 33ff 	mov.w	r3, #4294967295
 800274c:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 800274e:	69ba      	ldr	r2, [r7, #24]
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 8002756:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800275a:	7939      	ldrb	r1, [r7, #4]
 800275c:	797b      	ldrb	r3, [r7, #5]
 800275e:	4618      	mov	r0, r3
 8002760:	f7ff feae 	bl	80024c0 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 8002764:	e024      	b.n	80027b0 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 8002766:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800276a:	79b9      	ldrb	r1, [r7, #6]
 800276c:	79fb      	ldrb	r3, [r7, #7]
 800276e:	4618      	mov	r0, r3
 8002770:	f7ff fea6 	bl	80024c0 <ssd1306_DrawPixel>
        error2 = error * 2;
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	005b      	lsls	r3, r3, #1
 8002778:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	425b      	negs	r3, r3
 800277e:	68ba      	ldr	r2, [r7, #8]
 8002780:	429a      	cmp	r2, r3
 8002782:	dd08      	ble.n	8002796 <ssd1306_Line+0xa6>
            error -= deltaY;
 8002784:	69fa      	ldr	r2, [r7, #28]
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	b2da      	uxtb	r2, r3
 8002790:	79fb      	ldrb	r3, [r7, #7]
 8002792:	4413      	add	r3, r2
 8002794:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 8002796:	68ba      	ldr	r2, [r7, #8]
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	429a      	cmp	r2, r3
 800279c:	da08      	bge.n	80027b0 <ssd1306_Line+0xc0>
            error += deltaX;
 800279e:	69fa      	ldr	r2, [r7, #28]
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	4413      	add	r3, r2
 80027a4:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	b2da      	uxtb	r2, r3
 80027aa:	79bb      	ldrb	r3, [r7, #6]
 80027ac:	4413      	add	r3, r2
 80027ae:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 80027b0:	79fa      	ldrb	r2, [r7, #7]
 80027b2:	797b      	ldrb	r3, [r7, #5]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d1d6      	bne.n	8002766 <ssd1306_Line+0x76>
 80027b8:	79ba      	ldrb	r2, [r7, #6]
 80027ba:	793b      	ldrb	r3, [r7, #4]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d1d2      	bne.n	8002766 <ssd1306_Line+0x76>
        }
    }
    return;
 80027c0:	bf00      	nop
}
 80027c2:	3724      	adds	r7, #36	; 0x24
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd90      	pop	{r4, r7, pc}

080027c8 <ssd1306_DrawBitmap>:
    }
    return;
}

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	603a      	str	r2, [r7, #0]
 80027d0:	461a      	mov	r2, r3
 80027d2:	4603      	mov	r3, r0
 80027d4:	71fb      	strb	r3, [r7, #7]
 80027d6:	460b      	mov	r3, r1
 80027d8:	71bb      	strb	r3, [r7, #6]
 80027da:	4613      	mov	r3, r2
 80027dc:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 80027de:	797b      	ldrb	r3, [r7, #5]
 80027e0:	3307      	adds	r3, #7
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	da00      	bge.n	80027e8 <ssd1306_DrawBitmap+0x20>
 80027e6:	3307      	adds	r3, #7
 80027e8:	10db      	asrs	r3, r3, #3
 80027ea:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 80027ec:	2300      	movs	r3, #0
 80027ee:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80027f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	db3e      	blt.n	8002876 <ssd1306_DrawBitmap+0xae>
 80027f8:	79bb      	ldrb	r3, [r7, #6]
 80027fa:	2b3f      	cmp	r3, #63	; 0x3f
 80027fc:	d83b      	bhi.n	8002876 <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 80027fe:	2300      	movs	r3, #0
 8002800:	73bb      	strb	r3, [r7, #14]
 8002802:	e033      	b.n	800286c <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 8002804:	2300      	movs	r3, #0
 8002806:	737b      	strb	r3, [r7, #13]
 8002808:	e026      	b.n	8002858 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 800280a:	7b7b      	ldrb	r3, [r7, #13]
 800280c:	f003 0307 	and.w	r3, r3, #7
 8002810:	2b00      	cmp	r3, #0
 8002812:	d003      	beq.n	800281c <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 8002814:	7bfb      	ldrb	r3, [r7, #15]
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	73fb      	strb	r3, [r7, #15]
 800281a:	e00d      	b.n	8002838 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 800281c:	7bbb      	ldrb	r3, [r7, #14]
 800281e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002822:	fb02 f303 	mul.w	r3, r2, r3
 8002826:	7b7a      	ldrb	r2, [r7, #13]
 8002828:	08d2      	lsrs	r2, r2, #3
 800282a:	b2d2      	uxtb	r2, r2
 800282c:	4413      	add	r3, r2
 800282e:	461a      	mov	r2, r3
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	4413      	add	r3, r2
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 8002838:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800283c:	2b00      	cmp	r3, #0
 800283e:	da08      	bge.n	8002852 <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 8002840:	79fa      	ldrb	r2, [r7, #7]
 8002842:	7b7b      	ldrb	r3, [r7, #13]
 8002844:	4413      	add	r3, r2
 8002846:	b2db      	uxtb	r3, r3
 8002848:	7f3a      	ldrb	r2, [r7, #28]
 800284a:	79b9      	ldrb	r1, [r7, #6]
 800284c:	4618      	mov	r0, r3
 800284e:	f7ff fe37 	bl	80024c0 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 8002852:	7b7b      	ldrb	r3, [r7, #13]
 8002854:	3301      	adds	r3, #1
 8002856:	737b      	strb	r3, [r7, #13]
 8002858:	7b7a      	ldrb	r2, [r7, #13]
 800285a:	797b      	ldrb	r3, [r7, #5]
 800285c:	429a      	cmp	r2, r3
 800285e:	d3d4      	bcc.n	800280a <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 8002860:	7bbb      	ldrb	r3, [r7, #14]
 8002862:	3301      	adds	r3, #1
 8002864:	73bb      	strb	r3, [r7, #14]
 8002866:	79bb      	ldrb	r3, [r7, #6]
 8002868:	3301      	adds	r3, #1
 800286a:	71bb      	strb	r3, [r7, #6]
 800286c:	7bba      	ldrb	r2, [r7, #14]
 800286e:	7e3b      	ldrb	r3, [r7, #24]
 8002870:	429a      	cmp	r2, r3
 8002872:	d3c7      	bcc.n	8002804 <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 8002874:	e000      	b.n	8002878 <ssd1306_DrawBitmap+0xb0>
        return;
 8002876:	bf00      	nop
}
 8002878:	3710      	adds	r7, #16
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}

0800287e <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 800287e:	b580      	push	{r7, lr}
 8002880:	b084      	sub	sp, #16
 8002882:	af00      	add	r7, sp, #0
 8002884:	4603      	mov	r3, r0
 8002886:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8002888:	2381      	movs	r3, #129	; 0x81
 800288a:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800288c:	7bfb      	ldrb	r3, [r7, #15]
 800288e:	4618      	mov	r0, r3
 8002890:	f7ff fd3a 	bl	8002308 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8002894:	79fb      	ldrb	r3, [r7, #7]
 8002896:	4618      	mov	r0, r3
 8002898:	f7ff fd36 	bl	8002308 <ssd1306_WriteCommand>
}
 800289c:	bf00      	nop
 800289e:	3710      	adds	r7, #16
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	4603      	mov	r3, r0
 80028ac:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80028ae:	79fb      	ldrb	r3, [r7, #7]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d005      	beq.n	80028c0 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80028b4:	23af      	movs	r3, #175	; 0xaf
 80028b6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80028b8:	4b08      	ldr	r3, [pc, #32]	; (80028dc <ssd1306_SetDisplayOn+0x38>)
 80028ba:	2201      	movs	r2, #1
 80028bc:	715a      	strb	r2, [r3, #5]
 80028be:	e004      	b.n	80028ca <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80028c0:	23ae      	movs	r3, #174	; 0xae
 80028c2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80028c4:	4b05      	ldr	r3, [pc, #20]	; (80028dc <ssd1306_SetDisplayOn+0x38>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80028ca:	7bfb      	ldrb	r3, [r7, #15]
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7ff fd1b 	bl	8002308 <ssd1306_WriteCommand>
}
 80028d2:	bf00      	nop
 80028d4:	3710      	adds	r7, #16
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	200008b8 	.word	0x200008b8

080028e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b085      	sub	sp, #20
 80028e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80028e6:	4b15      	ldr	r3, [pc, #84]	; (800293c <HAL_MspInit+0x5c>)
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	4a14      	ldr	r2, [pc, #80]	; (800293c <HAL_MspInit+0x5c>)
 80028ec:	f043 0301 	orr.w	r3, r3, #1
 80028f0:	6193      	str	r3, [r2, #24]
 80028f2:	4b12      	ldr	r3, [pc, #72]	; (800293c <HAL_MspInit+0x5c>)
 80028f4:	699b      	ldr	r3, [r3, #24]
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	60bb      	str	r3, [r7, #8]
 80028fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028fe:	4b0f      	ldr	r3, [pc, #60]	; (800293c <HAL_MspInit+0x5c>)
 8002900:	69db      	ldr	r3, [r3, #28]
 8002902:	4a0e      	ldr	r2, [pc, #56]	; (800293c <HAL_MspInit+0x5c>)
 8002904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002908:	61d3      	str	r3, [r2, #28]
 800290a:	4b0c      	ldr	r3, [pc, #48]	; (800293c <HAL_MspInit+0x5c>)
 800290c:	69db      	ldr	r3, [r3, #28]
 800290e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002912:	607b      	str	r3, [r7, #4]
 8002914:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002916:	4b0a      	ldr	r3, [pc, #40]	; (8002940 <HAL_MspInit+0x60>)
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	60fb      	str	r3, [r7, #12]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002922:	60fb      	str	r3, [r7, #12]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800292a:	60fb      	str	r3, [r7, #12]
 800292c:	4a04      	ldr	r2, [pc, #16]	; (8002940 <HAL_MspInit+0x60>)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002932:	bf00      	nop
 8002934:	3714      	adds	r7, #20
 8002936:	46bd      	mov	sp, r7
 8002938:	bc80      	pop	{r7}
 800293a:	4770      	bx	lr
 800293c:	40021000 	.word	0x40021000
 8002940:	40010000 	.word	0x40010000

08002944 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b088      	sub	sp, #32
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800294c:	f107 0310 	add.w	r3, r7, #16
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]
 8002954:	605a      	str	r2, [r3, #4]
 8002956:	609a      	str	r2, [r3, #8]
 8002958:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a18      	ldr	r2, [pc, #96]	; (80029c0 <HAL_ADC_MspInit+0x7c>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d129      	bne.n	80029b8 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002964:	4b17      	ldr	r3, [pc, #92]	; (80029c4 <HAL_ADC_MspInit+0x80>)
 8002966:	699b      	ldr	r3, [r3, #24]
 8002968:	4a16      	ldr	r2, [pc, #88]	; (80029c4 <HAL_ADC_MspInit+0x80>)
 800296a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800296e:	6193      	str	r3, [r2, #24]
 8002970:	4b14      	ldr	r3, [pc, #80]	; (80029c4 <HAL_ADC_MspInit+0x80>)
 8002972:	699b      	ldr	r3, [r3, #24]
 8002974:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002978:	60fb      	str	r3, [r7, #12]
 800297a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800297c:	4b11      	ldr	r3, [pc, #68]	; (80029c4 <HAL_ADC_MspInit+0x80>)
 800297e:	699b      	ldr	r3, [r3, #24]
 8002980:	4a10      	ldr	r2, [pc, #64]	; (80029c4 <HAL_ADC_MspInit+0x80>)
 8002982:	f043 0308 	orr.w	r3, r3, #8
 8002986:	6193      	str	r3, [r2, #24]
 8002988:	4b0e      	ldr	r3, [pc, #56]	; (80029c4 <HAL_ADC_MspInit+0x80>)
 800298a:	699b      	ldr	r3, [r3, #24]
 800298c:	f003 0308 	and.w	r3, r3, #8
 8002990:	60bb      	str	r3, [r7, #8]
 8002992:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002994:	2301      	movs	r3, #1
 8002996:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002998:	2303      	movs	r3, #3
 800299a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800299c:	f107 0310 	add.w	r3, r7, #16
 80029a0:	4619      	mov	r1, r3
 80029a2:	4809      	ldr	r0, [pc, #36]	; (80029c8 <HAL_ADC_MspInit+0x84>)
 80029a4:	f001 f864 	bl	8003a70 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 14, 0);
 80029a8:	2200      	movs	r2, #0
 80029aa:	210e      	movs	r1, #14
 80029ac:	2012      	movs	r0, #18
 80029ae:	f000 ff76 	bl	800389e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80029b2:	2012      	movs	r0, #18
 80029b4:	f000 ff8f 	bl	80038d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80029b8:	bf00      	nop
 80029ba:	3720      	adds	r7, #32
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	40012400 	.word	0x40012400
 80029c4:	40021000 	.word	0x40021000
 80029c8:	40010c00 	.word	0x40010c00

080029cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b088      	sub	sp, #32
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029d4:	f107 0310 	add.w	r3, r7, #16
 80029d8:	2200      	movs	r2, #0
 80029da:	601a      	str	r2, [r3, #0]
 80029dc:	605a      	str	r2, [r3, #4]
 80029de:	609a      	str	r2, [r3, #8]
 80029e0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a16      	ldr	r2, [pc, #88]	; (8002a40 <HAL_I2C_MspInit+0x74>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d124      	bne.n	8002a36 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029ec:	4b15      	ldr	r3, [pc, #84]	; (8002a44 <HAL_I2C_MspInit+0x78>)
 80029ee:	699b      	ldr	r3, [r3, #24]
 80029f0:	4a14      	ldr	r2, [pc, #80]	; (8002a44 <HAL_I2C_MspInit+0x78>)
 80029f2:	f043 0308 	orr.w	r3, r3, #8
 80029f6:	6193      	str	r3, [r2, #24]
 80029f8:	4b12      	ldr	r3, [pc, #72]	; (8002a44 <HAL_I2C_MspInit+0x78>)
 80029fa:	699b      	ldr	r3, [r3, #24]
 80029fc:	f003 0308 	and.w	r3, r3, #8
 8002a00:	60fb      	str	r3, [r7, #12]
 8002a02:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002a04:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002a08:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a0a:	2312      	movs	r3, #18
 8002a0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a12:	f107 0310 	add.w	r3, r7, #16
 8002a16:	4619      	mov	r1, r3
 8002a18:	480b      	ldr	r0, [pc, #44]	; (8002a48 <HAL_I2C_MspInit+0x7c>)
 8002a1a:	f001 f829 	bl	8003a70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002a1e:	4b09      	ldr	r3, [pc, #36]	; (8002a44 <HAL_I2C_MspInit+0x78>)
 8002a20:	69db      	ldr	r3, [r3, #28]
 8002a22:	4a08      	ldr	r2, [pc, #32]	; (8002a44 <HAL_I2C_MspInit+0x78>)
 8002a24:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a28:	61d3      	str	r3, [r2, #28]
 8002a2a:	4b06      	ldr	r3, [pc, #24]	; (8002a44 <HAL_I2C_MspInit+0x78>)
 8002a2c:	69db      	ldr	r3, [r3, #28]
 8002a2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a32:	60bb      	str	r3, [r7, #8]
 8002a34:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002a36:	bf00      	nop
 8002a38:	3720      	adds	r7, #32
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	40005800 	.word	0x40005800
 8002a44:	40021000 	.word	0x40021000
 8002a48:	40010c00 	.word	0x40010c00

08002a4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a09      	ldr	r2, [pc, #36]	; (8002a80 <HAL_TIM_Base_MspInit+0x34>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d10b      	bne.n	8002a76 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002a5e:	4b09      	ldr	r3, [pc, #36]	; (8002a84 <HAL_TIM_Base_MspInit+0x38>)
 8002a60:	69db      	ldr	r3, [r3, #28]
 8002a62:	4a08      	ldr	r2, [pc, #32]	; (8002a84 <HAL_TIM_Base_MspInit+0x38>)
 8002a64:	f043 0304 	orr.w	r3, r3, #4
 8002a68:	61d3      	str	r3, [r2, #28]
 8002a6a:	4b06      	ldr	r3, [pc, #24]	; (8002a84 <HAL_TIM_Base_MspInit+0x38>)
 8002a6c:	69db      	ldr	r3, [r3, #28]
 8002a6e:	f003 0304 	and.w	r3, r3, #4
 8002a72:	60fb      	str	r3, [r7, #12]
 8002a74:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002a76:	bf00      	nop
 8002a78:	3714      	adds	r7, #20
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bc80      	pop	{r7}
 8002a7e:	4770      	bx	lr
 8002a80:	40000800 	.word	0x40000800
 8002a84:	40021000 	.word	0x40021000

08002a88 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b088      	sub	sp, #32
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a90:	f107 0310 	add.w	r3, r7, #16
 8002a94:	2200      	movs	r2, #0
 8002a96:	601a      	str	r2, [r3, #0]
 8002a98:	605a      	str	r2, [r3, #4]
 8002a9a:	609a      	str	r2, [r3, #8]
 8002a9c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a10      	ldr	r2, [pc, #64]	; (8002ae4 <HAL_TIM_MspPostInit+0x5c>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d118      	bne.n	8002ada <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aa8:	4b0f      	ldr	r3, [pc, #60]	; (8002ae8 <HAL_TIM_MspPostInit+0x60>)
 8002aaa:	699b      	ldr	r3, [r3, #24]
 8002aac:	4a0e      	ldr	r2, [pc, #56]	; (8002ae8 <HAL_TIM_MspPostInit+0x60>)
 8002aae:	f043 0308 	orr.w	r3, r3, #8
 8002ab2:	6193      	str	r3, [r2, #24]
 8002ab4:	4b0c      	ldr	r3, [pc, #48]	; (8002ae8 <HAL_TIM_MspPostInit+0x60>)
 8002ab6:	699b      	ldr	r3, [r3, #24]
 8002ab8:	f003 0308 	and.w	r3, r3, #8
 8002abc:	60fb      	str	r3, [r7, #12]
 8002abe:	68fb      	ldr	r3, [r7, #12]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002ac0:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002ac4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aca:	2302      	movs	r3, #2
 8002acc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ace:	f107 0310 	add.w	r3, r7, #16
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	4805      	ldr	r0, [pc, #20]	; (8002aec <HAL_TIM_MspPostInit+0x64>)
 8002ad6:	f000 ffcb 	bl	8003a70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002ada:	bf00      	nop
 8002adc:	3720      	adds	r7, #32
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	40000800 	.word	0x40000800
 8002ae8:	40021000 	.word	0x40021000
 8002aec:	40010c00 	.word	0x40010c00

08002af0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b088      	sub	sp, #32
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002af8:	f107 0310 	add.w	r3, r7, #16
 8002afc:	2200      	movs	r2, #0
 8002afe:	601a      	str	r2, [r3, #0]
 8002b00:	605a      	str	r2, [r3, #4]
 8002b02:	609a      	str	r2, [r3, #8]
 8002b04:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a20      	ldr	r2, [pc, #128]	; (8002b8c <HAL_UART_MspInit+0x9c>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d139      	bne.n	8002b84 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b10:	4b1f      	ldr	r3, [pc, #124]	; (8002b90 <HAL_UART_MspInit+0xa0>)
 8002b12:	699b      	ldr	r3, [r3, #24]
 8002b14:	4a1e      	ldr	r2, [pc, #120]	; (8002b90 <HAL_UART_MspInit+0xa0>)
 8002b16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b1a:	6193      	str	r3, [r2, #24]
 8002b1c:	4b1c      	ldr	r3, [pc, #112]	; (8002b90 <HAL_UART_MspInit+0xa0>)
 8002b1e:	699b      	ldr	r3, [r3, #24]
 8002b20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b24:	60fb      	str	r3, [r7, #12]
 8002b26:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b28:	4b19      	ldr	r3, [pc, #100]	; (8002b90 <HAL_UART_MspInit+0xa0>)
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	4a18      	ldr	r2, [pc, #96]	; (8002b90 <HAL_UART_MspInit+0xa0>)
 8002b2e:	f043 0304 	orr.w	r3, r3, #4
 8002b32:	6193      	str	r3, [r2, #24]
 8002b34:	4b16      	ldr	r3, [pc, #88]	; (8002b90 <HAL_UART_MspInit+0xa0>)
 8002b36:	699b      	ldr	r3, [r3, #24]
 8002b38:	f003 0304 	and.w	r3, r3, #4
 8002b3c:	60bb      	str	r3, [r7, #8]
 8002b3e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002b40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b44:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b46:	2302      	movs	r3, #2
 8002b48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b4e:	f107 0310 	add.w	r3, r7, #16
 8002b52:	4619      	mov	r1, r3
 8002b54:	480f      	ldr	r0, [pc, #60]	; (8002b94 <HAL_UART_MspInit+0xa4>)
 8002b56:	f000 ff8b 	bl	8003a70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002b5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b5e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b60:	2300      	movs	r3, #0
 8002b62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b64:	2300      	movs	r3, #0
 8002b66:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b68:	f107 0310 	add.w	r3, r7, #16
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	4809      	ldr	r0, [pc, #36]	; (8002b94 <HAL_UART_MspInit+0xa4>)
 8002b70:	f000 ff7e 	bl	8003a70 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002b74:	2200      	movs	r2, #0
 8002b76:	2105      	movs	r1, #5
 8002b78:	2025      	movs	r0, #37	; 0x25
 8002b7a:	f000 fe90 	bl	800389e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002b7e:	2025      	movs	r0, #37	; 0x25
 8002b80:	f000 fea9 	bl	80038d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002b84:	bf00      	nop
 8002b86:	3720      	adds	r7, #32
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	40013800 	.word	0x40013800
 8002b90:	40021000 	.word	0x40021000
 8002b94:	40010800 	.word	0x40010800

08002b98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b9c:	e7fe      	b.n	8002b9c <NMI_Handler+0x4>

08002b9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ba2:	e7fe      	b.n	8002ba2 <HardFault_Handler+0x4>

08002ba4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ba8:	e7fe      	b.n	8002ba8 <MemManage_Handler+0x4>

08002baa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002baa:	b480      	push	{r7}
 8002bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bae:	e7fe      	b.n	8002bae <BusFault_Handler+0x4>

08002bb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bb4:	e7fe      	b.n	8002bb4 <UsageFault_Handler+0x4>

08002bb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002bba:	bf00      	nop
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bc80      	pop	{r7}
 8002bc0:	4770      	bx	lr

08002bc2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bc2:	b480      	push	{r7}
 8002bc4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bc6:	bf00      	nop
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bc80      	pop	{r7}
 8002bcc:	4770      	bx	lr

08002bce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002bce:	b480      	push	{r7}
 8002bd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bd2:	bf00      	nop
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bc80      	pop	{r7}
 8002bd8:	4770      	bx	lr

08002bda <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bda:	b580      	push	{r7, lr}
 8002bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bde:	f000 f949 	bl	8002e74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002be2:	bf00      	nop
 8002be4:	bd80      	pop	{r7, pc}
	...

08002be8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002bec:	4802      	ldr	r0, [pc, #8]	; (8002bf8 <ADC1_2_IRQHandler+0x10>)
 8002bee:	f000 fb1b 	bl	8003228 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002bf2:	bf00      	nop
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	2000023c 	.word	0x2000023c

08002bfc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002c00:	4802      	ldr	r0, [pc, #8]	; (8002c0c <USART1_IRQHandler+0x10>)
 8002c02:	f003 f929 	bl	8005e58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002c06:	bf00      	nop
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	20000308 	.word	0x20000308

08002c10 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0
  return 1;
 8002c14:	2301      	movs	r3, #1
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bc80      	pop	{r7}
 8002c1c:	4770      	bx	lr

08002c1e <_kill>:

int _kill(int pid, int sig)
{
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b082      	sub	sp, #8
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
 8002c26:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002c28:	f005 fdc2 	bl	80087b0 <__errno>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2216      	movs	r2, #22
 8002c30:	601a      	str	r2, [r3, #0]
  return -1;
 8002c32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3708      	adds	r7, #8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <_exit>:

void _exit (int status)
{
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	b082      	sub	sp, #8
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002c46:	f04f 31ff 	mov.w	r1, #4294967295
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f7ff ffe7 	bl	8002c1e <_kill>
  while (1) {}    /* Make sure we hang here */
 8002c50:	e7fe      	b.n	8002c50 <_exit+0x12>

08002c52 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c52:	b580      	push	{r7, lr}
 8002c54:	b086      	sub	sp, #24
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	60f8      	str	r0, [r7, #12]
 8002c5a:	60b9      	str	r1, [r7, #8]
 8002c5c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c5e:	2300      	movs	r3, #0
 8002c60:	617b      	str	r3, [r7, #20]
 8002c62:	e00a      	b.n	8002c7a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002c64:	f3af 8000 	nop.w
 8002c68:	4601      	mov	r1, r0
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	1c5a      	adds	r2, r3, #1
 8002c6e:	60ba      	str	r2, [r7, #8]
 8002c70:	b2ca      	uxtb	r2, r1
 8002c72:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	3301      	adds	r3, #1
 8002c78:	617b      	str	r3, [r7, #20]
 8002c7a:	697a      	ldr	r2, [r7, #20]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	dbf0      	blt.n	8002c64 <_read+0x12>
  }

  return len;
 8002c82:	687b      	ldr	r3, [r7, #4]
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3718      	adds	r7, #24
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b086      	sub	sp, #24
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c98:	2300      	movs	r3, #0
 8002c9a:	617b      	str	r3, [r7, #20]
 8002c9c:	e009      	b.n	8002cb2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	1c5a      	adds	r2, r3, #1
 8002ca2:	60ba      	str	r2, [r7, #8]
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	3301      	adds	r3, #1
 8002cb0:	617b      	str	r3, [r7, #20]
 8002cb2:	697a      	ldr	r2, [r7, #20]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	dbf1      	blt.n	8002c9e <_write+0x12>
  }
  return len;
 8002cba:	687b      	ldr	r3, [r7, #4]
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3718      	adds	r7, #24
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <_close>:

int _close(int file)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002ccc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bc80      	pop	{r7}
 8002cd8:	4770      	bx	lr

08002cda <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002cda:	b480      	push	{r7}
 8002cdc:	b083      	sub	sp, #12
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
 8002ce2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002cea:	605a      	str	r2, [r3, #4]
  return 0;
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	370c      	adds	r7, #12
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bc80      	pop	{r7}
 8002cf6:	4770      	bx	lr

08002cf8 <_isatty>:

int _isatty(int file)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002d00:	2301      	movs	r3, #1
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	370c      	adds	r7, #12
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bc80      	pop	{r7}
 8002d0a:	4770      	bx	lr

08002d0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b085      	sub	sp, #20
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3714      	adds	r7, #20
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bc80      	pop	{r7}
 8002d22:	4770      	bx	lr

08002d24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b086      	sub	sp, #24
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d2c:	4a14      	ldr	r2, [pc, #80]	; (8002d80 <_sbrk+0x5c>)
 8002d2e:	4b15      	ldr	r3, [pc, #84]	; (8002d84 <_sbrk+0x60>)
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d38:	4b13      	ldr	r3, [pc, #76]	; (8002d88 <_sbrk+0x64>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d102      	bne.n	8002d46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d40:	4b11      	ldr	r3, [pc, #68]	; (8002d88 <_sbrk+0x64>)
 8002d42:	4a12      	ldr	r2, [pc, #72]	; (8002d8c <_sbrk+0x68>)
 8002d44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d46:	4b10      	ldr	r3, [pc, #64]	; (8002d88 <_sbrk+0x64>)
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4413      	add	r3, r2
 8002d4e:	693a      	ldr	r2, [r7, #16]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d207      	bcs.n	8002d64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d54:	f005 fd2c 	bl	80087b0 <__errno>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	220c      	movs	r2, #12
 8002d5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d62:	e009      	b.n	8002d78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d64:	4b08      	ldr	r3, [pc, #32]	; (8002d88 <_sbrk+0x64>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d6a:	4b07      	ldr	r3, [pc, #28]	; (8002d88 <_sbrk+0x64>)
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4413      	add	r3, r2
 8002d72:	4a05      	ldr	r2, [pc, #20]	; (8002d88 <_sbrk+0x64>)
 8002d74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d76:	68fb      	ldr	r3, [r7, #12]
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3718      	adds	r7, #24
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	20005000 	.word	0x20005000
 8002d84:	00000400 	.word	0x00000400
 8002d88:	200008c0 	.word	0x200008c0
 8002d8c:	20000a18 	.word	0x20000a18

08002d90 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002d90:	b480      	push	{r7}
 8002d92:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d94:	bf00      	nop
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bc80      	pop	{r7}
 8002d9a:	4770      	bx	lr

08002d9c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002d9c:	f7ff fff8 	bl	8002d90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002da0:	480b      	ldr	r0, [pc, #44]	; (8002dd0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002da2:	490c      	ldr	r1, [pc, #48]	; (8002dd4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002da4:	4a0c      	ldr	r2, [pc, #48]	; (8002dd8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002da6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002da8:	e002      	b.n	8002db0 <LoopCopyDataInit>

08002daa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002daa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002dac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002dae:	3304      	adds	r3, #4

08002db0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002db0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002db2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002db4:	d3f9      	bcc.n	8002daa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002db6:	4a09      	ldr	r2, [pc, #36]	; (8002ddc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002db8:	4c09      	ldr	r4, [pc, #36]	; (8002de0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002dba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002dbc:	e001      	b.n	8002dc2 <LoopFillZerobss>

08002dbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002dbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002dc0:	3204      	adds	r2, #4

08002dc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002dc4:	d3fb      	bcc.n	8002dbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002dc6:	f005 fcf9 	bl	80087bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002dca:	f7fe ffc7 	bl	8001d5c <main>
  bx lr
 8002dce:	4770      	bx	lr
  ldr r0, =_sdata
 8002dd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002dd4:	20000220 	.word	0x20000220
  ldr r2, =_sidata
 8002dd8:	0800d620 	.word	0x0800d620
  ldr r2, =_sbss
 8002ddc:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 8002de0:	20000a14 	.word	0x20000a14

08002de4 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002de4:	e7fe      	b.n	8002de4 <CAN1_RX1_IRQHandler>
	...

08002de8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002dec:	4b08      	ldr	r3, [pc, #32]	; (8002e10 <HAL_Init+0x28>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a07      	ldr	r2, [pc, #28]	; (8002e10 <HAL_Init+0x28>)
 8002df2:	f043 0310 	orr.w	r3, r3, #16
 8002df6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002df8:	2003      	movs	r0, #3
 8002dfa:	f000 fd45 	bl	8003888 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002dfe:	200f      	movs	r0, #15
 8002e00:	f000 f808 	bl	8002e14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e04:	f7ff fd6c 	bl	80028e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	40022000 	.word	0x40022000

08002e14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e1c:	4b12      	ldr	r3, [pc, #72]	; (8002e68 <HAL_InitTick+0x54>)
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	4b12      	ldr	r3, [pc, #72]	; (8002e6c <HAL_InitTick+0x58>)
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	4619      	mov	r1, r3
 8002e26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e32:	4618      	mov	r0, r3
 8002e34:	f000 fd5d 	bl	80038f2 <HAL_SYSTICK_Config>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d001      	beq.n	8002e42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e00e      	b.n	8002e60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2b0f      	cmp	r3, #15
 8002e46:	d80a      	bhi.n	8002e5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e48:	2200      	movs	r2, #0
 8002e4a:	6879      	ldr	r1, [r7, #4]
 8002e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e50:	f000 fd25 	bl	800389e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e54:	4a06      	ldr	r2, [pc, #24]	; (8002e70 <HAL_InitTick+0x5c>)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	e000      	b.n	8002e60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3708      	adds	r7, #8
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	2000004c 	.word	0x2000004c
 8002e6c:	20000054 	.word	0x20000054
 8002e70:	20000050 	.word	0x20000050

08002e74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e74:	b480      	push	{r7}
 8002e76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e78:	4b05      	ldr	r3, [pc, #20]	; (8002e90 <HAL_IncTick+0x1c>)
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	4b05      	ldr	r3, [pc, #20]	; (8002e94 <HAL_IncTick+0x20>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4413      	add	r3, r2
 8002e84:	4a03      	ldr	r2, [pc, #12]	; (8002e94 <HAL_IncTick+0x20>)
 8002e86:	6013      	str	r3, [r2, #0]
}
 8002e88:	bf00      	nop
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bc80      	pop	{r7}
 8002e8e:	4770      	bx	lr
 8002e90:	20000054 	.word	0x20000054
 8002e94:	200008c4 	.word	0x200008c4

08002e98 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
  return uwTick;
 8002e9c:	4b02      	ldr	r3, [pc, #8]	; (8002ea8 <HAL_GetTick+0x10>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bc80      	pop	{r7}
 8002ea6:	4770      	bx	lr
 8002ea8:	200008c4 	.word	0x200008c4

08002eac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002eb4:	f7ff fff0 	bl	8002e98 <HAL_GetTick>
 8002eb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ec4:	d005      	beq.n	8002ed2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ec6:	4b0a      	ldr	r3, [pc, #40]	; (8002ef0 <HAL_Delay+0x44>)
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	461a      	mov	r2, r3
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	4413      	add	r3, r2
 8002ed0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ed2:	bf00      	nop
 8002ed4:	f7ff ffe0 	bl	8002e98 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	68fa      	ldr	r2, [r7, #12]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d8f7      	bhi.n	8002ed4 <HAL_Delay+0x28>
  {
  }
}
 8002ee4:	bf00      	nop
 8002ee6:	bf00      	nop
 8002ee8:	3710      	adds	r7, #16
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	20000054 	.word	0x20000054

08002ef4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b086      	sub	sp, #24
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002efc:	2300      	movs	r3, #0
 8002efe:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002f00:	2300      	movs	r3, #0
 8002f02:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002f04:	2300      	movs	r3, #0
 8002f06:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d101      	bne.n	8002f16 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e0be      	b.n	8003094 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d109      	bne.n	8002f38 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f7ff fd06 	bl	8002944 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f000 fb8f 	bl	800365c <ADC_ConversionStop_Disable>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f46:	f003 0310 	and.w	r3, r3, #16
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	f040 8099 	bne.w	8003082 <HAL_ADC_Init+0x18e>
 8002f50:	7dfb      	ldrb	r3, [r7, #23]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	f040 8095 	bne.w	8003082 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f5c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002f60:	f023 0302 	bic.w	r3, r3, #2
 8002f64:	f043 0202 	orr.w	r2, r3, #2
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002f74:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	7b1b      	ldrb	r3, [r3, #12]
 8002f7a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002f7c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002f7e:	68ba      	ldr	r2, [r7, #8]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f8c:	d003      	beq.n	8002f96 <HAL_ADC_Init+0xa2>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d102      	bne.n	8002f9c <HAL_ADC_Init+0xa8>
 8002f96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f9a:	e000      	b.n	8002f9e <HAL_ADC_Init+0xaa>
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	693a      	ldr	r2, [r7, #16]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	7d1b      	ldrb	r3, [r3, #20]
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d119      	bne.n	8002fe0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	7b1b      	ldrb	r3, [r3, #12]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d109      	bne.n	8002fc8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	3b01      	subs	r3, #1
 8002fba:	035a      	lsls	r2, r3, #13
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002fc4:	613b      	str	r3, [r7, #16]
 8002fc6:	e00b      	b.n	8002fe0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fcc:	f043 0220 	orr.w	r2, r3, #32
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd8:	f043 0201 	orr.w	r2, r3, #1
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	693a      	ldr	r2, [r7, #16]
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	689a      	ldr	r2, [r3, #8]
 8002ffa:	4b28      	ldr	r3, [pc, #160]	; (800309c <HAL_ADC_Init+0x1a8>)
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	6812      	ldr	r2, [r2, #0]
 8003002:	68b9      	ldr	r1, [r7, #8]
 8003004:	430b      	orrs	r3, r1
 8003006:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003010:	d003      	beq.n	800301a <HAL_ADC_Init+0x126>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d104      	bne.n	8003024 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	3b01      	subs	r3, #1
 8003020:	051b      	lsls	r3, r3, #20
 8003022:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800302a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	68fa      	ldr	r2, [r7, #12]
 8003034:	430a      	orrs	r2, r1
 8003036:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	689a      	ldr	r2, [r3, #8]
 800303e:	4b18      	ldr	r3, [pc, #96]	; (80030a0 <HAL_ADC_Init+0x1ac>)
 8003040:	4013      	ands	r3, r2
 8003042:	68ba      	ldr	r2, [r7, #8]
 8003044:	429a      	cmp	r2, r3
 8003046:	d10b      	bne.n	8003060 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003052:	f023 0303 	bic.w	r3, r3, #3
 8003056:	f043 0201 	orr.w	r2, r3, #1
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800305e:	e018      	b.n	8003092 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003064:	f023 0312 	bic.w	r3, r3, #18
 8003068:	f043 0210 	orr.w	r2, r3, #16
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003074:	f043 0201 	orr.w	r2, r3, #1
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003080:	e007      	b.n	8003092 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003086:	f043 0210 	orr.w	r2, r3, #16
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003092:	7dfb      	ldrb	r3, [r7, #23]
}
 8003094:	4618      	mov	r0, r3
 8003096:	3718      	adds	r7, #24
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	ffe1f7fd 	.word	0xffe1f7fd
 80030a0:	ff1f0efe 	.word	0xff1f0efe

080030a4 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030ac:	2300      	movs	r3, #0
 80030ae:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d101      	bne.n	80030be <HAL_ADC_Start_IT+0x1a>
 80030ba:	2302      	movs	r3, #2
 80030bc:	e0a0      	b.n	8003200 <HAL_ADC_Start_IT+0x15c>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2201      	movs	r2, #1
 80030c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f000 fa6e 	bl	80035a8 <ADC_Enable>
 80030cc:	4603      	mov	r3, r0
 80030ce:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80030d0:	7bfb      	ldrb	r3, [r7, #15]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	f040 808f 	bne.w	80031f6 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030dc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80030e0:	f023 0301 	bic.w	r3, r3, #1
 80030e4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a45      	ldr	r2, [pc, #276]	; (8003208 <HAL_ADC_Start_IT+0x164>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d105      	bne.n	8003102 <HAL_ADC_Start_IT+0x5e>
 80030f6:	4b45      	ldr	r3, [pc, #276]	; (800320c <HAL_ADC_Start_IT+0x168>)
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d115      	bne.n	800312e <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003106:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003118:	2b00      	cmp	r3, #0
 800311a:	d026      	beq.n	800316a <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003120:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003124:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800312c:	e01d      	b.n	800316a <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003132:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a33      	ldr	r2, [pc, #204]	; (800320c <HAL_ADC_Start_IT+0x168>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d004      	beq.n	800314e <HAL_ADC_Start_IT+0xaa>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a2f      	ldr	r2, [pc, #188]	; (8003208 <HAL_ADC_Start_IT+0x164>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d10d      	bne.n	800316a <HAL_ADC_Start_IT+0xc6>
 800314e:	4b2f      	ldr	r3, [pc, #188]	; (800320c <HAL_ADC_Start_IT+0x168>)
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003156:	2b00      	cmp	r3, #0
 8003158:	d007      	beq.n	800316a <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800315e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003162:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800316e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d006      	beq.n	8003184 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800317a:	f023 0206 	bic.w	r2, r3, #6
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	62da      	str	r2, [r3, #44]	; 0x2c
 8003182:	e002      	b.n	800318a <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f06f 0202 	mvn.w	r2, #2
 800319a:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	685a      	ldr	r2, [r3, #4]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f042 0220 	orr.w	r2, r2, #32
 80031aa:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80031b6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80031ba:	d113      	bne.n	80031e4 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80031c0:	4a11      	ldr	r2, [pc, #68]	; (8003208 <HAL_ADC_Start_IT+0x164>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d105      	bne.n	80031d2 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80031c6:	4b11      	ldr	r3, [pc, #68]	; (800320c <HAL_ADC_Start_IT+0x168>)
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d108      	bne.n	80031e4 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	689a      	ldr	r2, [r3, #8]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80031e0:	609a      	str	r2, [r3, #8]
 80031e2:	e00c      	b.n	80031fe <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	689a      	ldr	r2, [r3, #8]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80031f2:	609a      	str	r2, [r3, #8]
 80031f4:	e003      	b.n	80031fe <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 80031fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003200:	4618      	mov	r0, r3
 8003202:	3710      	adds	r7, #16
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	40012800 	.word	0x40012800
 800320c:	40012400 	.word	0x40012400

08003210 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800321e:	4618      	mov	r0, r3
 8003220:	370c      	adds	r7, #12
 8003222:	46bd      	mov	sp, r7
 8003224:	bc80      	pop	{r7}
 8003226:	4770      	bx	lr

08003228 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	f003 0320 	and.w	r3, r3, #32
 8003246:	2b00      	cmp	r3, #0
 8003248:	d03e      	beq.n	80032c8 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	f003 0302 	and.w	r3, r3, #2
 8003250:	2b00      	cmp	r3, #0
 8003252:	d039      	beq.n	80032c8 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003258:	f003 0310 	and.w	r3, r3, #16
 800325c:	2b00      	cmp	r3, #0
 800325e:	d105      	bne.n	800326c <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003264:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003276:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800327a:	d11d      	bne.n	80032b8 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003280:	2b00      	cmp	r3, #0
 8003282:	d119      	bne.n	80032b8 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	685a      	ldr	r2, [r3, #4]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f022 0220 	bic.w	r2, r2, #32
 8003292:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003298:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d105      	bne.n	80032b8 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b0:	f043 0201 	orr.w	r2, r3, #1
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f7fe ffff 	bl	80022bc <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f06f 0212 	mvn.w	r2, #18
 80032c6:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d04d      	beq.n	800336e <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	f003 0304 	and.w	r3, r3, #4
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d048      	beq.n	800336e <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e0:	f003 0310 	and.w	r3, r3, #16
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d105      	bne.n	80032f4 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ec:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80032fe:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8003302:	d012      	beq.n	800332a <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800330e:	2b00      	cmp	r3, #0
 8003310:	d125      	bne.n	800335e <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800331c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003320:	d11d      	bne.n	800335e <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003326:	2b00      	cmp	r3, #0
 8003328:	d119      	bne.n	800335e <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	685a      	ldr	r2, [r3, #4]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003338:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800333e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800334a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800334e:	2b00      	cmp	r3, #0
 8003350:	d105      	bne.n	800335e <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003356:	f043 0201 	orr.w	r2, r3, #1
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f000 f9bd 	bl	80036de <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f06f 020c 	mvn.w	r2, #12
 800336c:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003374:	2b00      	cmp	r3, #0
 8003376:	d012      	beq.n	800339e <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f003 0301 	and.w	r3, r3, #1
 800337e:	2b00      	cmp	r3, #0
 8003380:	d00d      	beq.n	800339e <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003386:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f000 f809 	bl	80033a6 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f06f 0201 	mvn.w	r2, #1
 800339c:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800339e:	bf00      	nop
 80033a0:	3710      	adds	r7, #16
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}

080033a6 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80033a6:	b480      	push	{r7}
 80033a8:	b083      	sub	sp, #12
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80033ae:	bf00      	nop
 80033b0:	370c      	adds	r7, #12
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bc80      	pop	{r7}
 80033b6:	4770      	bx	lr

080033b8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80033b8:	b480      	push	{r7}
 80033ba:	b085      	sub	sp, #20
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033c2:	2300      	movs	r3, #0
 80033c4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80033c6:	2300      	movs	r3, #0
 80033c8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d101      	bne.n	80033d8 <HAL_ADC_ConfigChannel+0x20>
 80033d4:	2302      	movs	r3, #2
 80033d6:	e0dc      	b.n	8003592 <HAL_ADC_ConfigChannel+0x1da>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	2b06      	cmp	r3, #6
 80033e6:	d81c      	bhi.n	8003422 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	685a      	ldr	r2, [r3, #4]
 80033f2:	4613      	mov	r3, r2
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	4413      	add	r3, r2
 80033f8:	3b05      	subs	r3, #5
 80033fa:	221f      	movs	r2, #31
 80033fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003400:	43db      	mvns	r3, r3
 8003402:	4019      	ands	r1, r3
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	6818      	ldr	r0, [r3, #0]
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	685a      	ldr	r2, [r3, #4]
 800340c:	4613      	mov	r3, r2
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	4413      	add	r3, r2
 8003412:	3b05      	subs	r3, #5
 8003414:	fa00 f203 	lsl.w	r2, r0, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	430a      	orrs	r2, r1
 800341e:	635a      	str	r2, [r3, #52]	; 0x34
 8003420:	e03c      	b.n	800349c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	2b0c      	cmp	r3, #12
 8003428:	d81c      	bhi.n	8003464 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	685a      	ldr	r2, [r3, #4]
 8003434:	4613      	mov	r3, r2
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	4413      	add	r3, r2
 800343a:	3b23      	subs	r3, #35	; 0x23
 800343c:	221f      	movs	r2, #31
 800343e:	fa02 f303 	lsl.w	r3, r2, r3
 8003442:	43db      	mvns	r3, r3
 8003444:	4019      	ands	r1, r3
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	6818      	ldr	r0, [r3, #0]
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	685a      	ldr	r2, [r3, #4]
 800344e:	4613      	mov	r3, r2
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	4413      	add	r3, r2
 8003454:	3b23      	subs	r3, #35	; 0x23
 8003456:	fa00 f203 	lsl.w	r2, r0, r3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	430a      	orrs	r2, r1
 8003460:	631a      	str	r2, [r3, #48]	; 0x30
 8003462:	e01b      	b.n	800349c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	685a      	ldr	r2, [r3, #4]
 800346e:	4613      	mov	r3, r2
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	4413      	add	r3, r2
 8003474:	3b41      	subs	r3, #65	; 0x41
 8003476:	221f      	movs	r2, #31
 8003478:	fa02 f303 	lsl.w	r3, r2, r3
 800347c:	43db      	mvns	r3, r3
 800347e:	4019      	ands	r1, r3
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	6818      	ldr	r0, [r3, #0]
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	685a      	ldr	r2, [r3, #4]
 8003488:	4613      	mov	r3, r2
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	4413      	add	r3, r2
 800348e:	3b41      	subs	r3, #65	; 0x41
 8003490:	fa00 f203 	lsl.w	r2, r0, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	430a      	orrs	r2, r1
 800349a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2b09      	cmp	r3, #9
 80034a2:	d91c      	bls.n	80034de <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	68d9      	ldr	r1, [r3, #12]
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	4613      	mov	r3, r2
 80034b0:	005b      	lsls	r3, r3, #1
 80034b2:	4413      	add	r3, r2
 80034b4:	3b1e      	subs	r3, #30
 80034b6:	2207      	movs	r2, #7
 80034b8:	fa02 f303 	lsl.w	r3, r2, r3
 80034bc:	43db      	mvns	r3, r3
 80034be:	4019      	ands	r1, r3
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	6898      	ldr	r0, [r3, #8]
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	4613      	mov	r3, r2
 80034ca:	005b      	lsls	r3, r3, #1
 80034cc:	4413      	add	r3, r2
 80034ce:	3b1e      	subs	r3, #30
 80034d0:	fa00 f203 	lsl.w	r2, r0, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	430a      	orrs	r2, r1
 80034da:	60da      	str	r2, [r3, #12]
 80034dc:	e019      	b.n	8003512 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	6919      	ldr	r1, [r3, #16]
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	4613      	mov	r3, r2
 80034ea:	005b      	lsls	r3, r3, #1
 80034ec:	4413      	add	r3, r2
 80034ee:	2207      	movs	r2, #7
 80034f0:	fa02 f303 	lsl.w	r3, r2, r3
 80034f4:	43db      	mvns	r3, r3
 80034f6:	4019      	ands	r1, r3
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	6898      	ldr	r0, [r3, #8]
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	4613      	mov	r3, r2
 8003502:	005b      	lsls	r3, r3, #1
 8003504:	4413      	add	r3, r2
 8003506:	fa00 f203 	lsl.w	r2, r0, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	430a      	orrs	r2, r1
 8003510:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	2b10      	cmp	r3, #16
 8003518:	d003      	beq.n	8003522 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800351e:	2b11      	cmp	r3, #17
 8003520:	d132      	bne.n	8003588 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a1d      	ldr	r2, [pc, #116]	; (800359c <HAL_ADC_ConfigChannel+0x1e4>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d125      	bne.n	8003578 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d126      	bne.n	8003588 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	689a      	ldr	r2, [r3, #8]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003548:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2b10      	cmp	r3, #16
 8003550:	d11a      	bne.n	8003588 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003552:	4b13      	ldr	r3, [pc, #76]	; (80035a0 <HAL_ADC_ConfigChannel+0x1e8>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a13      	ldr	r2, [pc, #76]	; (80035a4 <HAL_ADC_ConfigChannel+0x1ec>)
 8003558:	fba2 2303 	umull	r2, r3, r2, r3
 800355c:	0c9a      	lsrs	r2, r3, #18
 800355e:	4613      	mov	r3, r2
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	4413      	add	r3, r2
 8003564:	005b      	lsls	r3, r3, #1
 8003566:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003568:	e002      	b.n	8003570 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	3b01      	subs	r3, #1
 800356e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d1f9      	bne.n	800356a <HAL_ADC_ConfigChannel+0x1b2>
 8003576:	e007      	b.n	8003588 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800357c:	f043 0220 	orr.w	r2, r3, #32
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003590:	7bfb      	ldrb	r3, [r7, #15]
}
 8003592:	4618      	mov	r0, r3
 8003594:	3714      	adds	r7, #20
 8003596:	46bd      	mov	sp, r7
 8003598:	bc80      	pop	{r7}
 800359a:	4770      	bx	lr
 800359c:	40012400 	.word	0x40012400
 80035a0:	2000004c 	.word	0x2000004c
 80035a4:	431bde83 	.word	0x431bde83

080035a8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80035b0:	2300      	movs	r3, #0
 80035b2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80035b4:	2300      	movs	r3, #0
 80035b6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	f003 0301 	and.w	r3, r3, #1
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d040      	beq.n	8003648 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	689a      	ldr	r2, [r3, #8]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f042 0201 	orr.w	r2, r2, #1
 80035d4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80035d6:	4b1f      	ldr	r3, [pc, #124]	; (8003654 <ADC_Enable+0xac>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a1f      	ldr	r2, [pc, #124]	; (8003658 <ADC_Enable+0xb0>)
 80035dc:	fba2 2303 	umull	r2, r3, r2, r3
 80035e0:	0c9b      	lsrs	r3, r3, #18
 80035e2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80035e4:	e002      	b.n	80035ec <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	3b01      	subs	r3, #1
 80035ea:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d1f9      	bne.n	80035e6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80035f2:	f7ff fc51 	bl	8002e98 <HAL_GetTick>
 80035f6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80035f8:	e01f      	b.n	800363a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80035fa:	f7ff fc4d 	bl	8002e98 <HAL_GetTick>
 80035fe:	4602      	mov	r2, r0
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	2b02      	cmp	r3, #2
 8003606:	d918      	bls.n	800363a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f003 0301 	and.w	r3, r3, #1
 8003612:	2b01      	cmp	r3, #1
 8003614:	d011      	beq.n	800363a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800361a:	f043 0210 	orr.w	r2, r3, #16
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003626:	f043 0201 	orr.w	r2, r3, #1
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e007      	b.n	800364a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	f003 0301 	and.w	r3, r3, #1
 8003644:	2b01      	cmp	r3, #1
 8003646:	d1d8      	bne.n	80035fa <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003648:	2300      	movs	r3, #0
}
 800364a:	4618      	mov	r0, r3
 800364c:	3710      	adds	r7, #16
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	2000004c 	.word	0x2000004c
 8003658:	431bde83 	.word	0x431bde83

0800365c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003664:	2300      	movs	r3, #0
 8003666:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f003 0301 	and.w	r3, r3, #1
 8003672:	2b01      	cmp	r3, #1
 8003674:	d12e      	bne.n	80036d4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	689a      	ldr	r2, [r3, #8]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f022 0201 	bic.w	r2, r2, #1
 8003684:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003686:	f7ff fc07 	bl	8002e98 <HAL_GetTick>
 800368a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800368c:	e01b      	b.n	80036c6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800368e:	f7ff fc03 	bl	8002e98 <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	2b02      	cmp	r3, #2
 800369a:	d914      	bls.n	80036c6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f003 0301 	and.w	r3, r3, #1
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d10d      	bne.n	80036c6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ae:	f043 0210 	orr.w	r2, r3, #16
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ba:	f043 0201 	orr.w	r2, r3, #1
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e007      	b.n	80036d6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f003 0301 	and.w	r3, r3, #1
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d0dc      	beq.n	800368e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3710      	adds	r7, #16
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}

080036de <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80036de:	b480      	push	{r7}
 80036e0:	b083      	sub	sp, #12
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80036e6:	bf00      	nop
 80036e8:	370c      	adds	r7, #12
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bc80      	pop	{r7}
 80036ee:	4770      	bx	lr

080036f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b085      	sub	sp, #20
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f003 0307 	and.w	r3, r3, #7
 80036fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003700:	4b0c      	ldr	r3, [pc, #48]	; (8003734 <__NVIC_SetPriorityGrouping+0x44>)
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003706:	68ba      	ldr	r2, [r7, #8]
 8003708:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800370c:	4013      	ands	r3, r2
 800370e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003718:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800371c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003720:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003722:	4a04      	ldr	r2, [pc, #16]	; (8003734 <__NVIC_SetPriorityGrouping+0x44>)
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	60d3      	str	r3, [r2, #12]
}
 8003728:	bf00      	nop
 800372a:	3714      	adds	r7, #20
 800372c:	46bd      	mov	sp, r7
 800372e:	bc80      	pop	{r7}
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop
 8003734:	e000ed00 	.word	0xe000ed00

08003738 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003738:	b480      	push	{r7}
 800373a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800373c:	4b04      	ldr	r3, [pc, #16]	; (8003750 <__NVIC_GetPriorityGrouping+0x18>)
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	0a1b      	lsrs	r3, r3, #8
 8003742:	f003 0307 	and.w	r3, r3, #7
}
 8003746:	4618      	mov	r0, r3
 8003748:	46bd      	mov	sp, r7
 800374a:	bc80      	pop	{r7}
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop
 8003750:	e000ed00 	.word	0xe000ed00

08003754 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	4603      	mov	r3, r0
 800375c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800375e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003762:	2b00      	cmp	r3, #0
 8003764:	db0b      	blt.n	800377e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003766:	79fb      	ldrb	r3, [r7, #7]
 8003768:	f003 021f 	and.w	r2, r3, #31
 800376c:	4906      	ldr	r1, [pc, #24]	; (8003788 <__NVIC_EnableIRQ+0x34>)
 800376e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003772:	095b      	lsrs	r3, r3, #5
 8003774:	2001      	movs	r0, #1
 8003776:	fa00 f202 	lsl.w	r2, r0, r2
 800377a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800377e:	bf00      	nop
 8003780:	370c      	adds	r7, #12
 8003782:	46bd      	mov	sp, r7
 8003784:	bc80      	pop	{r7}
 8003786:	4770      	bx	lr
 8003788:	e000e100 	.word	0xe000e100

0800378c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	4603      	mov	r3, r0
 8003794:	6039      	str	r1, [r7, #0]
 8003796:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800379c:	2b00      	cmp	r3, #0
 800379e:	db0a      	blt.n	80037b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	b2da      	uxtb	r2, r3
 80037a4:	490c      	ldr	r1, [pc, #48]	; (80037d8 <__NVIC_SetPriority+0x4c>)
 80037a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037aa:	0112      	lsls	r2, r2, #4
 80037ac:	b2d2      	uxtb	r2, r2
 80037ae:	440b      	add	r3, r1
 80037b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037b4:	e00a      	b.n	80037cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	b2da      	uxtb	r2, r3
 80037ba:	4908      	ldr	r1, [pc, #32]	; (80037dc <__NVIC_SetPriority+0x50>)
 80037bc:	79fb      	ldrb	r3, [r7, #7]
 80037be:	f003 030f 	and.w	r3, r3, #15
 80037c2:	3b04      	subs	r3, #4
 80037c4:	0112      	lsls	r2, r2, #4
 80037c6:	b2d2      	uxtb	r2, r2
 80037c8:	440b      	add	r3, r1
 80037ca:	761a      	strb	r2, [r3, #24]
}
 80037cc:	bf00      	nop
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bc80      	pop	{r7}
 80037d4:	4770      	bx	lr
 80037d6:	bf00      	nop
 80037d8:	e000e100 	.word	0xe000e100
 80037dc:	e000ed00 	.word	0xe000ed00

080037e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b089      	sub	sp, #36	; 0x24
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	60b9      	str	r1, [r7, #8]
 80037ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f003 0307 	and.w	r3, r3, #7
 80037f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	f1c3 0307 	rsb	r3, r3, #7
 80037fa:	2b04      	cmp	r3, #4
 80037fc:	bf28      	it	cs
 80037fe:	2304      	movcs	r3, #4
 8003800:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	3304      	adds	r3, #4
 8003806:	2b06      	cmp	r3, #6
 8003808:	d902      	bls.n	8003810 <NVIC_EncodePriority+0x30>
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	3b03      	subs	r3, #3
 800380e:	e000      	b.n	8003812 <NVIC_EncodePriority+0x32>
 8003810:	2300      	movs	r3, #0
 8003812:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003814:	f04f 32ff 	mov.w	r2, #4294967295
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	fa02 f303 	lsl.w	r3, r2, r3
 800381e:	43da      	mvns	r2, r3
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	401a      	ands	r2, r3
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003828:	f04f 31ff 	mov.w	r1, #4294967295
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	fa01 f303 	lsl.w	r3, r1, r3
 8003832:	43d9      	mvns	r1, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003838:	4313      	orrs	r3, r2
         );
}
 800383a:	4618      	mov	r0, r3
 800383c:	3724      	adds	r7, #36	; 0x24
 800383e:	46bd      	mov	sp, r7
 8003840:	bc80      	pop	{r7}
 8003842:	4770      	bx	lr

08003844 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	3b01      	subs	r3, #1
 8003850:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003854:	d301      	bcc.n	800385a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003856:	2301      	movs	r3, #1
 8003858:	e00f      	b.n	800387a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800385a:	4a0a      	ldr	r2, [pc, #40]	; (8003884 <SysTick_Config+0x40>)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	3b01      	subs	r3, #1
 8003860:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003862:	210f      	movs	r1, #15
 8003864:	f04f 30ff 	mov.w	r0, #4294967295
 8003868:	f7ff ff90 	bl	800378c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800386c:	4b05      	ldr	r3, [pc, #20]	; (8003884 <SysTick_Config+0x40>)
 800386e:	2200      	movs	r2, #0
 8003870:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003872:	4b04      	ldr	r3, [pc, #16]	; (8003884 <SysTick_Config+0x40>)
 8003874:	2207      	movs	r2, #7
 8003876:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003878:	2300      	movs	r3, #0
}
 800387a:	4618      	mov	r0, r3
 800387c:	3708      	adds	r7, #8
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	e000e010 	.word	0xe000e010

08003888 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f7ff ff2d 	bl	80036f0 <__NVIC_SetPriorityGrouping>
}
 8003896:	bf00      	nop
 8003898:	3708      	adds	r7, #8
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}

0800389e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800389e:	b580      	push	{r7, lr}
 80038a0:	b086      	sub	sp, #24
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	4603      	mov	r3, r0
 80038a6:	60b9      	str	r1, [r7, #8]
 80038a8:	607a      	str	r2, [r7, #4]
 80038aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80038ac:	2300      	movs	r3, #0
 80038ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038b0:	f7ff ff42 	bl	8003738 <__NVIC_GetPriorityGrouping>
 80038b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	68b9      	ldr	r1, [r7, #8]
 80038ba:	6978      	ldr	r0, [r7, #20]
 80038bc:	f7ff ff90 	bl	80037e0 <NVIC_EncodePriority>
 80038c0:	4602      	mov	r2, r0
 80038c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038c6:	4611      	mov	r1, r2
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7ff ff5f 	bl	800378c <__NVIC_SetPriority>
}
 80038ce:	bf00      	nop
 80038d0:	3718      	adds	r7, #24
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}

080038d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b082      	sub	sp, #8
 80038da:	af00      	add	r7, sp, #0
 80038dc:	4603      	mov	r3, r0
 80038de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038e4:	4618      	mov	r0, r3
 80038e6:	f7ff ff35 	bl	8003754 <__NVIC_EnableIRQ>
}
 80038ea:	bf00      	nop
 80038ec:	3708      	adds	r7, #8
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038f2:	b580      	push	{r7, lr}
 80038f4:	b082      	sub	sp, #8
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f7ff ffa2 	bl	8003844 <SysTick_Config>
 8003900:	4603      	mov	r3, r0
}
 8003902:	4618      	mov	r0, r3
 8003904:	3708      	adds	r7, #8
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}

0800390a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800390a:	b480      	push	{r7}
 800390c:	b085      	sub	sp, #20
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003912:	2300      	movs	r3, #0
 8003914:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800391c:	b2db      	uxtb	r3, r3
 800391e:	2b02      	cmp	r3, #2
 8003920:	d008      	beq.n	8003934 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2204      	movs	r2, #4
 8003926:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e020      	b.n	8003976 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f022 020e 	bic.w	r2, r2, #14
 8003942:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f022 0201 	bic.w	r2, r2, #1
 8003952:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800395c:	2101      	movs	r1, #1
 800395e:	fa01 f202 	lsl.w	r2, r1, r2
 8003962:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003974:	7bfb      	ldrb	r3, [r7, #15]
}
 8003976:	4618      	mov	r0, r3
 8003978:	3714      	adds	r7, #20
 800397a:	46bd      	mov	sp, r7
 800397c:	bc80      	pop	{r7}
 800397e:	4770      	bx	lr

08003980 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003988:	2300      	movs	r3, #0
 800398a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003992:	b2db      	uxtb	r3, r3
 8003994:	2b02      	cmp	r3, #2
 8003996:	d005      	beq.n	80039a4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2204      	movs	r2, #4
 800399c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	73fb      	strb	r3, [r7, #15]
 80039a2:	e051      	b.n	8003a48 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f022 020e 	bic.w	r2, r2, #14
 80039b2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f022 0201 	bic.w	r2, r2, #1
 80039c2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a22      	ldr	r2, [pc, #136]	; (8003a54 <HAL_DMA_Abort_IT+0xd4>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d029      	beq.n	8003a22 <HAL_DMA_Abort_IT+0xa2>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a21      	ldr	r2, [pc, #132]	; (8003a58 <HAL_DMA_Abort_IT+0xd8>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d022      	beq.n	8003a1e <HAL_DMA_Abort_IT+0x9e>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a1f      	ldr	r2, [pc, #124]	; (8003a5c <HAL_DMA_Abort_IT+0xdc>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d01a      	beq.n	8003a18 <HAL_DMA_Abort_IT+0x98>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a1e      	ldr	r2, [pc, #120]	; (8003a60 <HAL_DMA_Abort_IT+0xe0>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d012      	beq.n	8003a12 <HAL_DMA_Abort_IT+0x92>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a1c      	ldr	r2, [pc, #112]	; (8003a64 <HAL_DMA_Abort_IT+0xe4>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d00a      	beq.n	8003a0c <HAL_DMA_Abort_IT+0x8c>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a1b      	ldr	r2, [pc, #108]	; (8003a68 <HAL_DMA_Abort_IT+0xe8>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d102      	bne.n	8003a06 <HAL_DMA_Abort_IT+0x86>
 8003a00:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003a04:	e00e      	b.n	8003a24 <HAL_DMA_Abort_IT+0xa4>
 8003a06:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a0a:	e00b      	b.n	8003a24 <HAL_DMA_Abort_IT+0xa4>
 8003a0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a10:	e008      	b.n	8003a24 <HAL_DMA_Abort_IT+0xa4>
 8003a12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a16:	e005      	b.n	8003a24 <HAL_DMA_Abort_IT+0xa4>
 8003a18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a1c:	e002      	b.n	8003a24 <HAL_DMA_Abort_IT+0xa4>
 8003a1e:	2310      	movs	r3, #16
 8003a20:	e000      	b.n	8003a24 <HAL_DMA_Abort_IT+0xa4>
 8003a22:	2301      	movs	r3, #1
 8003a24:	4a11      	ldr	r2, [pc, #68]	; (8003a6c <HAL_DMA_Abort_IT+0xec>)
 8003a26:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d003      	beq.n	8003a48 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	4798      	blx	r3
    } 
  }
  return status;
 8003a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3710      	adds	r7, #16
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	40020008 	.word	0x40020008
 8003a58:	4002001c 	.word	0x4002001c
 8003a5c:	40020030 	.word	0x40020030
 8003a60:	40020044 	.word	0x40020044
 8003a64:	40020058 	.word	0x40020058
 8003a68:	4002006c 	.word	0x4002006c
 8003a6c:	40020000 	.word	0x40020000

08003a70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b08b      	sub	sp, #44	; 0x2c
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a82:	e169      	b.n	8003d58 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003a84:	2201      	movs	r2, #1
 8003a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a88:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	69fa      	ldr	r2, [r7, #28]
 8003a94:	4013      	ands	r3, r2
 8003a96:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003a98:	69ba      	ldr	r2, [r7, #24]
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	f040 8158 	bne.w	8003d52 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	4a9a      	ldr	r2, [pc, #616]	; (8003d10 <HAL_GPIO_Init+0x2a0>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d05e      	beq.n	8003b6a <HAL_GPIO_Init+0xfa>
 8003aac:	4a98      	ldr	r2, [pc, #608]	; (8003d10 <HAL_GPIO_Init+0x2a0>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d875      	bhi.n	8003b9e <HAL_GPIO_Init+0x12e>
 8003ab2:	4a98      	ldr	r2, [pc, #608]	; (8003d14 <HAL_GPIO_Init+0x2a4>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d058      	beq.n	8003b6a <HAL_GPIO_Init+0xfa>
 8003ab8:	4a96      	ldr	r2, [pc, #600]	; (8003d14 <HAL_GPIO_Init+0x2a4>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d86f      	bhi.n	8003b9e <HAL_GPIO_Init+0x12e>
 8003abe:	4a96      	ldr	r2, [pc, #600]	; (8003d18 <HAL_GPIO_Init+0x2a8>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d052      	beq.n	8003b6a <HAL_GPIO_Init+0xfa>
 8003ac4:	4a94      	ldr	r2, [pc, #592]	; (8003d18 <HAL_GPIO_Init+0x2a8>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d869      	bhi.n	8003b9e <HAL_GPIO_Init+0x12e>
 8003aca:	4a94      	ldr	r2, [pc, #592]	; (8003d1c <HAL_GPIO_Init+0x2ac>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d04c      	beq.n	8003b6a <HAL_GPIO_Init+0xfa>
 8003ad0:	4a92      	ldr	r2, [pc, #584]	; (8003d1c <HAL_GPIO_Init+0x2ac>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d863      	bhi.n	8003b9e <HAL_GPIO_Init+0x12e>
 8003ad6:	4a92      	ldr	r2, [pc, #584]	; (8003d20 <HAL_GPIO_Init+0x2b0>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d046      	beq.n	8003b6a <HAL_GPIO_Init+0xfa>
 8003adc:	4a90      	ldr	r2, [pc, #576]	; (8003d20 <HAL_GPIO_Init+0x2b0>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d85d      	bhi.n	8003b9e <HAL_GPIO_Init+0x12e>
 8003ae2:	2b12      	cmp	r3, #18
 8003ae4:	d82a      	bhi.n	8003b3c <HAL_GPIO_Init+0xcc>
 8003ae6:	2b12      	cmp	r3, #18
 8003ae8:	d859      	bhi.n	8003b9e <HAL_GPIO_Init+0x12e>
 8003aea:	a201      	add	r2, pc, #4	; (adr r2, 8003af0 <HAL_GPIO_Init+0x80>)
 8003aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003af0:	08003b6b 	.word	0x08003b6b
 8003af4:	08003b45 	.word	0x08003b45
 8003af8:	08003b57 	.word	0x08003b57
 8003afc:	08003b99 	.word	0x08003b99
 8003b00:	08003b9f 	.word	0x08003b9f
 8003b04:	08003b9f 	.word	0x08003b9f
 8003b08:	08003b9f 	.word	0x08003b9f
 8003b0c:	08003b9f 	.word	0x08003b9f
 8003b10:	08003b9f 	.word	0x08003b9f
 8003b14:	08003b9f 	.word	0x08003b9f
 8003b18:	08003b9f 	.word	0x08003b9f
 8003b1c:	08003b9f 	.word	0x08003b9f
 8003b20:	08003b9f 	.word	0x08003b9f
 8003b24:	08003b9f 	.word	0x08003b9f
 8003b28:	08003b9f 	.word	0x08003b9f
 8003b2c:	08003b9f 	.word	0x08003b9f
 8003b30:	08003b9f 	.word	0x08003b9f
 8003b34:	08003b4d 	.word	0x08003b4d
 8003b38:	08003b61 	.word	0x08003b61
 8003b3c:	4a79      	ldr	r2, [pc, #484]	; (8003d24 <HAL_GPIO_Init+0x2b4>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d013      	beq.n	8003b6a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003b42:	e02c      	b.n	8003b9e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	623b      	str	r3, [r7, #32]
          break;
 8003b4a:	e029      	b.n	8003ba0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	3304      	adds	r3, #4
 8003b52:	623b      	str	r3, [r7, #32]
          break;
 8003b54:	e024      	b.n	8003ba0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	3308      	adds	r3, #8
 8003b5c:	623b      	str	r3, [r7, #32]
          break;
 8003b5e:	e01f      	b.n	8003ba0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	330c      	adds	r3, #12
 8003b66:	623b      	str	r3, [r7, #32]
          break;
 8003b68:	e01a      	b.n	8003ba0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d102      	bne.n	8003b78 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003b72:	2304      	movs	r3, #4
 8003b74:	623b      	str	r3, [r7, #32]
          break;
 8003b76:	e013      	b.n	8003ba0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d105      	bne.n	8003b8c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003b80:	2308      	movs	r3, #8
 8003b82:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	69fa      	ldr	r2, [r7, #28]
 8003b88:	611a      	str	r2, [r3, #16]
          break;
 8003b8a:	e009      	b.n	8003ba0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003b8c:	2308      	movs	r3, #8
 8003b8e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	69fa      	ldr	r2, [r7, #28]
 8003b94:	615a      	str	r2, [r3, #20]
          break;
 8003b96:	e003      	b.n	8003ba0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	623b      	str	r3, [r7, #32]
          break;
 8003b9c:	e000      	b.n	8003ba0 <HAL_GPIO_Init+0x130>
          break;
 8003b9e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	2bff      	cmp	r3, #255	; 0xff
 8003ba4:	d801      	bhi.n	8003baa <HAL_GPIO_Init+0x13a>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	e001      	b.n	8003bae <HAL_GPIO_Init+0x13e>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	3304      	adds	r3, #4
 8003bae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	2bff      	cmp	r3, #255	; 0xff
 8003bb4:	d802      	bhi.n	8003bbc <HAL_GPIO_Init+0x14c>
 8003bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	e002      	b.n	8003bc2 <HAL_GPIO_Init+0x152>
 8003bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bbe:	3b08      	subs	r3, #8
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	210f      	movs	r1, #15
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8003bd0:	43db      	mvns	r3, r3
 8003bd2:	401a      	ands	r2, r3
 8003bd4:	6a39      	ldr	r1, [r7, #32]
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8003bdc:	431a      	orrs	r2, r3
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	f000 80b1 	beq.w	8003d52 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003bf0:	4b4d      	ldr	r3, [pc, #308]	; (8003d28 <HAL_GPIO_Init+0x2b8>)
 8003bf2:	699b      	ldr	r3, [r3, #24]
 8003bf4:	4a4c      	ldr	r2, [pc, #304]	; (8003d28 <HAL_GPIO_Init+0x2b8>)
 8003bf6:	f043 0301 	orr.w	r3, r3, #1
 8003bfa:	6193      	str	r3, [r2, #24]
 8003bfc:	4b4a      	ldr	r3, [pc, #296]	; (8003d28 <HAL_GPIO_Init+0x2b8>)
 8003bfe:	699b      	ldr	r3, [r3, #24]
 8003c00:	f003 0301 	and.w	r3, r3, #1
 8003c04:	60bb      	str	r3, [r7, #8]
 8003c06:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003c08:	4a48      	ldr	r2, [pc, #288]	; (8003d2c <HAL_GPIO_Init+0x2bc>)
 8003c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0c:	089b      	lsrs	r3, r3, #2
 8003c0e:	3302      	adds	r3, #2
 8003c10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c14:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c18:	f003 0303 	and.w	r3, r3, #3
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	220f      	movs	r2, #15
 8003c20:	fa02 f303 	lsl.w	r3, r2, r3
 8003c24:	43db      	mvns	r3, r3
 8003c26:	68fa      	ldr	r2, [r7, #12]
 8003c28:	4013      	ands	r3, r2
 8003c2a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4a40      	ldr	r2, [pc, #256]	; (8003d30 <HAL_GPIO_Init+0x2c0>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d013      	beq.n	8003c5c <HAL_GPIO_Init+0x1ec>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a3f      	ldr	r2, [pc, #252]	; (8003d34 <HAL_GPIO_Init+0x2c4>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d00d      	beq.n	8003c58 <HAL_GPIO_Init+0x1e8>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4a3e      	ldr	r2, [pc, #248]	; (8003d38 <HAL_GPIO_Init+0x2c8>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d007      	beq.n	8003c54 <HAL_GPIO_Init+0x1e4>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	4a3d      	ldr	r2, [pc, #244]	; (8003d3c <HAL_GPIO_Init+0x2cc>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d101      	bne.n	8003c50 <HAL_GPIO_Init+0x1e0>
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	e006      	b.n	8003c5e <HAL_GPIO_Init+0x1ee>
 8003c50:	2304      	movs	r3, #4
 8003c52:	e004      	b.n	8003c5e <HAL_GPIO_Init+0x1ee>
 8003c54:	2302      	movs	r3, #2
 8003c56:	e002      	b.n	8003c5e <HAL_GPIO_Init+0x1ee>
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e000      	b.n	8003c5e <HAL_GPIO_Init+0x1ee>
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c60:	f002 0203 	and.w	r2, r2, #3
 8003c64:	0092      	lsls	r2, r2, #2
 8003c66:	4093      	lsls	r3, r2
 8003c68:	68fa      	ldr	r2, [r7, #12]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003c6e:	492f      	ldr	r1, [pc, #188]	; (8003d2c <HAL_GPIO_Init+0x2bc>)
 8003c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c72:	089b      	lsrs	r3, r3, #2
 8003c74:	3302      	adds	r3, #2
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d006      	beq.n	8003c96 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003c88:	4b2d      	ldr	r3, [pc, #180]	; (8003d40 <HAL_GPIO_Init+0x2d0>)
 8003c8a:	689a      	ldr	r2, [r3, #8]
 8003c8c:	492c      	ldr	r1, [pc, #176]	; (8003d40 <HAL_GPIO_Init+0x2d0>)
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	608b      	str	r3, [r1, #8]
 8003c94:	e006      	b.n	8003ca4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003c96:	4b2a      	ldr	r3, [pc, #168]	; (8003d40 <HAL_GPIO_Init+0x2d0>)
 8003c98:	689a      	ldr	r2, [r3, #8]
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	43db      	mvns	r3, r3
 8003c9e:	4928      	ldr	r1, [pc, #160]	; (8003d40 <HAL_GPIO_Init+0x2d0>)
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d006      	beq.n	8003cbe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003cb0:	4b23      	ldr	r3, [pc, #140]	; (8003d40 <HAL_GPIO_Init+0x2d0>)
 8003cb2:	68da      	ldr	r2, [r3, #12]
 8003cb4:	4922      	ldr	r1, [pc, #136]	; (8003d40 <HAL_GPIO_Init+0x2d0>)
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	60cb      	str	r3, [r1, #12]
 8003cbc:	e006      	b.n	8003ccc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003cbe:	4b20      	ldr	r3, [pc, #128]	; (8003d40 <HAL_GPIO_Init+0x2d0>)
 8003cc0:	68da      	ldr	r2, [r3, #12]
 8003cc2:	69bb      	ldr	r3, [r7, #24]
 8003cc4:	43db      	mvns	r3, r3
 8003cc6:	491e      	ldr	r1, [pc, #120]	; (8003d40 <HAL_GPIO_Init+0x2d0>)
 8003cc8:	4013      	ands	r3, r2
 8003cca:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d006      	beq.n	8003ce6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003cd8:	4b19      	ldr	r3, [pc, #100]	; (8003d40 <HAL_GPIO_Init+0x2d0>)
 8003cda:	685a      	ldr	r2, [r3, #4]
 8003cdc:	4918      	ldr	r1, [pc, #96]	; (8003d40 <HAL_GPIO_Init+0x2d0>)
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	604b      	str	r3, [r1, #4]
 8003ce4:	e006      	b.n	8003cf4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003ce6:	4b16      	ldr	r3, [pc, #88]	; (8003d40 <HAL_GPIO_Init+0x2d0>)
 8003ce8:	685a      	ldr	r2, [r3, #4]
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	43db      	mvns	r3, r3
 8003cee:	4914      	ldr	r1, [pc, #80]	; (8003d40 <HAL_GPIO_Init+0x2d0>)
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d021      	beq.n	8003d44 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003d00:	4b0f      	ldr	r3, [pc, #60]	; (8003d40 <HAL_GPIO_Init+0x2d0>)
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	490e      	ldr	r1, [pc, #56]	; (8003d40 <HAL_GPIO_Init+0x2d0>)
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	600b      	str	r3, [r1, #0]
 8003d0c:	e021      	b.n	8003d52 <HAL_GPIO_Init+0x2e2>
 8003d0e:	bf00      	nop
 8003d10:	10320000 	.word	0x10320000
 8003d14:	10310000 	.word	0x10310000
 8003d18:	10220000 	.word	0x10220000
 8003d1c:	10210000 	.word	0x10210000
 8003d20:	10120000 	.word	0x10120000
 8003d24:	10110000 	.word	0x10110000
 8003d28:	40021000 	.word	0x40021000
 8003d2c:	40010000 	.word	0x40010000
 8003d30:	40010800 	.word	0x40010800
 8003d34:	40010c00 	.word	0x40010c00
 8003d38:	40011000 	.word	0x40011000
 8003d3c:	40011400 	.word	0x40011400
 8003d40:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003d44:	4b0b      	ldr	r3, [pc, #44]	; (8003d74 <HAL_GPIO_Init+0x304>)
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	43db      	mvns	r3, r3
 8003d4c:	4909      	ldr	r1, [pc, #36]	; (8003d74 <HAL_GPIO_Init+0x304>)
 8003d4e:	4013      	ands	r3, r2
 8003d50:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d54:	3301      	adds	r3, #1
 8003d56:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5e:	fa22 f303 	lsr.w	r3, r2, r3
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	f47f ae8e 	bne.w	8003a84 <HAL_GPIO_Init+0x14>
  }
}
 8003d68:	bf00      	nop
 8003d6a:	bf00      	nop
 8003d6c:	372c      	adds	r7, #44	; 0x2c
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bc80      	pop	{r7}
 8003d72:	4770      	bx	lr
 8003d74:	40010400 	.word	0x40010400

08003d78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b085      	sub	sp, #20
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	460b      	mov	r3, r1
 8003d82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	689a      	ldr	r2, [r3, #8]
 8003d88:	887b      	ldrh	r3, [r7, #2]
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d002      	beq.n	8003d96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003d90:	2301      	movs	r3, #1
 8003d92:	73fb      	strb	r3, [r7, #15]
 8003d94:	e001      	b.n	8003d9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d96:	2300      	movs	r3, #0
 8003d98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3714      	adds	r7, #20
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bc80      	pop	{r7}
 8003da4:	4770      	bx	lr

08003da6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003da6:	b480      	push	{r7}
 8003da8:	b083      	sub	sp, #12
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
 8003dae:	460b      	mov	r3, r1
 8003db0:	807b      	strh	r3, [r7, #2]
 8003db2:	4613      	mov	r3, r2
 8003db4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003db6:	787b      	ldrb	r3, [r7, #1]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d003      	beq.n	8003dc4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003dbc:	887a      	ldrh	r2, [r7, #2]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003dc2:	e003      	b.n	8003dcc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003dc4:	887b      	ldrh	r3, [r7, #2]
 8003dc6:	041a      	lsls	r2, r3, #16
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	611a      	str	r2, [r3, #16]
}
 8003dcc:	bf00      	nop
 8003dce:	370c      	adds	r7, #12
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bc80      	pop	{r7}
 8003dd4:	4770      	bx	lr
	...

08003dd8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d101      	bne.n	8003dea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e12b      	b.n	8004042 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d106      	bne.n	8003e04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f7fe fde4 	bl	80029cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2224      	movs	r2, #36	; 0x24
 8003e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f022 0201 	bic.w	r2, r2, #1
 8003e1a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e2a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e3a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003e3c:	f001 f842 	bl	8004ec4 <HAL_RCC_GetPCLK1Freq>
 8003e40:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	4a81      	ldr	r2, [pc, #516]	; (800404c <HAL_I2C_Init+0x274>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d807      	bhi.n	8003e5c <HAL_I2C_Init+0x84>
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	4a80      	ldr	r2, [pc, #512]	; (8004050 <HAL_I2C_Init+0x278>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	bf94      	ite	ls
 8003e54:	2301      	movls	r3, #1
 8003e56:	2300      	movhi	r3, #0
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	e006      	b.n	8003e6a <HAL_I2C_Init+0x92>
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	4a7d      	ldr	r2, [pc, #500]	; (8004054 <HAL_I2C_Init+0x27c>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	bf94      	ite	ls
 8003e64:	2301      	movls	r3, #1
 8003e66:	2300      	movhi	r3, #0
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d001      	beq.n	8003e72 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e0e7      	b.n	8004042 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	4a78      	ldr	r2, [pc, #480]	; (8004058 <HAL_I2C_Init+0x280>)
 8003e76:	fba2 2303 	umull	r2, r3, r2, r3
 8003e7a:	0c9b      	lsrs	r3, r3, #18
 8003e7c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	68ba      	ldr	r2, [r7, #8]
 8003e8e:	430a      	orrs	r2, r1
 8003e90:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	6a1b      	ldr	r3, [r3, #32]
 8003e98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	4a6a      	ldr	r2, [pc, #424]	; (800404c <HAL_I2C_Init+0x274>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d802      	bhi.n	8003eac <HAL_I2C_Init+0xd4>
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	e009      	b.n	8003ec0 <HAL_I2C_Init+0xe8>
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003eb2:	fb02 f303 	mul.w	r3, r2, r3
 8003eb6:	4a69      	ldr	r2, [pc, #420]	; (800405c <HAL_I2C_Init+0x284>)
 8003eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8003ebc:	099b      	lsrs	r3, r3, #6
 8003ebe:	3301      	adds	r3, #1
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	6812      	ldr	r2, [r2, #0]
 8003ec4:	430b      	orrs	r3, r1
 8003ec6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	69db      	ldr	r3, [r3, #28]
 8003ece:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003ed2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	495c      	ldr	r1, [pc, #368]	; (800404c <HAL_I2C_Init+0x274>)
 8003edc:	428b      	cmp	r3, r1
 8003ede:	d819      	bhi.n	8003f14 <HAL_I2C_Init+0x13c>
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	1e59      	subs	r1, r3, #1
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	005b      	lsls	r3, r3, #1
 8003eea:	fbb1 f3f3 	udiv	r3, r1, r3
 8003eee:	1c59      	adds	r1, r3, #1
 8003ef0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003ef4:	400b      	ands	r3, r1
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d00a      	beq.n	8003f10 <HAL_I2C_Init+0x138>
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	1e59      	subs	r1, r3, #1
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	005b      	lsls	r3, r3, #1
 8003f04:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f08:	3301      	adds	r3, #1
 8003f0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f0e:	e051      	b.n	8003fb4 <HAL_I2C_Init+0x1dc>
 8003f10:	2304      	movs	r3, #4
 8003f12:	e04f      	b.n	8003fb4 <HAL_I2C_Init+0x1dc>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d111      	bne.n	8003f40 <HAL_I2C_Init+0x168>
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	1e58      	subs	r0, r3, #1
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6859      	ldr	r1, [r3, #4]
 8003f24:	460b      	mov	r3, r1
 8003f26:	005b      	lsls	r3, r3, #1
 8003f28:	440b      	add	r3, r1
 8003f2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f2e:	3301      	adds	r3, #1
 8003f30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	bf0c      	ite	eq
 8003f38:	2301      	moveq	r3, #1
 8003f3a:	2300      	movne	r3, #0
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	e012      	b.n	8003f66 <HAL_I2C_Init+0x18e>
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	1e58      	subs	r0, r3, #1
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6859      	ldr	r1, [r3, #4]
 8003f48:	460b      	mov	r3, r1
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	440b      	add	r3, r1
 8003f4e:	0099      	lsls	r1, r3, #2
 8003f50:	440b      	add	r3, r1
 8003f52:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f56:	3301      	adds	r3, #1
 8003f58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	bf0c      	ite	eq
 8003f60:	2301      	moveq	r3, #1
 8003f62:	2300      	movne	r3, #0
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d001      	beq.n	8003f6e <HAL_I2C_Init+0x196>
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e022      	b.n	8003fb4 <HAL_I2C_Init+0x1dc>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d10e      	bne.n	8003f94 <HAL_I2C_Init+0x1bc>
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	1e58      	subs	r0, r3, #1
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6859      	ldr	r1, [r3, #4]
 8003f7e:	460b      	mov	r3, r1
 8003f80:	005b      	lsls	r3, r3, #1
 8003f82:	440b      	add	r3, r1
 8003f84:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f88:	3301      	adds	r3, #1
 8003f8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f92:	e00f      	b.n	8003fb4 <HAL_I2C_Init+0x1dc>
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	1e58      	subs	r0, r3, #1
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6859      	ldr	r1, [r3, #4]
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	440b      	add	r3, r1
 8003fa2:	0099      	lsls	r1, r3, #2
 8003fa4:	440b      	add	r3, r1
 8003fa6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003faa:	3301      	adds	r3, #1
 8003fac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fb0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003fb4:	6879      	ldr	r1, [r7, #4]
 8003fb6:	6809      	ldr	r1, [r1, #0]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	69da      	ldr	r2, [r3, #28]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a1b      	ldr	r3, [r3, #32]
 8003fce:	431a      	orrs	r2, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	430a      	orrs	r2, r1
 8003fd6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003fe2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	6911      	ldr	r1, [r2, #16]
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	68d2      	ldr	r2, [r2, #12]
 8003fee:	4311      	orrs	r1, r2
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	6812      	ldr	r2, [r2, #0]
 8003ff4:	430b      	orrs	r3, r1
 8003ff6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	695a      	ldr	r2, [r3, #20]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	699b      	ldr	r3, [r3, #24]
 800400a:	431a      	orrs	r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	430a      	orrs	r2, r1
 8004012:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f042 0201 	orr.w	r2, r2, #1
 8004022:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2220      	movs	r2, #32
 800402e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	3710      	adds	r7, #16
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	000186a0 	.word	0x000186a0
 8004050:	001e847f 	.word	0x001e847f
 8004054:	003d08ff 	.word	0x003d08ff
 8004058:	431bde83 	.word	0x431bde83
 800405c:	10624dd3 	.word	0x10624dd3

08004060 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b088      	sub	sp, #32
 8004064:	af02      	add	r7, sp, #8
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	4608      	mov	r0, r1
 800406a:	4611      	mov	r1, r2
 800406c:	461a      	mov	r2, r3
 800406e:	4603      	mov	r3, r0
 8004070:	817b      	strh	r3, [r7, #10]
 8004072:	460b      	mov	r3, r1
 8004074:	813b      	strh	r3, [r7, #8]
 8004076:	4613      	mov	r3, r2
 8004078:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800407a:	f7fe ff0d 	bl	8002e98 <HAL_GetTick>
 800407e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004086:	b2db      	uxtb	r3, r3
 8004088:	2b20      	cmp	r3, #32
 800408a:	f040 80d9 	bne.w	8004240 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	9300      	str	r3, [sp, #0]
 8004092:	2319      	movs	r3, #25
 8004094:	2201      	movs	r2, #1
 8004096:	496d      	ldr	r1, [pc, #436]	; (800424c <HAL_I2C_Mem_Write+0x1ec>)
 8004098:	68f8      	ldr	r0, [r7, #12]
 800409a:	f000 f971 	bl	8004380 <I2C_WaitOnFlagUntilTimeout>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d001      	beq.n	80040a8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80040a4:	2302      	movs	r3, #2
 80040a6:	e0cc      	b.n	8004242 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d101      	bne.n	80040b6 <HAL_I2C_Mem_Write+0x56>
 80040b2:	2302      	movs	r3, #2
 80040b4:	e0c5      	b.n	8004242 <HAL_I2C_Mem_Write+0x1e2>
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2201      	movs	r2, #1
 80040ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0301 	and.w	r3, r3, #1
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d007      	beq.n	80040dc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f042 0201 	orr.w	r2, r2, #1
 80040da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2221      	movs	r2, #33	; 0x21
 80040f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2240      	movs	r2, #64	; 0x40
 80040f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2200      	movs	r2, #0
 8004100:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6a3a      	ldr	r2, [r7, #32]
 8004106:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800410c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004112:	b29a      	uxth	r2, r3
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	4a4d      	ldr	r2, [pc, #308]	; (8004250 <HAL_I2C_Mem_Write+0x1f0>)
 800411c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800411e:	88f8      	ldrh	r0, [r7, #6]
 8004120:	893a      	ldrh	r2, [r7, #8]
 8004122:	8979      	ldrh	r1, [r7, #10]
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	9301      	str	r3, [sp, #4]
 8004128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800412a:	9300      	str	r3, [sp, #0]
 800412c:	4603      	mov	r3, r0
 800412e:	68f8      	ldr	r0, [r7, #12]
 8004130:	f000 f890 	bl	8004254 <I2C_RequestMemoryWrite>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d052      	beq.n	80041e0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e081      	b.n	8004242 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800413e:	697a      	ldr	r2, [r7, #20]
 8004140:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004142:	68f8      	ldr	r0, [r7, #12]
 8004144:	f000 fa36 	bl	80045b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00d      	beq.n	800416a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004152:	2b04      	cmp	r3, #4
 8004154:	d107      	bne.n	8004166 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004164:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e06b      	b.n	8004242 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416e:	781a      	ldrb	r2, [r3, #0]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417a:	1c5a      	adds	r2, r3, #1
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004184:	3b01      	subs	r3, #1
 8004186:	b29a      	uxth	r2, r3
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004190:	b29b      	uxth	r3, r3
 8004192:	3b01      	subs	r3, #1
 8004194:	b29a      	uxth	r2, r3
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	695b      	ldr	r3, [r3, #20]
 80041a0:	f003 0304 	and.w	r3, r3, #4
 80041a4:	2b04      	cmp	r3, #4
 80041a6:	d11b      	bne.n	80041e0 <HAL_I2C_Mem_Write+0x180>
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d017      	beq.n	80041e0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b4:	781a      	ldrb	r2, [r3, #0]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c0:	1c5a      	adds	r2, r3, #1
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ca:	3b01      	subs	r3, #1
 80041cc:	b29a      	uxth	r2, r3
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	3b01      	subs	r3, #1
 80041da:	b29a      	uxth	r2, r3
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d1aa      	bne.n	800413e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041e8:	697a      	ldr	r2, [r7, #20]
 80041ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041ec:	68f8      	ldr	r0, [r7, #12]
 80041ee:	f000 fa29 	bl	8004644 <I2C_WaitOnBTFFlagUntilTimeout>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d00d      	beq.n	8004214 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fc:	2b04      	cmp	r3, #4
 80041fe:	d107      	bne.n	8004210 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800420e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e016      	b.n	8004242 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004222:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2220      	movs	r2, #32
 8004228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2200      	movs	r2, #0
 8004230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2200      	movs	r2, #0
 8004238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800423c:	2300      	movs	r3, #0
 800423e:	e000      	b.n	8004242 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004240:	2302      	movs	r3, #2
  }
}
 8004242:	4618      	mov	r0, r3
 8004244:	3718      	adds	r7, #24
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	00100002 	.word	0x00100002
 8004250:	ffff0000 	.word	0xffff0000

08004254 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b088      	sub	sp, #32
 8004258:	af02      	add	r7, sp, #8
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	4608      	mov	r0, r1
 800425e:	4611      	mov	r1, r2
 8004260:	461a      	mov	r2, r3
 8004262:	4603      	mov	r3, r0
 8004264:	817b      	strh	r3, [r7, #10]
 8004266:	460b      	mov	r3, r1
 8004268:	813b      	strh	r3, [r7, #8]
 800426a:	4613      	mov	r3, r2
 800426c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800427c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800427e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004280:	9300      	str	r3, [sp, #0]
 8004282:	6a3b      	ldr	r3, [r7, #32]
 8004284:	2200      	movs	r2, #0
 8004286:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800428a:	68f8      	ldr	r0, [r7, #12]
 800428c:	f000 f878 	bl	8004380 <I2C_WaitOnFlagUntilTimeout>
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d00d      	beq.n	80042b2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042a4:	d103      	bne.n	80042ae <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042ac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e05f      	b.n	8004372 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80042b2:	897b      	ldrh	r3, [r7, #10]
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	461a      	mov	r2, r3
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80042c0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c4:	6a3a      	ldr	r2, [r7, #32]
 80042c6:	492d      	ldr	r1, [pc, #180]	; (800437c <I2C_RequestMemoryWrite+0x128>)
 80042c8:	68f8      	ldr	r0, [r7, #12]
 80042ca:	f000 f8d3 	bl	8004474 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d001      	beq.n	80042d8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e04c      	b.n	8004372 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042d8:	2300      	movs	r3, #0
 80042da:	617b      	str	r3, [r7, #20]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	695b      	ldr	r3, [r3, #20]
 80042e2:	617b      	str	r3, [r7, #20]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	699b      	ldr	r3, [r3, #24]
 80042ea:	617b      	str	r3, [r7, #20]
 80042ec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042f0:	6a39      	ldr	r1, [r7, #32]
 80042f2:	68f8      	ldr	r0, [r7, #12]
 80042f4:	f000 f95e 	bl	80045b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d00d      	beq.n	800431a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004302:	2b04      	cmp	r3, #4
 8004304:	d107      	bne.n	8004316 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004314:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e02b      	b.n	8004372 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800431a:	88fb      	ldrh	r3, [r7, #6]
 800431c:	2b01      	cmp	r3, #1
 800431e:	d105      	bne.n	800432c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004320:	893b      	ldrh	r3, [r7, #8]
 8004322:	b2da      	uxtb	r2, r3
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	611a      	str	r2, [r3, #16]
 800432a:	e021      	b.n	8004370 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800432c:	893b      	ldrh	r3, [r7, #8]
 800432e:	0a1b      	lsrs	r3, r3, #8
 8004330:	b29b      	uxth	r3, r3
 8004332:	b2da      	uxtb	r2, r3
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800433a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800433c:	6a39      	ldr	r1, [r7, #32]
 800433e:	68f8      	ldr	r0, [r7, #12]
 8004340:	f000 f938 	bl	80045b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d00d      	beq.n	8004366 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434e:	2b04      	cmp	r3, #4
 8004350:	d107      	bne.n	8004362 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004360:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e005      	b.n	8004372 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004366:	893b      	ldrh	r3, [r7, #8]
 8004368:	b2da      	uxtb	r2, r3
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	3718      	adds	r7, #24
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	00010002 	.word	0x00010002

08004380 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	60b9      	str	r1, [r7, #8]
 800438a:	603b      	str	r3, [r7, #0]
 800438c:	4613      	mov	r3, r2
 800438e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004390:	e048      	b.n	8004424 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004398:	d044      	beq.n	8004424 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800439a:	f7fe fd7d 	bl	8002e98 <HAL_GetTick>
 800439e:	4602      	mov	r2, r0
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	683a      	ldr	r2, [r7, #0]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d302      	bcc.n	80043b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d139      	bne.n	8004424 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	0c1b      	lsrs	r3, r3, #16
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d10d      	bne.n	80043d6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	695b      	ldr	r3, [r3, #20]
 80043c0:	43da      	mvns	r2, r3
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	4013      	ands	r3, r2
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	bf0c      	ite	eq
 80043cc:	2301      	moveq	r3, #1
 80043ce:	2300      	movne	r3, #0
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	461a      	mov	r2, r3
 80043d4:	e00c      	b.n	80043f0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	699b      	ldr	r3, [r3, #24]
 80043dc:	43da      	mvns	r2, r3
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	4013      	ands	r3, r2
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	bf0c      	ite	eq
 80043e8:	2301      	moveq	r3, #1
 80043ea:	2300      	movne	r3, #0
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	461a      	mov	r2, r3
 80043f0:	79fb      	ldrb	r3, [r7, #7]
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d116      	bne.n	8004424 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2200      	movs	r2, #0
 80043fa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2220      	movs	r2, #32
 8004400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2200      	movs	r2, #0
 8004408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004410:	f043 0220 	orr.w	r2, r3, #32
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2200      	movs	r2, #0
 800441c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e023      	b.n	800446c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	0c1b      	lsrs	r3, r3, #16
 8004428:	b2db      	uxtb	r3, r3
 800442a:	2b01      	cmp	r3, #1
 800442c:	d10d      	bne.n	800444a <I2C_WaitOnFlagUntilTimeout+0xca>
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	695b      	ldr	r3, [r3, #20]
 8004434:	43da      	mvns	r2, r3
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	4013      	ands	r3, r2
 800443a:	b29b      	uxth	r3, r3
 800443c:	2b00      	cmp	r3, #0
 800443e:	bf0c      	ite	eq
 8004440:	2301      	moveq	r3, #1
 8004442:	2300      	movne	r3, #0
 8004444:	b2db      	uxtb	r3, r3
 8004446:	461a      	mov	r2, r3
 8004448:	e00c      	b.n	8004464 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	699b      	ldr	r3, [r3, #24]
 8004450:	43da      	mvns	r2, r3
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	4013      	ands	r3, r2
 8004456:	b29b      	uxth	r3, r3
 8004458:	2b00      	cmp	r3, #0
 800445a:	bf0c      	ite	eq
 800445c:	2301      	moveq	r3, #1
 800445e:	2300      	movne	r3, #0
 8004460:	b2db      	uxtb	r3, r3
 8004462:	461a      	mov	r2, r3
 8004464:	79fb      	ldrb	r3, [r7, #7]
 8004466:	429a      	cmp	r2, r3
 8004468:	d093      	beq.n	8004392 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800446a:	2300      	movs	r3, #0
}
 800446c:	4618      	mov	r0, r3
 800446e:	3710      	adds	r7, #16
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}

08004474 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	60f8      	str	r0, [r7, #12]
 800447c:	60b9      	str	r1, [r7, #8]
 800447e:	607a      	str	r2, [r7, #4]
 8004480:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004482:	e071      	b.n	8004568 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	695b      	ldr	r3, [r3, #20]
 800448a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800448e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004492:	d123      	bne.n	80044dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044a2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80044ac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2200      	movs	r2, #0
 80044b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2220      	movs	r2, #32
 80044b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c8:	f043 0204 	orr.w	r2, r3, #4
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e067      	b.n	80045ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044e2:	d041      	beq.n	8004568 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044e4:	f7fe fcd8 	bl	8002e98 <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d302      	bcc.n	80044fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d136      	bne.n	8004568 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	0c1b      	lsrs	r3, r3, #16
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	2b01      	cmp	r3, #1
 8004502:	d10c      	bne.n	800451e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	695b      	ldr	r3, [r3, #20]
 800450a:	43da      	mvns	r2, r3
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	4013      	ands	r3, r2
 8004510:	b29b      	uxth	r3, r3
 8004512:	2b00      	cmp	r3, #0
 8004514:	bf14      	ite	ne
 8004516:	2301      	movne	r3, #1
 8004518:	2300      	moveq	r3, #0
 800451a:	b2db      	uxtb	r3, r3
 800451c:	e00b      	b.n	8004536 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	699b      	ldr	r3, [r3, #24]
 8004524:	43da      	mvns	r2, r3
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	4013      	ands	r3, r2
 800452a:	b29b      	uxth	r3, r3
 800452c:	2b00      	cmp	r3, #0
 800452e:	bf14      	ite	ne
 8004530:	2301      	movne	r3, #1
 8004532:	2300      	moveq	r3, #0
 8004534:	b2db      	uxtb	r3, r3
 8004536:	2b00      	cmp	r3, #0
 8004538:	d016      	beq.n	8004568 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2200      	movs	r2, #0
 800453e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2220      	movs	r2, #32
 8004544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2200      	movs	r2, #0
 800454c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004554:	f043 0220 	orr.w	r2, r3, #32
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2200      	movs	r2, #0
 8004560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e021      	b.n	80045ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	0c1b      	lsrs	r3, r3, #16
 800456c:	b2db      	uxtb	r3, r3
 800456e:	2b01      	cmp	r3, #1
 8004570:	d10c      	bne.n	800458c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	695b      	ldr	r3, [r3, #20]
 8004578:	43da      	mvns	r2, r3
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	4013      	ands	r3, r2
 800457e:	b29b      	uxth	r3, r3
 8004580:	2b00      	cmp	r3, #0
 8004582:	bf14      	ite	ne
 8004584:	2301      	movne	r3, #1
 8004586:	2300      	moveq	r3, #0
 8004588:	b2db      	uxtb	r3, r3
 800458a:	e00b      	b.n	80045a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	699b      	ldr	r3, [r3, #24]
 8004592:	43da      	mvns	r2, r3
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	4013      	ands	r3, r2
 8004598:	b29b      	uxth	r3, r3
 800459a:	2b00      	cmp	r3, #0
 800459c:	bf14      	ite	ne
 800459e:	2301      	movne	r3, #1
 80045a0:	2300      	moveq	r3, #0
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	f47f af6d 	bne.w	8004484 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80045aa:	2300      	movs	r3, #0
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3710      	adds	r7, #16
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}

080045b4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b084      	sub	sp, #16
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	60f8      	str	r0, [r7, #12]
 80045bc:	60b9      	str	r1, [r7, #8]
 80045be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045c0:	e034      	b.n	800462c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80045c2:	68f8      	ldr	r0, [r7, #12]
 80045c4:	f000 f886 	bl	80046d4 <I2C_IsAcknowledgeFailed>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d001      	beq.n	80045d2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e034      	b.n	800463c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045d8:	d028      	beq.n	800462c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045da:	f7fe fc5d 	bl	8002e98 <HAL_GetTick>
 80045de:	4602      	mov	r2, r0
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	68ba      	ldr	r2, [r7, #8]
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d302      	bcc.n	80045f0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d11d      	bne.n	800462c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	695b      	ldr	r3, [r3, #20]
 80045f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045fa:	2b80      	cmp	r3, #128	; 0x80
 80045fc:	d016      	beq.n	800462c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2200      	movs	r2, #0
 8004602:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2220      	movs	r2, #32
 8004608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2200      	movs	r2, #0
 8004610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004618:	f043 0220 	orr.w	r2, r3, #32
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2200      	movs	r2, #0
 8004624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e007      	b.n	800463c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	695b      	ldr	r3, [r3, #20]
 8004632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004636:	2b80      	cmp	r3, #128	; 0x80
 8004638:	d1c3      	bne.n	80045c2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800463a:	2300      	movs	r3, #0
}
 800463c:	4618      	mov	r0, r3
 800463e:	3710      	adds	r7, #16
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}

08004644 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b084      	sub	sp, #16
 8004648:	af00      	add	r7, sp, #0
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	60b9      	str	r1, [r7, #8]
 800464e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004650:	e034      	b.n	80046bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004652:	68f8      	ldr	r0, [r7, #12]
 8004654:	f000 f83e 	bl	80046d4 <I2C_IsAcknowledgeFailed>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d001      	beq.n	8004662 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e034      	b.n	80046cc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004668:	d028      	beq.n	80046bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800466a:	f7fe fc15 	bl	8002e98 <HAL_GetTick>
 800466e:	4602      	mov	r2, r0
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	1ad3      	subs	r3, r2, r3
 8004674:	68ba      	ldr	r2, [r7, #8]
 8004676:	429a      	cmp	r2, r3
 8004678:	d302      	bcc.n	8004680 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d11d      	bne.n	80046bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	695b      	ldr	r3, [r3, #20]
 8004686:	f003 0304 	and.w	r3, r3, #4
 800468a:	2b04      	cmp	r3, #4
 800468c:	d016      	beq.n	80046bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2200      	movs	r2, #0
 8004692:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2220      	movs	r2, #32
 8004698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2200      	movs	r2, #0
 80046a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a8:	f043 0220 	orr.w	r2, r3, #32
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2200      	movs	r2, #0
 80046b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	e007      	b.n	80046cc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	695b      	ldr	r3, [r3, #20]
 80046c2:	f003 0304 	and.w	r3, r3, #4
 80046c6:	2b04      	cmp	r3, #4
 80046c8:	d1c3      	bne.n	8004652 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80046ca:	2300      	movs	r3, #0
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3710      	adds	r7, #16
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}

080046d4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	695b      	ldr	r3, [r3, #20]
 80046e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046ea:	d11b      	bne.n	8004724 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80046f4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2220      	movs	r2, #32
 8004700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004710:	f043 0204 	orr.w	r2, r3, #4
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	e000      	b.n	8004726 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004724:	2300      	movs	r3, #0
}
 8004726:	4618      	mov	r0, r3
 8004728:	370c      	adds	r7, #12
 800472a:	46bd      	mov	sp, r7
 800472c:	bc80      	pop	{r7}
 800472e:	4770      	bx	lr

08004730 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b086      	sub	sp, #24
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d101      	bne.n	8004742 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e272      	b.n	8004c28 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0301 	and.w	r3, r3, #1
 800474a:	2b00      	cmp	r3, #0
 800474c:	f000 8087 	beq.w	800485e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004750:	4b92      	ldr	r3, [pc, #584]	; (800499c <HAL_RCC_OscConfig+0x26c>)
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	f003 030c 	and.w	r3, r3, #12
 8004758:	2b04      	cmp	r3, #4
 800475a:	d00c      	beq.n	8004776 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800475c:	4b8f      	ldr	r3, [pc, #572]	; (800499c <HAL_RCC_OscConfig+0x26c>)
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	f003 030c 	and.w	r3, r3, #12
 8004764:	2b08      	cmp	r3, #8
 8004766:	d112      	bne.n	800478e <HAL_RCC_OscConfig+0x5e>
 8004768:	4b8c      	ldr	r3, [pc, #560]	; (800499c <HAL_RCC_OscConfig+0x26c>)
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004770:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004774:	d10b      	bne.n	800478e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004776:	4b89      	ldr	r3, [pc, #548]	; (800499c <HAL_RCC_OscConfig+0x26c>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d06c      	beq.n	800485c <HAL_RCC_OscConfig+0x12c>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d168      	bne.n	800485c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e24c      	b.n	8004c28 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004796:	d106      	bne.n	80047a6 <HAL_RCC_OscConfig+0x76>
 8004798:	4b80      	ldr	r3, [pc, #512]	; (800499c <HAL_RCC_OscConfig+0x26c>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a7f      	ldr	r2, [pc, #508]	; (800499c <HAL_RCC_OscConfig+0x26c>)
 800479e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047a2:	6013      	str	r3, [r2, #0]
 80047a4:	e02e      	b.n	8004804 <HAL_RCC_OscConfig+0xd4>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d10c      	bne.n	80047c8 <HAL_RCC_OscConfig+0x98>
 80047ae:	4b7b      	ldr	r3, [pc, #492]	; (800499c <HAL_RCC_OscConfig+0x26c>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a7a      	ldr	r2, [pc, #488]	; (800499c <HAL_RCC_OscConfig+0x26c>)
 80047b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047b8:	6013      	str	r3, [r2, #0]
 80047ba:	4b78      	ldr	r3, [pc, #480]	; (800499c <HAL_RCC_OscConfig+0x26c>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a77      	ldr	r2, [pc, #476]	; (800499c <HAL_RCC_OscConfig+0x26c>)
 80047c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047c4:	6013      	str	r3, [r2, #0]
 80047c6:	e01d      	b.n	8004804 <HAL_RCC_OscConfig+0xd4>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047d0:	d10c      	bne.n	80047ec <HAL_RCC_OscConfig+0xbc>
 80047d2:	4b72      	ldr	r3, [pc, #456]	; (800499c <HAL_RCC_OscConfig+0x26c>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a71      	ldr	r2, [pc, #452]	; (800499c <HAL_RCC_OscConfig+0x26c>)
 80047d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047dc:	6013      	str	r3, [r2, #0]
 80047de:	4b6f      	ldr	r3, [pc, #444]	; (800499c <HAL_RCC_OscConfig+0x26c>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a6e      	ldr	r2, [pc, #440]	; (800499c <HAL_RCC_OscConfig+0x26c>)
 80047e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047e8:	6013      	str	r3, [r2, #0]
 80047ea:	e00b      	b.n	8004804 <HAL_RCC_OscConfig+0xd4>
 80047ec:	4b6b      	ldr	r3, [pc, #428]	; (800499c <HAL_RCC_OscConfig+0x26c>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a6a      	ldr	r2, [pc, #424]	; (800499c <HAL_RCC_OscConfig+0x26c>)
 80047f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047f6:	6013      	str	r3, [r2, #0]
 80047f8:	4b68      	ldr	r3, [pc, #416]	; (800499c <HAL_RCC_OscConfig+0x26c>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a67      	ldr	r2, [pc, #412]	; (800499c <HAL_RCC_OscConfig+0x26c>)
 80047fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004802:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d013      	beq.n	8004834 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800480c:	f7fe fb44 	bl	8002e98 <HAL_GetTick>
 8004810:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004812:	e008      	b.n	8004826 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004814:	f7fe fb40 	bl	8002e98 <HAL_GetTick>
 8004818:	4602      	mov	r2, r0
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	2b64      	cmp	r3, #100	; 0x64
 8004820:	d901      	bls.n	8004826 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e200      	b.n	8004c28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004826:	4b5d      	ldr	r3, [pc, #372]	; (800499c <HAL_RCC_OscConfig+0x26c>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800482e:	2b00      	cmp	r3, #0
 8004830:	d0f0      	beq.n	8004814 <HAL_RCC_OscConfig+0xe4>
 8004832:	e014      	b.n	800485e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004834:	f7fe fb30 	bl	8002e98 <HAL_GetTick>
 8004838:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800483a:	e008      	b.n	800484e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800483c:	f7fe fb2c 	bl	8002e98 <HAL_GetTick>
 8004840:	4602      	mov	r2, r0
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	2b64      	cmp	r3, #100	; 0x64
 8004848:	d901      	bls.n	800484e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	e1ec      	b.n	8004c28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800484e:	4b53      	ldr	r3, [pc, #332]	; (800499c <HAL_RCC_OscConfig+0x26c>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004856:	2b00      	cmp	r3, #0
 8004858:	d1f0      	bne.n	800483c <HAL_RCC_OscConfig+0x10c>
 800485a:	e000      	b.n	800485e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800485c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0302 	and.w	r3, r3, #2
 8004866:	2b00      	cmp	r3, #0
 8004868:	d063      	beq.n	8004932 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800486a:	4b4c      	ldr	r3, [pc, #304]	; (800499c <HAL_RCC_OscConfig+0x26c>)
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	f003 030c 	and.w	r3, r3, #12
 8004872:	2b00      	cmp	r3, #0
 8004874:	d00b      	beq.n	800488e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004876:	4b49      	ldr	r3, [pc, #292]	; (800499c <HAL_RCC_OscConfig+0x26c>)
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	f003 030c 	and.w	r3, r3, #12
 800487e:	2b08      	cmp	r3, #8
 8004880:	d11c      	bne.n	80048bc <HAL_RCC_OscConfig+0x18c>
 8004882:	4b46      	ldr	r3, [pc, #280]	; (800499c <HAL_RCC_OscConfig+0x26c>)
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800488a:	2b00      	cmp	r3, #0
 800488c:	d116      	bne.n	80048bc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800488e:	4b43      	ldr	r3, [pc, #268]	; (800499c <HAL_RCC_OscConfig+0x26c>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 0302 	and.w	r3, r3, #2
 8004896:	2b00      	cmp	r3, #0
 8004898:	d005      	beq.n	80048a6 <HAL_RCC_OscConfig+0x176>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d001      	beq.n	80048a6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e1c0      	b.n	8004c28 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048a6:	4b3d      	ldr	r3, [pc, #244]	; (800499c <HAL_RCC_OscConfig+0x26c>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	695b      	ldr	r3, [r3, #20]
 80048b2:	00db      	lsls	r3, r3, #3
 80048b4:	4939      	ldr	r1, [pc, #228]	; (800499c <HAL_RCC_OscConfig+0x26c>)
 80048b6:	4313      	orrs	r3, r2
 80048b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048ba:	e03a      	b.n	8004932 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	691b      	ldr	r3, [r3, #16]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d020      	beq.n	8004906 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048c4:	4b36      	ldr	r3, [pc, #216]	; (80049a0 <HAL_RCC_OscConfig+0x270>)
 80048c6:	2201      	movs	r2, #1
 80048c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048ca:	f7fe fae5 	bl	8002e98 <HAL_GetTick>
 80048ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048d0:	e008      	b.n	80048e4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048d2:	f7fe fae1 	bl	8002e98 <HAL_GetTick>
 80048d6:	4602      	mov	r2, r0
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	1ad3      	subs	r3, r2, r3
 80048dc:	2b02      	cmp	r3, #2
 80048de:	d901      	bls.n	80048e4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80048e0:	2303      	movs	r3, #3
 80048e2:	e1a1      	b.n	8004c28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048e4:	4b2d      	ldr	r3, [pc, #180]	; (800499c <HAL_RCC_OscConfig+0x26c>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 0302 	and.w	r3, r3, #2
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d0f0      	beq.n	80048d2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048f0:	4b2a      	ldr	r3, [pc, #168]	; (800499c <HAL_RCC_OscConfig+0x26c>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	695b      	ldr	r3, [r3, #20]
 80048fc:	00db      	lsls	r3, r3, #3
 80048fe:	4927      	ldr	r1, [pc, #156]	; (800499c <HAL_RCC_OscConfig+0x26c>)
 8004900:	4313      	orrs	r3, r2
 8004902:	600b      	str	r3, [r1, #0]
 8004904:	e015      	b.n	8004932 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004906:	4b26      	ldr	r3, [pc, #152]	; (80049a0 <HAL_RCC_OscConfig+0x270>)
 8004908:	2200      	movs	r2, #0
 800490a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800490c:	f7fe fac4 	bl	8002e98 <HAL_GetTick>
 8004910:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004912:	e008      	b.n	8004926 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004914:	f7fe fac0 	bl	8002e98 <HAL_GetTick>
 8004918:	4602      	mov	r2, r0
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	2b02      	cmp	r3, #2
 8004920:	d901      	bls.n	8004926 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004922:	2303      	movs	r3, #3
 8004924:	e180      	b.n	8004c28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004926:	4b1d      	ldr	r3, [pc, #116]	; (800499c <HAL_RCC_OscConfig+0x26c>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0302 	and.w	r3, r3, #2
 800492e:	2b00      	cmp	r3, #0
 8004930:	d1f0      	bne.n	8004914 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 0308 	and.w	r3, r3, #8
 800493a:	2b00      	cmp	r3, #0
 800493c:	d03a      	beq.n	80049b4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	699b      	ldr	r3, [r3, #24]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d019      	beq.n	800497a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004946:	4b17      	ldr	r3, [pc, #92]	; (80049a4 <HAL_RCC_OscConfig+0x274>)
 8004948:	2201      	movs	r2, #1
 800494a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800494c:	f7fe faa4 	bl	8002e98 <HAL_GetTick>
 8004950:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004952:	e008      	b.n	8004966 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004954:	f7fe faa0 	bl	8002e98 <HAL_GetTick>
 8004958:	4602      	mov	r2, r0
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	2b02      	cmp	r3, #2
 8004960:	d901      	bls.n	8004966 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e160      	b.n	8004c28 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004966:	4b0d      	ldr	r3, [pc, #52]	; (800499c <HAL_RCC_OscConfig+0x26c>)
 8004968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496a:	f003 0302 	and.w	r3, r3, #2
 800496e:	2b00      	cmp	r3, #0
 8004970:	d0f0      	beq.n	8004954 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004972:	2001      	movs	r0, #1
 8004974:	f000 face 	bl	8004f14 <RCC_Delay>
 8004978:	e01c      	b.n	80049b4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800497a:	4b0a      	ldr	r3, [pc, #40]	; (80049a4 <HAL_RCC_OscConfig+0x274>)
 800497c:	2200      	movs	r2, #0
 800497e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004980:	f7fe fa8a 	bl	8002e98 <HAL_GetTick>
 8004984:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004986:	e00f      	b.n	80049a8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004988:	f7fe fa86 	bl	8002e98 <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	2b02      	cmp	r3, #2
 8004994:	d908      	bls.n	80049a8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e146      	b.n	8004c28 <HAL_RCC_OscConfig+0x4f8>
 800499a:	bf00      	nop
 800499c:	40021000 	.word	0x40021000
 80049a0:	42420000 	.word	0x42420000
 80049a4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049a8:	4b92      	ldr	r3, [pc, #584]	; (8004bf4 <HAL_RCC_OscConfig+0x4c4>)
 80049aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ac:	f003 0302 	and.w	r3, r3, #2
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d1e9      	bne.n	8004988 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0304 	and.w	r3, r3, #4
 80049bc:	2b00      	cmp	r3, #0
 80049be:	f000 80a6 	beq.w	8004b0e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049c2:	2300      	movs	r3, #0
 80049c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049c6:	4b8b      	ldr	r3, [pc, #556]	; (8004bf4 <HAL_RCC_OscConfig+0x4c4>)
 80049c8:	69db      	ldr	r3, [r3, #28]
 80049ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d10d      	bne.n	80049ee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049d2:	4b88      	ldr	r3, [pc, #544]	; (8004bf4 <HAL_RCC_OscConfig+0x4c4>)
 80049d4:	69db      	ldr	r3, [r3, #28]
 80049d6:	4a87      	ldr	r2, [pc, #540]	; (8004bf4 <HAL_RCC_OscConfig+0x4c4>)
 80049d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049dc:	61d3      	str	r3, [r2, #28]
 80049de:	4b85      	ldr	r3, [pc, #532]	; (8004bf4 <HAL_RCC_OscConfig+0x4c4>)
 80049e0:	69db      	ldr	r3, [r3, #28]
 80049e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049e6:	60bb      	str	r3, [r7, #8]
 80049e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049ea:	2301      	movs	r3, #1
 80049ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049ee:	4b82      	ldr	r3, [pc, #520]	; (8004bf8 <HAL_RCC_OscConfig+0x4c8>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d118      	bne.n	8004a2c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049fa:	4b7f      	ldr	r3, [pc, #508]	; (8004bf8 <HAL_RCC_OscConfig+0x4c8>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a7e      	ldr	r2, [pc, #504]	; (8004bf8 <HAL_RCC_OscConfig+0x4c8>)
 8004a00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a06:	f7fe fa47 	bl	8002e98 <HAL_GetTick>
 8004a0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a0c:	e008      	b.n	8004a20 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a0e:	f7fe fa43 	bl	8002e98 <HAL_GetTick>
 8004a12:	4602      	mov	r2, r0
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	1ad3      	subs	r3, r2, r3
 8004a18:	2b64      	cmp	r3, #100	; 0x64
 8004a1a:	d901      	bls.n	8004a20 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	e103      	b.n	8004c28 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a20:	4b75      	ldr	r3, [pc, #468]	; (8004bf8 <HAL_RCC_OscConfig+0x4c8>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d0f0      	beq.n	8004a0e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d106      	bne.n	8004a42 <HAL_RCC_OscConfig+0x312>
 8004a34:	4b6f      	ldr	r3, [pc, #444]	; (8004bf4 <HAL_RCC_OscConfig+0x4c4>)
 8004a36:	6a1b      	ldr	r3, [r3, #32]
 8004a38:	4a6e      	ldr	r2, [pc, #440]	; (8004bf4 <HAL_RCC_OscConfig+0x4c4>)
 8004a3a:	f043 0301 	orr.w	r3, r3, #1
 8004a3e:	6213      	str	r3, [r2, #32]
 8004a40:	e02d      	b.n	8004a9e <HAL_RCC_OscConfig+0x36e>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d10c      	bne.n	8004a64 <HAL_RCC_OscConfig+0x334>
 8004a4a:	4b6a      	ldr	r3, [pc, #424]	; (8004bf4 <HAL_RCC_OscConfig+0x4c4>)
 8004a4c:	6a1b      	ldr	r3, [r3, #32]
 8004a4e:	4a69      	ldr	r2, [pc, #420]	; (8004bf4 <HAL_RCC_OscConfig+0x4c4>)
 8004a50:	f023 0301 	bic.w	r3, r3, #1
 8004a54:	6213      	str	r3, [r2, #32]
 8004a56:	4b67      	ldr	r3, [pc, #412]	; (8004bf4 <HAL_RCC_OscConfig+0x4c4>)
 8004a58:	6a1b      	ldr	r3, [r3, #32]
 8004a5a:	4a66      	ldr	r2, [pc, #408]	; (8004bf4 <HAL_RCC_OscConfig+0x4c4>)
 8004a5c:	f023 0304 	bic.w	r3, r3, #4
 8004a60:	6213      	str	r3, [r2, #32]
 8004a62:	e01c      	b.n	8004a9e <HAL_RCC_OscConfig+0x36e>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	2b05      	cmp	r3, #5
 8004a6a:	d10c      	bne.n	8004a86 <HAL_RCC_OscConfig+0x356>
 8004a6c:	4b61      	ldr	r3, [pc, #388]	; (8004bf4 <HAL_RCC_OscConfig+0x4c4>)
 8004a6e:	6a1b      	ldr	r3, [r3, #32]
 8004a70:	4a60      	ldr	r2, [pc, #384]	; (8004bf4 <HAL_RCC_OscConfig+0x4c4>)
 8004a72:	f043 0304 	orr.w	r3, r3, #4
 8004a76:	6213      	str	r3, [r2, #32]
 8004a78:	4b5e      	ldr	r3, [pc, #376]	; (8004bf4 <HAL_RCC_OscConfig+0x4c4>)
 8004a7a:	6a1b      	ldr	r3, [r3, #32]
 8004a7c:	4a5d      	ldr	r2, [pc, #372]	; (8004bf4 <HAL_RCC_OscConfig+0x4c4>)
 8004a7e:	f043 0301 	orr.w	r3, r3, #1
 8004a82:	6213      	str	r3, [r2, #32]
 8004a84:	e00b      	b.n	8004a9e <HAL_RCC_OscConfig+0x36e>
 8004a86:	4b5b      	ldr	r3, [pc, #364]	; (8004bf4 <HAL_RCC_OscConfig+0x4c4>)
 8004a88:	6a1b      	ldr	r3, [r3, #32]
 8004a8a:	4a5a      	ldr	r2, [pc, #360]	; (8004bf4 <HAL_RCC_OscConfig+0x4c4>)
 8004a8c:	f023 0301 	bic.w	r3, r3, #1
 8004a90:	6213      	str	r3, [r2, #32]
 8004a92:	4b58      	ldr	r3, [pc, #352]	; (8004bf4 <HAL_RCC_OscConfig+0x4c4>)
 8004a94:	6a1b      	ldr	r3, [r3, #32]
 8004a96:	4a57      	ldr	r2, [pc, #348]	; (8004bf4 <HAL_RCC_OscConfig+0x4c4>)
 8004a98:	f023 0304 	bic.w	r3, r3, #4
 8004a9c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d015      	beq.n	8004ad2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004aa6:	f7fe f9f7 	bl	8002e98 <HAL_GetTick>
 8004aaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004aac:	e00a      	b.n	8004ac4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004aae:	f7fe f9f3 	bl	8002e98 <HAL_GetTick>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d901      	bls.n	8004ac4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	e0b1      	b.n	8004c28 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ac4:	4b4b      	ldr	r3, [pc, #300]	; (8004bf4 <HAL_RCC_OscConfig+0x4c4>)
 8004ac6:	6a1b      	ldr	r3, [r3, #32]
 8004ac8:	f003 0302 	and.w	r3, r3, #2
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d0ee      	beq.n	8004aae <HAL_RCC_OscConfig+0x37e>
 8004ad0:	e014      	b.n	8004afc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ad2:	f7fe f9e1 	bl	8002e98 <HAL_GetTick>
 8004ad6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ad8:	e00a      	b.n	8004af0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ada:	f7fe f9dd 	bl	8002e98 <HAL_GetTick>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d901      	bls.n	8004af0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004aec:	2303      	movs	r3, #3
 8004aee:	e09b      	b.n	8004c28 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004af0:	4b40      	ldr	r3, [pc, #256]	; (8004bf4 <HAL_RCC_OscConfig+0x4c4>)
 8004af2:	6a1b      	ldr	r3, [r3, #32]
 8004af4:	f003 0302 	and.w	r3, r3, #2
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d1ee      	bne.n	8004ada <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004afc:	7dfb      	ldrb	r3, [r7, #23]
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d105      	bne.n	8004b0e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b02:	4b3c      	ldr	r3, [pc, #240]	; (8004bf4 <HAL_RCC_OscConfig+0x4c4>)
 8004b04:	69db      	ldr	r3, [r3, #28]
 8004b06:	4a3b      	ldr	r2, [pc, #236]	; (8004bf4 <HAL_RCC_OscConfig+0x4c4>)
 8004b08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b0c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	69db      	ldr	r3, [r3, #28]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	f000 8087 	beq.w	8004c26 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b18:	4b36      	ldr	r3, [pc, #216]	; (8004bf4 <HAL_RCC_OscConfig+0x4c4>)
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	f003 030c 	and.w	r3, r3, #12
 8004b20:	2b08      	cmp	r3, #8
 8004b22:	d061      	beq.n	8004be8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	69db      	ldr	r3, [r3, #28]
 8004b28:	2b02      	cmp	r3, #2
 8004b2a:	d146      	bne.n	8004bba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b2c:	4b33      	ldr	r3, [pc, #204]	; (8004bfc <HAL_RCC_OscConfig+0x4cc>)
 8004b2e:	2200      	movs	r2, #0
 8004b30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b32:	f7fe f9b1 	bl	8002e98 <HAL_GetTick>
 8004b36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b38:	e008      	b.n	8004b4c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b3a:	f7fe f9ad 	bl	8002e98 <HAL_GetTick>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	1ad3      	subs	r3, r2, r3
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	d901      	bls.n	8004b4c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004b48:	2303      	movs	r3, #3
 8004b4a:	e06d      	b.n	8004c28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b4c:	4b29      	ldr	r3, [pc, #164]	; (8004bf4 <HAL_RCC_OscConfig+0x4c4>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d1f0      	bne.n	8004b3a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6a1b      	ldr	r3, [r3, #32]
 8004b5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b60:	d108      	bne.n	8004b74 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004b62:	4b24      	ldr	r3, [pc, #144]	; (8004bf4 <HAL_RCC_OscConfig+0x4c4>)
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	4921      	ldr	r1, [pc, #132]	; (8004bf4 <HAL_RCC_OscConfig+0x4c4>)
 8004b70:	4313      	orrs	r3, r2
 8004b72:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b74:	4b1f      	ldr	r3, [pc, #124]	; (8004bf4 <HAL_RCC_OscConfig+0x4c4>)
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6a19      	ldr	r1, [r3, #32]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b84:	430b      	orrs	r3, r1
 8004b86:	491b      	ldr	r1, [pc, #108]	; (8004bf4 <HAL_RCC_OscConfig+0x4c4>)
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b8c:	4b1b      	ldr	r3, [pc, #108]	; (8004bfc <HAL_RCC_OscConfig+0x4cc>)
 8004b8e:	2201      	movs	r2, #1
 8004b90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b92:	f7fe f981 	bl	8002e98 <HAL_GetTick>
 8004b96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b98:	e008      	b.n	8004bac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b9a:	f7fe f97d 	bl	8002e98 <HAL_GetTick>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	1ad3      	subs	r3, r2, r3
 8004ba4:	2b02      	cmp	r3, #2
 8004ba6:	d901      	bls.n	8004bac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004ba8:	2303      	movs	r3, #3
 8004baa:	e03d      	b.n	8004c28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004bac:	4b11      	ldr	r3, [pc, #68]	; (8004bf4 <HAL_RCC_OscConfig+0x4c4>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d0f0      	beq.n	8004b9a <HAL_RCC_OscConfig+0x46a>
 8004bb8:	e035      	b.n	8004c26 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bba:	4b10      	ldr	r3, [pc, #64]	; (8004bfc <HAL_RCC_OscConfig+0x4cc>)
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bc0:	f7fe f96a 	bl	8002e98 <HAL_GetTick>
 8004bc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004bc6:	e008      	b.n	8004bda <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bc8:	f7fe f966 	bl	8002e98 <HAL_GetTick>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	d901      	bls.n	8004bda <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	e026      	b.n	8004c28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004bda:	4b06      	ldr	r3, [pc, #24]	; (8004bf4 <HAL_RCC_OscConfig+0x4c4>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d1f0      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x498>
 8004be6:	e01e      	b.n	8004c26 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	69db      	ldr	r3, [r3, #28]
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d107      	bne.n	8004c00 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e019      	b.n	8004c28 <HAL_RCC_OscConfig+0x4f8>
 8004bf4:	40021000 	.word	0x40021000
 8004bf8:	40007000 	.word	0x40007000
 8004bfc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004c00:	4b0b      	ldr	r3, [pc, #44]	; (8004c30 <HAL_RCC_OscConfig+0x500>)
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6a1b      	ldr	r3, [r3, #32]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d106      	bne.n	8004c22 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d001      	beq.n	8004c26 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e000      	b.n	8004c28 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004c26:	2300      	movs	r3, #0
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3718      	adds	r7, #24
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}
 8004c30:	40021000 	.word	0x40021000

08004c34 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b084      	sub	sp, #16
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d101      	bne.n	8004c48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	e0d0      	b.n	8004dea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c48:	4b6a      	ldr	r3, [pc, #424]	; (8004df4 <HAL_RCC_ClockConfig+0x1c0>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 0307 	and.w	r3, r3, #7
 8004c50:	683a      	ldr	r2, [r7, #0]
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d910      	bls.n	8004c78 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c56:	4b67      	ldr	r3, [pc, #412]	; (8004df4 <HAL_RCC_ClockConfig+0x1c0>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f023 0207 	bic.w	r2, r3, #7
 8004c5e:	4965      	ldr	r1, [pc, #404]	; (8004df4 <HAL_RCC_ClockConfig+0x1c0>)
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c66:	4b63      	ldr	r3, [pc, #396]	; (8004df4 <HAL_RCC_ClockConfig+0x1c0>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 0307 	and.w	r3, r3, #7
 8004c6e:	683a      	ldr	r2, [r7, #0]
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d001      	beq.n	8004c78 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	e0b8      	b.n	8004dea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 0302 	and.w	r3, r3, #2
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d020      	beq.n	8004cc6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0304 	and.w	r3, r3, #4
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d005      	beq.n	8004c9c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c90:	4b59      	ldr	r3, [pc, #356]	; (8004df8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	4a58      	ldr	r2, [pc, #352]	; (8004df8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c96:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004c9a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 0308 	and.w	r3, r3, #8
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d005      	beq.n	8004cb4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ca8:	4b53      	ldr	r3, [pc, #332]	; (8004df8 <HAL_RCC_ClockConfig+0x1c4>)
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	4a52      	ldr	r2, [pc, #328]	; (8004df8 <HAL_RCC_ClockConfig+0x1c4>)
 8004cae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004cb2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cb4:	4b50      	ldr	r3, [pc, #320]	; (8004df8 <HAL_RCC_ClockConfig+0x1c4>)
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	494d      	ldr	r1, [pc, #308]	; (8004df8 <HAL_RCC_ClockConfig+0x1c4>)
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 0301 	and.w	r3, r3, #1
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d040      	beq.n	8004d54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d107      	bne.n	8004cea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cda:	4b47      	ldr	r3, [pc, #284]	; (8004df8 <HAL_RCC_ClockConfig+0x1c4>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d115      	bne.n	8004d12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e07f      	b.n	8004dea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	2b02      	cmp	r3, #2
 8004cf0:	d107      	bne.n	8004d02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cf2:	4b41      	ldr	r3, [pc, #260]	; (8004df8 <HAL_RCC_ClockConfig+0x1c4>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d109      	bne.n	8004d12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e073      	b.n	8004dea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d02:	4b3d      	ldr	r3, [pc, #244]	; (8004df8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 0302 	and.w	r3, r3, #2
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d101      	bne.n	8004d12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e06b      	b.n	8004dea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d12:	4b39      	ldr	r3, [pc, #228]	; (8004df8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	f023 0203 	bic.w	r2, r3, #3
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	4936      	ldr	r1, [pc, #216]	; (8004df8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d20:	4313      	orrs	r3, r2
 8004d22:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d24:	f7fe f8b8 	bl	8002e98 <HAL_GetTick>
 8004d28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d2a:	e00a      	b.n	8004d42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d2c:	f7fe f8b4 	bl	8002e98 <HAL_GetTick>
 8004d30:	4602      	mov	r2, r0
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d901      	bls.n	8004d42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d3e:	2303      	movs	r3, #3
 8004d40:	e053      	b.n	8004dea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d42:	4b2d      	ldr	r3, [pc, #180]	; (8004df8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	f003 020c 	and.w	r2, r3, #12
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d1eb      	bne.n	8004d2c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d54:	4b27      	ldr	r3, [pc, #156]	; (8004df4 <HAL_RCC_ClockConfig+0x1c0>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0307 	and.w	r3, r3, #7
 8004d5c:	683a      	ldr	r2, [r7, #0]
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d210      	bcs.n	8004d84 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d62:	4b24      	ldr	r3, [pc, #144]	; (8004df4 <HAL_RCC_ClockConfig+0x1c0>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f023 0207 	bic.w	r2, r3, #7
 8004d6a:	4922      	ldr	r1, [pc, #136]	; (8004df4 <HAL_RCC_ClockConfig+0x1c0>)
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d72:	4b20      	ldr	r3, [pc, #128]	; (8004df4 <HAL_RCC_ClockConfig+0x1c0>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0307 	and.w	r3, r3, #7
 8004d7a:	683a      	ldr	r2, [r7, #0]
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d001      	beq.n	8004d84 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e032      	b.n	8004dea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 0304 	and.w	r3, r3, #4
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d008      	beq.n	8004da2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d90:	4b19      	ldr	r3, [pc, #100]	; (8004df8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	4916      	ldr	r1, [pc, #88]	; (8004df8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 0308 	and.w	r3, r3, #8
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d009      	beq.n	8004dc2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004dae:	4b12      	ldr	r3, [pc, #72]	; (8004df8 <HAL_RCC_ClockConfig+0x1c4>)
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	00db      	lsls	r3, r3, #3
 8004dbc:	490e      	ldr	r1, [pc, #56]	; (8004df8 <HAL_RCC_ClockConfig+0x1c4>)
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004dc2:	f000 f821 	bl	8004e08 <HAL_RCC_GetSysClockFreq>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	4b0b      	ldr	r3, [pc, #44]	; (8004df8 <HAL_RCC_ClockConfig+0x1c4>)
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	091b      	lsrs	r3, r3, #4
 8004dce:	f003 030f 	and.w	r3, r3, #15
 8004dd2:	490a      	ldr	r1, [pc, #40]	; (8004dfc <HAL_RCC_ClockConfig+0x1c8>)
 8004dd4:	5ccb      	ldrb	r3, [r1, r3]
 8004dd6:	fa22 f303 	lsr.w	r3, r2, r3
 8004dda:	4a09      	ldr	r2, [pc, #36]	; (8004e00 <HAL_RCC_ClockConfig+0x1cc>)
 8004ddc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004dde:	4b09      	ldr	r3, [pc, #36]	; (8004e04 <HAL_RCC_ClockConfig+0x1d0>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4618      	mov	r0, r3
 8004de4:	f7fe f816 	bl	8002e14 <HAL_InitTick>

  return HAL_OK;
 8004de8:	2300      	movs	r3, #0
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3710      	adds	r7, #16
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop
 8004df4:	40022000 	.word	0x40022000
 8004df8:	40021000 	.word	0x40021000
 8004dfc:	0800d16c 	.word	0x0800d16c
 8004e00:	2000004c 	.word	0x2000004c
 8004e04:	20000050 	.word	0x20000050

08004e08 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b087      	sub	sp, #28
 8004e0c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	60fb      	str	r3, [r7, #12]
 8004e12:	2300      	movs	r3, #0
 8004e14:	60bb      	str	r3, [r7, #8]
 8004e16:	2300      	movs	r3, #0
 8004e18:	617b      	str	r3, [r7, #20]
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004e22:	4b1e      	ldr	r3, [pc, #120]	; (8004e9c <HAL_RCC_GetSysClockFreq+0x94>)
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f003 030c 	and.w	r3, r3, #12
 8004e2e:	2b04      	cmp	r3, #4
 8004e30:	d002      	beq.n	8004e38 <HAL_RCC_GetSysClockFreq+0x30>
 8004e32:	2b08      	cmp	r3, #8
 8004e34:	d003      	beq.n	8004e3e <HAL_RCC_GetSysClockFreq+0x36>
 8004e36:	e027      	b.n	8004e88 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004e38:	4b19      	ldr	r3, [pc, #100]	; (8004ea0 <HAL_RCC_GetSysClockFreq+0x98>)
 8004e3a:	613b      	str	r3, [r7, #16]
      break;
 8004e3c:	e027      	b.n	8004e8e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	0c9b      	lsrs	r3, r3, #18
 8004e42:	f003 030f 	and.w	r3, r3, #15
 8004e46:	4a17      	ldr	r2, [pc, #92]	; (8004ea4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004e48:	5cd3      	ldrb	r3, [r2, r3]
 8004e4a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d010      	beq.n	8004e78 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004e56:	4b11      	ldr	r3, [pc, #68]	; (8004e9c <HAL_RCC_GetSysClockFreq+0x94>)
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	0c5b      	lsrs	r3, r3, #17
 8004e5c:	f003 0301 	and.w	r3, r3, #1
 8004e60:	4a11      	ldr	r2, [pc, #68]	; (8004ea8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004e62:	5cd3      	ldrb	r3, [r2, r3]
 8004e64:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a0d      	ldr	r2, [pc, #52]	; (8004ea0 <HAL_RCC_GetSysClockFreq+0x98>)
 8004e6a:	fb03 f202 	mul.w	r2, r3, r2
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e74:	617b      	str	r3, [r7, #20]
 8004e76:	e004      	b.n	8004e82 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4a0c      	ldr	r2, [pc, #48]	; (8004eac <HAL_RCC_GetSysClockFreq+0xa4>)
 8004e7c:	fb02 f303 	mul.w	r3, r2, r3
 8004e80:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	613b      	str	r3, [r7, #16]
      break;
 8004e86:	e002      	b.n	8004e8e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004e88:	4b05      	ldr	r3, [pc, #20]	; (8004ea0 <HAL_RCC_GetSysClockFreq+0x98>)
 8004e8a:	613b      	str	r3, [r7, #16]
      break;
 8004e8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e8e:	693b      	ldr	r3, [r7, #16]
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	371c      	adds	r7, #28
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bc80      	pop	{r7}
 8004e98:	4770      	bx	lr
 8004e9a:	bf00      	nop
 8004e9c:	40021000 	.word	0x40021000
 8004ea0:	007a1200 	.word	0x007a1200
 8004ea4:	0800d184 	.word	0x0800d184
 8004ea8:	0800d194 	.word	0x0800d194
 8004eac:	003d0900 	.word	0x003d0900

08004eb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004eb4:	4b02      	ldr	r3, [pc, #8]	; (8004ec0 <HAL_RCC_GetHCLKFreq+0x10>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bc80      	pop	{r7}
 8004ebe:	4770      	bx	lr
 8004ec0:	2000004c 	.word	0x2000004c

08004ec4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004ec8:	f7ff fff2 	bl	8004eb0 <HAL_RCC_GetHCLKFreq>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	4b05      	ldr	r3, [pc, #20]	; (8004ee4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	0a1b      	lsrs	r3, r3, #8
 8004ed4:	f003 0307 	and.w	r3, r3, #7
 8004ed8:	4903      	ldr	r1, [pc, #12]	; (8004ee8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004eda:	5ccb      	ldrb	r3, [r1, r3]
 8004edc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	40021000 	.word	0x40021000
 8004ee8:	0800d17c 	.word	0x0800d17c

08004eec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004ef0:	f7ff ffde 	bl	8004eb0 <HAL_RCC_GetHCLKFreq>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	4b05      	ldr	r3, [pc, #20]	; (8004f0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	0adb      	lsrs	r3, r3, #11
 8004efc:	f003 0307 	and.w	r3, r3, #7
 8004f00:	4903      	ldr	r1, [pc, #12]	; (8004f10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f02:	5ccb      	ldrb	r3, [r1, r3]
 8004f04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	bd80      	pop	{r7, pc}
 8004f0c:	40021000 	.word	0x40021000
 8004f10:	0800d17c 	.word	0x0800d17c

08004f14 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b085      	sub	sp, #20
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004f1c:	4b0a      	ldr	r3, [pc, #40]	; (8004f48 <RCC_Delay+0x34>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a0a      	ldr	r2, [pc, #40]	; (8004f4c <RCC_Delay+0x38>)
 8004f22:	fba2 2303 	umull	r2, r3, r2, r3
 8004f26:	0a5b      	lsrs	r3, r3, #9
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	fb02 f303 	mul.w	r3, r2, r3
 8004f2e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004f30:	bf00      	nop
  }
  while (Delay --);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	1e5a      	subs	r2, r3, #1
 8004f36:	60fa      	str	r2, [r7, #12]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d1f9      	bne.n	8004f30 <RCC_Delay+0x1c>
}
 8004f3c:	bf00      	nop
 8004f3e:	bf00      	nop
 8004f40:	3714      	adds	r7, #20
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bc80      	pop	{r7}
 8004f46:	4770      	bx	lr
 8004f48:	2000004c 	.word	0x2000004c
 8004f4c:	10624dd3 	.word	0x10624dd3

08004f50 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b086      	sub	sp, #24
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	613b      	str	r3, [r7, #16]
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 0301 	and.w	r3, r3, #1
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d07d      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f70:	4b4f      	ldr	r3, [pc, #316]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f72:	69db      	ldr	r3, [r3, #28]
 8004f74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d10d      	bne.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f7c:	4b4c      	ldr	r3, [pc, #304]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f7e:	69db      	ldr	r3, [r3, #28]
 8004f80:	4a4b      	ldr	r2, [pc, #300]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f86:	61d3      	str	r3, [r2, #28]
 8004f88:	4b49      	ldr	r3, [pc, #292]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f8a:	69db      	ldr	r3, [r3, #28]
 8004f8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f90:	60bb      	str	r3, [r7, #8]
 8004f92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f94:	2301      	movs	r3, #1
 8004f96:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f98:	4b46      	ldr	r3, [pc, #280]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d118      	bne.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004fa4:	4b43      	ldr	r3, [pc, #268]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a42      	ldr	r2, [pc, #264]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004faa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fb0:	f7fd ff72 	bl	8002e98 <HAL_GetTick>
 8004fb4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fb6:	e008      	b.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fb8:	f7fd ff6e 	bl	8002e98 <HAL_GetTick>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	2b64      	cmp	r3, #100	; 0x64
 8004fc4:	d901      	bls.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	e06d      	b.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fca:	4b3a      	ldr	r3, [pc, #232]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d0f0      	beq.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004fd6:	4b36      	ldr	r3, [pc, #216]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fd8:	6a1b      	ldr	r3, [r3, #32]
 8004fda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fde:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d02e      	beq.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fee:	68fa      	ldr	r2, [r7, #12]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d027      	beq.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ff4:	4b2e      	ldr	r3, [pc, #184]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ff6:	6a1b      	ldr	r3, [r3, #32]
 8004ff8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ffc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ffe:	4b2e      	ldr	r3, [pc, #184]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005000:	2201      	movs	r2, #1
 8005002:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005004:	4b2c      	ldr	r3, [pc, #176]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005006:	2200      	movs	r2, #0
 8005008:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800500a:	4a29      	ldr	r2, [pc, #164]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f003 0301 	and.w	r3, r3, #1
 8005016:	2b00      	cmp	r3, #0
 8005018:	d014      	beq.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800501a:	f7fd ff3d 	bl	8002e98 <HAL_GetTick>
 800501e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005020:	e00a      	b.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005022:	f7fd ff39 	bl	8002e98 <HAL_GetTick>
 8005026:	4602      	mov	r2, r0
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	1ad3      	subs	r3, r2, r3
 800502c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005030:	4293      	cmp	r3, r2
 8005032:	d901      	bls.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005034:	2303      	movs	r3, #3
 8005036:	e036      	b.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005038:	4b1d      	ldr	r3, [pc, #116]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800503a:	6a1b      	ldr	r3, [r3, #32]
 800503c:	f003 0302 	and.w	r3, r3, #2
 8005040:	2b00      	cmp	r3, #0
 8005042:	d0ee      	beq.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005044:	4b1a      	ldr	r3, [pc, #104]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005046:	6a1b      	ldr	r3, [r3, #32]
 8005048:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	4917      	ldr	r1, [pc, #92]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005052:	4313      	orrs	r3, r2
 8005054:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005056:	7dfb      	ldrb	r3, [r7, #23]
 8005058:	2b01      	cmp	r3, #1
 800505a:	d105      	bne.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800505c:	4b14      	ldr	r3, [pc, #80]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800505e:	69db      	ldr	r3, [r3, #28]
 8005060:	4a13      	ldr	r2, [pc, #76]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005062:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005066:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 0302 	and.w	r3, r3, #2
 8005070:	2b00      	cmp	r3, #0
 8005072:	d008      	beq.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005074:	4b0e      	ldr	r3, [pc, #56]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	490b      	ldr	r1, [pc, #44]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005082:	4313      	orrs	r3, r2
 8005084:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 0310 	and.w	r3, r3, #16
 800508e:	2b00      	cmp	r3, #0
 8005090:	d008      	beq.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005092:	4b07      	ldr	r3, [pc, #28]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	68db      	ldr	r3, [r3, #12]
 800509e:	4904      	ldr	r1, [pc, #16]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050a0:	4313      	orrs	r3, r2
 80050a2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80050a4:	2300      	movs	r3, #0
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3718      	adds	r7, #24
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}
 80050ae:	bf00      	nop
 80050b0:	40021000 	.word	0x40021000
 80050b4:	40007000 	.word	0x40007000
 80050b8:	42420440 	.word	0x42420440

080050bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b082      	sub	sp, #8
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d101      	bne.n	80050ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e041      	b.n	8005152 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d106      	bne.n	80050e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f7fd fcb2 	bl	8002a4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2202      	movs	r2, #2
 80050ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	3304      	adds	r3, #4
 80050f8:	4619      	mov	r1, r3
 80050fa:	4610      	mov	r0, r2
 80050fc:	f000 fab2 	bl	8005664 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2201      	movs	r2, #1
 8005144:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005150:	2300      	movs	r3, #0
}
 8005152:	4618      	mov	r0, r3
 8005154:	3708      	adds	r7, #8
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}

0800515a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800515a:	b580      	push	{r7, lr}
 800515c:	b082      	sub	sp, #8
 800515e:	af00      	add	r7, sp, #0
 8005160:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d101      	bne.n	800516c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e041      	b.n	80051f0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005172:	b2db      	uxtb	r3, r3
 8005174:	2b00      	cmp	r3, #0
 8005176:	d106      	bne.n	8005186 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f000 f839 	bl	80051f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2202      	movs	r2, #2
 800518a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	3304      	adds	r3, #4
 8005196:	4619      	mov	r1, r3
 8005198:	4610      	mov	r0, r2
 800519a:	f000 fa63 	bl	8005664 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2201      	movs	r2, #1
 80051a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2201      	movs	r2, #1
 80051aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2201      	movs	r2, #1
 80051b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2201      	movs	r2, #1
 80051ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2201      	movs	r2, #1
 80051c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2201      	movs	r2, #1
 80051ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2201      	movs	r2, #1
 80051d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2201      	movs	r2, #1
 80051da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2201      	movs	r2, #1
 80051e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2201      	movs	r2, #1
 80051ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051ee:	2300      	movs	r3, #0
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3708      	adds	r7, #8
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b083      	sub	sp, #12
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005200:	bf00      	nop
 8005202:	370c      	adds	r7, #12
 8005204:	46bd      	mov	sp, r7
 8005206:	bc80      	pop	{r7}
 8005208:	4770      	bx	lr
	...

0800520c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d109      	bne.n	8005230 <HAL_TIM_PWM_Start+0x24>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005222:	b2db      	uxtb	r3, r3
 8005224:	2b01      	cmp	r3, #1
 8005226:	bf14      	ite	ne
 8005228:	2301      	movne	r3, #1
 800522a:	2300      	moveq	r3, #0
 800522c:	b2db      	uxtb	r3, r3
 800522e:	e022      	b.n	8005276 <HAL_TIM_PWM_Start+0x6a>
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	2b04      	cmp	r3, #4
 8005234:	d109      	bne.n	800524a <HAL_TIM_PWM_Start+0x3e>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800523c:	b2db      	uxtb	r3, r3
 800523e:	2b01      	cmp	r3, #1
 8005240:	bf14      	ite	ne
 8005242:	2301      	movne	r3, #1
 8005244:	2300      	moveq	r3, #0
 8005246:	b2db      	uxtb	r3, r3
 8005248:	e015      	b.n	8005276 <HAL_TIM_PWM_Start+0x6a>
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	2b08      	cmp	r3, #8
 800524e:	d109      	bne.n	8005264 <HAL_TIM_PWM_Start+0x58>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005256:	b2db      	uxtb	r3, r3
 8005258:	2b01      	cmp	r3, #1
 800525a:	bf14      	ite	ne
 800525c:	2301      	movne	r3, #1
 800525e:	2300      	moveq	r3, #0
 8005260:	b2db      	uxtb	r3, r3
 8005262:	e008      	b.n	8005276 <HAL_TIM_PWM_Start+0x6a>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800526a:	b2db      	uxtb	r3, r3
 800526c:	2b01      	cmp	r3, #1
 800526e:	bf14      	ite	ne
 8005270:	2301      	movne	r3, #1
 8005272:	2300      	moveq	r3, #0
 8005274:	b2db      	uxtb	r3, r3
 8005276:	2b00      	cmp	r3, #0
 8005278:	d001      	beq.n	800527e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	e05e      	b.n	800533c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d104      	bne.n	800528e <HAL_TIM_PWM_Start+0x82>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2202      	movs	r2, #2
 8005288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800528c:	e013      	b.n	80052b6 <HAL_TIM_PWM_Start+0xaa>
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	2b04      	cmp	r3, #4
 8005292:	d104      	bne.n	800529e <HAL_TIM_PWM_Start+0x92>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2202      	movs	r2, #2
 8005298:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800529c:	e00b      	b.n	80052b6 <HAL_TIM_PWM_Start+0xaa>
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	2b08      	cmp	r3, #8
 80052a2:	d104      	bne.n	80052ae <HAL_TIM_PWM_Start+0xa2>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2202      	movs	r2, #2
 80052a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052ac:	e003      	b.n	80052b6 <HAL_TIM_PWM_Start+0xaa>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2202      	movs	r2, #2
 80052b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	2201      	movs	r2, #1
 80052bc:	6839      	ldr	r1, [r7, #0]
 80052be:	4618      	mov	r0, r3
 80052c0:	f000 fc50 	bl	8005b64 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a1e      	ldr	r2, [pc, #120]	; (8005344 <HAL_TIM_PWM_Start+0x138>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d107      	bne.n	80052de <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80052dc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a18      	ldr	r2, [pc, #96]	; (8005344 <HAL_TIM_PWM_Start+0x138>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d00e      	beq.n	8005306 <HAL_TIM_PWM_Start+0xfa>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052f0:	d009      	beq.n	8005306 <HAL_TIM_PWM_Start+0xfa>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a14      	ldr	r2, [pc, #80]	; (8005348 <HAL_TIM_PWM_Start+0x13c>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d004      	beq.n	8005306 <HAL_TIM_PWM_Start+0xfa>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a12      	ldr	r2, [pc, #72]	; (800534c <HAL_TIM_PWM_Start+0x140>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d111      	bne.n	800532a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	f003 0307 	and.w	r3, r3, #7
 8005310:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2b06      	cmp	r3, #6
 8005316:	d010      	beq.n	800533a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f042 0201 	orr.w	r2, r2, #1
 8005326:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005328:	e007      	b.n	800533a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f042 0201 	orr.w	r2, r2, #1
 8005338:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800533a:	2300      	movs	r3, #0
}
 800533c:	4618      	mov	r0, r3
 800533e:	3710      	adds	r7, #16
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}
 8005344:	40012c00 	.word	0x40012c00
 8005348:	40000400 	.word	0x40000400
 800534c:	40000800 	.word	0x40000800

08005350 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b086      	sub	sp, #24
 8005354:	af00      	add	r7, sp, #0
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	60b9      	str	r1, [r7, #8]
 800535a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800535c:	2300      	movs	r3, #0
 800535e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005366:	2b01      	cmp	r3, #1
 8005368:	d101      	bne.n	800536e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800536a:	2302      	movs	r3, #2
 800536c:	e0ae      	b.n	80054cc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2201      	movs	r2, #1
 8005372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2b0c      	cmp	r3, #12
 800537a:	f200 809f 	bhi.w	80054bc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800537e:	a201      	add	r2, pc, #4	; (adr r2, 8005384 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005384:	080053b9 	.word	0x080053b9
 8005388:	080054bd 	.word	0x080054bd
 800538c:	080054bd 	.word	0x080054bd
 8005390:	080054bd 	.word	0x080054bd
 8005394:	080053f9 	.word	0x080053f9
 8005398:	080054bd 	.word	0x080054bd
 800539c:	080054bd 	.word	0x080054bd
 80053a0:	080054bd 	.word	0x080054bd
 80053a4:	0800543b 	.word	0x0800543b
 80053a8:	080054bd 	.word	0x080054bd
 80053ac:	080054bd 	.word	0x080054bd
 80053b0:	080054bd 	.word	0x080054bd
 80053b4:	0800547b 	.word	0x0800547b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	68b9      	ldr	r1, [r7, #8]
 80053be:	4618      	mov	r0, r3
 80053c0:	f000 f9b2 	bl	8005728 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	699a      	ldr	r2, [r3, #24]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f042 0208 	orr.w	r2, r2, #8
 80053d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	699a      	ldr	r2, [r3, #24]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f022 0204 	bic.w	r2, r2, #4
 80053e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	6999      	ldr	r1, [r3, #24]
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	691a      	ldr	r2, [r3, #16]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	430a      	orrs	r2, r1
 80053f4:	619a      	str	r2, [r3, #24]
      break;
 80053f6:	e064      	b.n	80054c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	68b9      	ldr	r1, [r7, #8]
 80053fe:	4618      	mov	r0, r3
 8005400:	f000 f9f8 	bl	80057f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	699a      	ldr	r2, [r3, #24]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005412:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	699a      	ldr	r2, [r3, #24]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005422:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	6999      	ldr	r1, [r3, #24]
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	691b      	ldr	r3, [r3, #16]
 800542e:	021a      	lsls	r2, r3, #8
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	430a      	orrs	r2, r1
 8005436:	619a      	str	r2, [r3, #24]
      break;
 8005438:	e043      	b.n	80054c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	68b9      	ldr	r1, [r7, #8]
 8005440:	4618      	mov	r0, r3
 8005442:	f000 fa41 	bl	80058c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	69da      	ldr	r2, [r3, #28]
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f042 0208 	orr.w	r2, r2, #8
 8005454:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	69da      	ldr	r2, [r3, #28]
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f022 0204 	bic.w	r2, r2, #4
 8005464:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	69d9      	ldr	r1, [r3, #28]
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	691a      	ldr	r2, [r3, #16]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	430a      	orrs	r2, r1
 8005476:	61da      	str	r2, [r3, #28]
      break;
 8005478:	e023      	b.n	80054c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	68b9      	ldr	r1, [r7, #8]
 8005480:	4618      	mov	r0, r3
 8005482:	f000 fa8b 	bl	800599c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	69da      	ldr	r2, [r3, #28]
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005494:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	69da      	ldr	r2, [r3, #28]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	69d9      	ldr	r1, [r3, #28]
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	691b      	ldr	r3, [r3, #16]
 80054b0:	021a      	lsls	r2, r3, #8
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	430a      	orrs	r2, r1
 80054b8:	61da      	str	r2, [r3, #28]
      break;
 80054ba:	e002      	b.n	80054c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	75fb      	strb	r3, [r7, #23]
      break;
 80054c0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2200      	movs	r2, #0
 80054c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80054ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3718      	adds	r7, #24
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}

080054d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054de:	2300      	movs	r3, #0
 80054e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d101      	bne.n	80054f0 <HAL_TIM_ConfigClockSource+0x1c>
 80054ec:	2302      	movs	r3, #2
 80054ee:	e0b4      	b.n	800565a <HAL_TIM_ConfigClockSource+0x186>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2202      	movs	r2, #2
 80054fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800550e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005516:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	68ba      	ldr	r2, [r7, #8]
 800551e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005528:	d03e      	beq.n	80055a8 <HAL_TIM_ConfigClockSource+0xd4>
 800552a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800552e:	f200 8087 	bhi.w	8005640 <HAL_TIM_ConfigClockSource+0x16c>
 8005532:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005536:	f000 8086 	beq.w	8005646 <HAL_TIM_ConfigClockSource+0x172>
 800553a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800553e:	d87f      	bhi.n	8005640 <HAL_TIM_ConfigClockSource+0x16c>
 8005540:	2b70      	cmp	r3, #112	; 0x70
 8005542:	d01a      	beq.n	800557a <HAL_TIM_ConfigClockSource+0xa6>
 8005544:	2b70      	cmp	r3, #112	; 0x70
 8005546:	d87b      	bhi.n	8005640 <HAL_TIM_ConfigClockSource+0x16c>
 8005548:	2b60      	cmp	r3, #96	; 0x60
 800554a:	d050      	beq.n	80055ee <HAL_TIM_ConfigClockSource+0x11a>
 800554c:	2b60      	cmp	r3, #96	; 0x60
 800554e:	d877      	bhi.n	8005640 <HAL_TIM_ConfigClockSource+0x16c>
 8005550:	2b50      	cmp	r3, #80	; 0x50
 8005552:	d03c      	beq.n	80055ce <HAL_TIM_ConfigClockSource+0xfa>
 8005554:	2b50      	cmp	r3, #80	; 0x50
 8005556:	d873      	bhi.n	8005640 <HAL_TIM_ConfigClockSource+0x16c>
 8005558:	2b40      	cmp	r3, #64	; 0x40
 800555a:	d058      	beq.n	800560e <HAL_TIM_ConfigClockSource+0x13a>
 800555c:	2b40      	cmp	r3, #64	; 0x40
 800555e:	d86f      	bhi.n	8005640 <HAL_TIM_ConfigClockSource+0x16c>
 8005560:	2b30      	cmp	r3, #48	; 0x30
 8005562:	d064      	beq.n	800562e <HAL_TIM_ConfigClockSource+0x15a>
 8005564:	2b30      	cmp	r3, #48	; 0x30
 8005566:	d86b      	bhi.n	8005640 <HAL_TIM_ConfigClockSource+0x16c>
 8005568:	2b20      	cmp	r3, #32
 800556a:	d060      	beq.n	800562e <HAL_TIM_ConfigClockSource+0x15a>
 800556c:	2b20      	cmp	r3, #32
 800556e:	d867      	bhi.n	8005640 <HAL_TIM_ConfigClockSource+0x16c>
 8005570:	2b00      	cmp	r3, #0
 8005572:	d05c      	beq.n	800562e <HAL_TIM_ConfigClockSource+0x15a>
 8005574:	2b10      	cmp	r3, #16
 8005576:	d05a      	beq.n	800562e <HAL_TIM_ConfigClockSource+0x15a>
 8005578:	e062      	b.n	8005640 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800558a:	f000 facc 	bl	8005b26 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800559c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	68ba      	ldr	r2, [r7, #8]
 80055a4:	609a      	str	r2, [r3, #8]
      break;
 80055a6:	e04f      	b.n	8005648 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80055b8:	f000 fab5 	bl	8005b26 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	689a      	ldr	r2, [r3, #8]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80055ca:	609a      	str	r2, [r3, #8]
      break;
 80055cc:	e03c      	b.n	8005648 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055da:	461a      	mov	r2, r3
 80055dc:	f000 fa2c 	bl	8005a38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	2150      	movs	r1, #80	; 0x50
 80055e6:	4618      	mov	r0, r3
 80055e8:	f000 fa83 	bl	8005af2 <TIM_ITRx_SetConfig>
      break;
 80055ec:	e02c      	b.n	8005648 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80055fa:	461a      	mov	r2, r3
 80055fc:	f000 fa4a 	bl	8005a94 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	2160      	movs	r1, #96	; 0x60
 8005606:	4618      	mov	r0, r3
 8005608:	f000 fa73 	bl	8005af2 <TIM_ITRx_SetConfig>
      break;
 800560c:	e01c      	b.n	8005648 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800561a:	461a      	mov	r2, r3
 800561c:	f000 fa0c 	bl	8005a38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	2140      	movs	r1, #64	; 0x40
 8005626:	4618      	mov	r0, r3
 8005628:	f000 fa63 	bl	8005af2 <TIM_ITRx_SetConfig>
      break;
 800562c:	e00c      	b.n	8005648 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4619      	mov	r1, r3
 8005638:	4610      	mov	r0, r2
 800563a:	f000 fa5a 	bl	8005af2 <TIM_ITRx_SetConfig>
      break;
 800563e:	e003      	b.n	8005648 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	73fb      	strb	r3, [r7, #15]
      break;
 8005644:	e000      	b.n	8005648 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005646:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2201      	movs	r2, #1
 800564c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2200      	movs	r2, #0
 8005654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005658:	7bfb      	ldrb	r3, [r7, #15]
}
 800565a:	4618      	mov	r0, r3
 800565c:	3710      	adds	r7, #16
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}
	...

08005664 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005664:	b480      	push	{r7}
 8005666:	b085      	sub	sp, #20
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4a29      	ldr	r2, [pc, #164]	; (800571c <TIM_Base_SetConfig+0xb8>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d00b      	beq.n	8005694 <TIM_Base_SetConfig+0x30>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005682:	d007      	beq.n	8005694 <TIM_Base_SetConfig+0x30>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	4a26      	ldr	r2, [pc, #152]	; (8005720 <TIM_Base_SetConfig+0xbc>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d003      	beq.n	8005694 <TIM_Base_SetConfig+0x30>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	4a25      	ldr	r2, [pc, #148]	; (8005724 <TIM_Base_SetConfig+0xc0>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d108      	bne.n	80056a6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800569a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	68fa      	ldr	r2, [r7, #12]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4a1c      	ldr	r2, [pc, #112]	; (800571c <TIM_Base_SetConfig+0xb8>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d00b      	beq.n	80056c6 <TIM_Base_SetConfig+0x62>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056b4:	d007      	beq.n	80056c6 <TIM_Base_SetConfig+0x62>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	4a19      	ldr	r2, [pc, #100]	; (8005720 <TIM_Base_SetConfig+0xbc>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d003      	beq.n	80056c6 <TIM_Base_SetConfig+0x62>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	4a18      	ldr	r2, [pc, #96]	; (8005724 <TIM_Base_SetConfig+0xc0>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d108      	bne.n	80056d8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	68db      	ldr	r3, [r3, #12]
 80056d2:	68fa      	ldr	r2, [r7, #12]
 80056d4:	4313      	orrs	r3, r2
 80056d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	695b      	ldr	r3, [r3, #20]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	68fa      	ldr	r2, [r7, #12]
 80056ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	689a      	ldr	r2, [r3, #8]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	4a07      	ldr	r2, [pc, #28]	; (800571c <TIM_Base_SetConfig+0xb8>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d103      	bne.n	800570c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	691a      	ldr	r2, [r3, #16]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2201      	movs	r2, #1
 8005710:	615a      	str	r2, [r3, #20]
}
 8005712:	bf00      	nop
 8005714:	3714      	adds	r7, #20
 8005716:	46bd      	mov	sp, r7
 8005718:	bc80      	pop	{r7}
 800571a:	4770      	bx	lr
 800571c:	40012c00 	.word	0x40012c00
 8005720:	40000400 	.word	0x40000400
 8005724:	40000800 	.word	0x40000800

08005728 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005728:	b480      	push	{r7}
 800572a:	b087      	sub	sp, #28
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6a1b      	ldr	r3, [r3, #32]
 8005736:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6a1b      	ldr	r3, [r3, #32]
 800573c:	f023 0201 	bic.w	r2, r3, #1
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	699b      	ldr	r3, [r3, #24]
 800574e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005756:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f023 0303 	bic.w	r3, r3, #3
 800575e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	4313      	orrs	r3, r2
 8005768:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	f023 0302 	bic.w	r3, r3, #2
 8005770:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	697a      	ldr	r2, [r7, #20]
 8005778:	4313      	orrs	r3, r2
 800577a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	4a1c      	ldr	r2, [pc, #112]	; (80057f0 <TIM_OC1_SetConfig+0xc8>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d10c      	bne.n	800579e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	f023 0308 	bic.w	r3, r3, #8
 800578a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	697a      	ldr	r2, [r7, #20]
 8005792:	4313      	orrs	r3, r2
 8005794:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	f023 0304 	bic.w	r3, r3, #4
 800579c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4a13      	ldr	r2, [pc, #76]	; (80057f0 <TIM_OC1_SetConfig+0xc8>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d111      	bne.n	80057ca <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80057b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	695b      	ldr	r3, [r3, #20]
 80057ba:	693a      	ldr	r2, [r7, #16]
 80057bc:	4313      	orrs	r3, r2
 80057be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	699b      	ldr	r3, [r3, #24]
 80057c4:	693a      	ldr	r2, [r7, #16]
 80057c6:	4313      	orrs	r3, r2
 80057c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	693a      	ldr	r2, [r7, #16]
 80057ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	68fa      	ldr	r2, [r7, #12]
 80057d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	685a      	ldr	r2, [r3, #4]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	697a      	ldr	r2, [r7, #20]
 80057e2:	621a      	str	r2, [r3, #32]
}
 80057e4:	bf00      	nop
 80057e6:	371c      	adds	r7, #28
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bc80      	pop	{r7}
 80057ec:	4770      	bx	lr
 80057ee:	bf00      	nop
 80057f0:	40012c00 	.word	0x40012c00

080057f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b087      	sub	sp, #28
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6a1b      	ldr	r3, [r3, #32]
 8005802:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6a1b      	ldr	r3, [r3, #32]
 8005808:	f023 0210 	bic.w	r2, r3, #16
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	699b      	ldr	r3, [r3, #24]
 800581a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005822:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800582a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	021b      	lsls	r3, r3, #8
 8005832:	68fa      	ldr	r2, [r7, #12]
 8005834:	4313      	orrs	r3, r2
 8005836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	f023 0320 	bic.w	r3, r3, #32
 800583e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	011b      	lsls	r3, r3, #4
 8005846:	697a      	ldr	r2, [r7, #20]
 8005848:	4313      	orrs	r3, r2
 800584a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	4a1d      	ldr	r2, [pc, #116]	; (80058c4 <TIM_OC2_SetConfig+0xd0>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d10d      	bne.n	8005870 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800585a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	011b      	lsls	r3, r3, #4
 8005862:	697a      	ldr	r2, [r7, #20]
 8005864:	4313      	orrs	r3, r2
 8005866:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800586e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4a14      	ldr	r2, [pc, #80]	; (80058c4 <TIM_OC2_SetConfig+0xd0>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d113      	bne.n	80058a0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800587e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005886:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	695b      	ldr	r3, [r3, #20]
 800588c:	009b      	lsls	r3, r3, #2
 800588e:	693a      	ldr	r2, [r7, #16]
 8005890:	4313      	orrs	r3, r2
 8005892:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	699b      	ldr	r3, [r3, #24]
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	693a      	ldr	r2, [r7, #16]
 800589c:	4313      	orrs	r3, r2
 800589e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	693a      	ldr	r2, [r7, #16]
 80058a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	68fa      	ldr	r2, [r7, #12]
 80058aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	685a      	ldr	r2, [r3, #4]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	697a      	ldr	r2, [r7, #20]
 80058b8:	621a      	str	r2, [r3, #32]
}
 80058ba:	bf00      	nop
 80058bc:	371c      	adds	r7, #28
 80058be:	46bd      	mov	sp, r7
 80058c0:	bc80      	pop	{r7}
 80058c2:	4770      	bx	lr
 80058c4:	40012c00 	.word	0x40012c00

080058c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b087      	sub	sp, #28
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6a1b      	ldr	r3, [r3, #32]
 80058d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6a1b      	ldr	r3, [r3, #32]
 80058dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	69db      	ldr	r3, [r3, #28]
 80058ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f023 0303 	bic.w	r3, r3, #3
 80058fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	68fa      	ldr	r2, [r7, #12]
 8005906:	4313      	orrs	r3, r2
 8005908:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005910:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	021b      	lsls	r3, r3, #8
 8005918:	697a      	ldr	r2, [r7, #20]
 800591a:	4313      	orrs	r3, r2
 800591c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4a1d      	ldr	r2, [pc, #116]	; (8005998 <TIM_OC3_SetConfig+0xd0>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d10d      	bne.n	8005942 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800592c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	021b      	lsls	r3, r3, #8
 8005934:	697a      	ldr	r2, [r7, #20]
 8005936:	4313      	orrs	r3, r2
 8005938:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005940:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a14      	ldr	r2, [pc, #80]	; (8005998 <TIM_OC3_SetConfig+0xd0>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d113      	bne.n	8005972 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005950:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005958:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	695b      	ldr	r3, [r3, #20]
 800595e:	011b      	lsls	r3, r3, #4
 8005960:	693a      	ldr	r2, [r7, #16]
 8005962:	4313      	orrs	r3, r2
 8005964:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	699b      	ldr	r3, [r3, #24]
 800596a:	011b      	lsls	r3, r3, #4
 800596c:	693a      	ldr	r2, [r7, #16]
 800596e:	4313      	orrs	r3, r2
 8005970:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	693a      	ldr	r2, [r7, #16]
 8005976:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	68fa      	ldr	r2, [r7, #12]
 800597c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	685a      	ldr	r2, [r3, #4]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	697a      	ldr	r2, [r7, #20]
 800598a:	621a      	str	r2, [r3, #32]
}
 800598c:	bf00      	nop
 800598e:	371c      	adds	r7, #28
 8005990:	46bd      	mov	sp, r7
 8005992:	bc80      	pop	{r7}
 8005994:	4770      	bx	lr
 8005996:	bf00      	nop
 8005998:	40012c00 	.word	0x40012c00

0800599c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800599c:	b480      	push	{r7}
 800599e:	b087      	sub	sp, #28
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a1b      	ldr	r3, [r3, #32]
 80059aa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6a1b      	ldr	r3, [r3, #32]
 80059b0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	69db      	ldr	r3, [r3, #28]
 80059c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	021b      	lsls	r3, r3, #8
 80059da:	68fa      	ldr	r2, [r7, #12]
 80059dc:	4313      	orrs	r3, r2
 80059de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80059e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	031b      	lsls	r3, r3, #12
 80059ee:	693a      	ldr	r2, [r7, #16]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	4a0f      	ldr	r2, [pc, #60]	; (8005a34 <TIM_OC4_SetConfig+0x98>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d109      	bne.n	8005a10 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a02:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	695b      	ldr	r3, [r3, #20]
 8005a08:	019b      	lsls	r3, r3, #6
 8005a0a:	697a      	ldr	r2, [r7, #20]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	697a      	ldr	r2, [r7, #20]
 8005a14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	68fa      	ldr	r2, [r7, #12]
 8005a1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	685a      	ldr	r2, [r3, #4]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	693a      	ldr	r2, [r7, #16]
 8005a28:	621a      	str	r2, [r3, #32]
}
 8005a2a:	bf00      	nop
 8005a2c:	371c      	adds	r7, #28
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bc80      	pop	{r7}
 8005a32:	4770      	bx	lr
 8005a34:	40012c00 	.word	0x40012c00

08005a38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b087      	sub	sp, #28
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	60f8      	str	r0, [r7, #12]
 8005a40:	60b9      	str	r1, [r7, #8]
 8005a42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	6a1b      	ldr	r3, [r3, #32]
 8005a48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	6a1b      	ldr	r3, [r3, #32]
 8005a4e:	f023 0201 	bic.w	r2, r3, #1
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	699b      	ldr	r3, [r3, #24]
 8005a5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	011b      	lsls	r3, r3, #4
 8005a68:	693a      	ldr	r2, [r7, #16]
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	f023 030a 	bic.w	r3, r3, #10
 8005a74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a76:	697a      	ldr	r2, [r7, #20]
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	693a      	ldr	r2, [r7, #16]
 8005a82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	697a      	ldr	r2, [r7, #20]
 8005a88:	621a      	str	r2, [r3, #32]
}
 8005a8a:	bf00      	nop
 8005a8c:	371c      	adds	r7, #28
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bc80      	pop	{r7}
 8005a92:	4770      	bx	lr

08005a94 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b087      	sub	sp, #28
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	60f8      	str	r0, [r7, #12]
 8005a9c:	60b9      	str	r1, [r7, #8]
 8005a9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	6a1b      	ldr	r3, [r3, #32]
 8005aa4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	6a1b      	ldr	r3, [r3, #32]
 8005aaa:	f023 0210 	bic.w	r2, r3, #16
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	699b      	ldr	r3, [r3, #24]
 8005ab6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005abe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	031b      	lsls	r3, r3, #12
 8005ac4:	693a      	ldr	r2, [r7, #16]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005ad0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	011b      	lsls	r3, r3, #4
 8005ad6:	697a      	ldr	r2, [r7, #20]
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	693a      	ldr	r2, [r7, #16]
 8005ae0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	697a      	ldr	r2, [r7, #20]
 8005ae6:	621a      	str	r2, [r3, #32]
}
 8005ae8:	bf00      	nop
 8005aea:	371c      	adds	r7, #28
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bc80      	pop	{r7}
 8005af0:	4770      	bx	lr

08005af2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005af2:	b480      	push	{r7}
 8005af4:	b085      	sub	sp, #20
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	6078      	str	r0, [r7, #4]
 8005afa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b0a:	683a      	ldr	r2, [r7, #0]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	f043 0307 	orr.w	r3, r3, #7
 8005b14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	68fa      	ldr	r2, [r7, #12]
 8005b1a:	609a      	str	r2, [r3, #8]
}
 8005b1c:	bf00      	nop
 8005b1e:	3714      	adds	r7, #20
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bc80      	pop	{r7}
 8005b24:	4770      	bx	lr

08005b26 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b26:	b480      	push	{r7}
 8005b28:	b087      	sub	sp, #28
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	60f8      	str	r0, [r7, #12]
 8005b2e:	60b9      	str	r1, [r7, #8]
 8005b30:	607a      	str	r2, [r7, #4]
 8005b32:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b40:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	021a      	lsls	r2, r3, #8
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	431a      	orrs	r2, r3
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	697a      	ldr	r2, [r7, #20]
 8005b50:	4313      	orrs	r3, r2
 8005b52:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	697a      	ldr	r2, [r7, #20]
 8005b58:	609a      	str	r2, [r3, #8]
}
 8005b5a:	bf00      	nop
 8005b5c:	371c      	adds	r7, #28
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bc80      	pop	{r7}
 8005b62:	4770      	bx	lr

08005b64 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b087      	sub	sp, #28
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	60f8      	str	r0, [r7, #12]
 8005b6c:	60b9      	str	r1, [r7, #8]
 8005b6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	f003 031f 	and.w	r3, r3, #31
 8005b76:	2201      	movs	r2, #1
 8005b78:	fa02 f303 	lsl.w	r3, r2, r3
 8005b7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	6a1a      	ldr	r2, [r3, #32]
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	43db      	mvns	r3, r3
 8005b86:	401a      	ands	r2, r3
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6a1a      	ldr	r2, [r3, #32]
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	f003 031f 	and.w	r3, r3, #31
 8005b96:	6879      	ldr	r1, [r7, #4]
 8005b98:	fa01 f303 	lsl.w	r3, r1, r3
 8005b9c:	431a      	orrs	r2, r3
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	621a      	str	r2, [r3, #32]
}
 8005ba2:	bf00      	nop
 8005ba4:	371c      	adds	r7, #28
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bc80      	pop	{r7}
 8005baa:	4770      	bx	lr

08005bac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b085      	sub	sp, #20
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d101      	bne.n	8005bc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005bc0:	2302      	movs	r3, #2
 8005bc2:	e046      	b.n	8005c52 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2202      	movs	r2, #2
 8005bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	68fa      	ldr	r2, [r7, #12]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	68fa      	ldr	r2, [r7, #12]
 8005bfc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a16      	ldr	r2, [pc, #88]	; (8005c5c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d00e      	beq.n	8005c26 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c10:	d009      	beq.n	8005c26 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a12      	ldr	r2, [pc, #72]	; (8005c60 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d004      	beq.n	8005c26 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a10      	ldr	r2, [pc, #64]	; (8005c64 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d10c      	bne.n	8005c40 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	68ba      	ldr	r2, [r7, #8]
 8005c34:	4313      	orrs	r3, r2
 8005c36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	68ba      	ldr	r2, [r7, #8]
 8005c3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2201      	movs	r2, #1
 8005c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c50:	2300      	movs	r3, #0
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3714      	adds	r7, #20
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bc80      	pop	{r7}
 8005c5a:	4770      	bx	lr
 8005c5c:	40012c00 	.word	0x40012c00
 8005c60:	40000400 	.word	0x40000400
 8005c64:	40000800 	.word	0x40000800

08005c68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b082      	sub	sp, #8
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d101      	bne.n	8005c7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	e042      	b.n	8005d00 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c80:	b2db      	uxtb	r3, r3
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d106      	bne.n	8005c94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f7fc ff2e 	bl	8002af0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2224      	movs	r2, #36	; 0x24
 8005c98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	68da      	ldr	r2, [r3, #12]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005caa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f000 fdc5 	bl	800683c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	691a      	ldr	r2, [r3, #16]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005cc0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	695a      	ldr	r2, [r3, #20]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005cd0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	68da      	ldr	r2, [r3, #12]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ce0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2220      	movs	r2, #32
 8005cec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2220      	movs	r2, #32
 8005cf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005cfe:	2300      	movs	r3, #0
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3708      	adds	r7, #8
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}

08005d08 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b08a      	sub	sp, #40	; 0x28
 8005d0c:	af02      	add	r7, sp, #8
 8005d0e:	60f8      	str	r0, [r7, #12]
 8005d10:	60b9      	str	r1, [r7, #8]
 8005d12:	603b      	str	r3, [r7, #0]
 8005d14:	4613      	mov	r3, r2
 8005d16:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	2b20      	cmp	r3, #32
 8005d26:	d16d      	bne.n	8005e04 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d002      	beq.n	8005d34 <HAL_UART_Transmit+0x2c>
 8005d2e:	88fb      	ldrh	r3, [r7, #6]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d101      	bne.n	8005d38 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	e066      	b.n	8005e06 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2221      	movs	r2, #33	; 0x21
 8005d42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d46:	f7fd f8a7 	bl	8002e98 <HAL_GetTick>
 8005d4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	88fa      	ldrh	r2, [r7, #6]
 8005d50:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	88fa      	ldrh	r2, [r7, #6]
 8005d56:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d60:	d108      	bne.n	8005d74 <HAL_UART_Transmit+0x6c>
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	691b      	ldr	r3, [r3, #16]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d104      	bne.n	8005d74 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	61bb      	str	r3, [r7, #24]
 8005d72:	e003      	b.n	8005d7c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005d7c:	e02a      	b.n	8005dd4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	9300      	str	r3, [sp, #0]
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	2200      	movs	r2, #0
 8005d86:	2180      	movs	r1, #128	; 0x80
 8005d88:	68f8      	ldr	r0, [r7, #12]
 8005d8a:	f000 fb14 	bl	80063b6 <UART_WaitOnFlagUntilTimeout>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d001      	beq.n	8005d98 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8005d94:	2303      	movs	r3, #3
 8005d96:	e036      	b.n	8005e06 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005d98:	69fb      	ldr	r3, [r7, #28]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d10b      	bne.n	8005db6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d9e:	69bb      	ldr	r3, [r7, #24]
 8005da0:	881b      	ldrh	r3, [r3, #0]
 8005da2:	461a      	mov	r2, r3
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005dac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005dae:	69bb      	ldr	r3, [r7, #24]
 8005db0:	3302      	adds	r3, #2
 8005db2:	61bb      	str	r3, [r7, #24]
 8005db4:	e007      	b.n	8005dc6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005db6:	69fb      	ldr	r3, [r7, #28]
 8005db8:	781a      	ldrb	r2, [r3, #0]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005dc0:	69fb      	ldr	r3, [r7, #28]
 8005dc2:	3301      	adds	r3, #1
 8005dc4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	3b01      	subs	r3, #1
 8005dce:	b29a      	uxth	r2, r3
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d1cf      	bne.n	8005d7e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	9300      	str	r3, [sp, #0]
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	2200      	movs	r2, #0
 8005de6:	2140      	movs	r1, #64	; 0x40
 8005de8:	68f8      	ldr	r0, [r7, #12]
 8005dea:	f000 fae4 	bl	80063b6 <UART_WaitOnFlagUntilTimeout>
 8005dee:	4603      	mov	r3, r0
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d001      	beq.n	8005df8 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8005df4:	2303      	movs	r3, #3
 8005df6:	e006      	b.n	8005e06 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2220      	movs	r2, #32
 8005dfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005e00:	2300      	movs	r3, #0
 8005e02:	e000      	b.n	8005e06 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005e04:	2302      	movs	r3, #2
  }
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3720      	adds	r7, #32
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}

08005e0e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e0e:	b580      	push	{r7, lr}
 8005e10:	b084      	sub	sp, #16
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	60f8      	str	r0, [r7, #12]
 8005e16:	60b9      	str	r1, [r7, #8]
 8005e18:	4613      	mov	r3, r2
 8005e1a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	2b20      	cmp	r3, #32
 8005e26:	d112      	bne.n	8005e4e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d002      	beq.n	8005e34 <HAL_UART_Receive_IT+0x26>
 8005e2e:	88fb      	ldrh	r3, [r7, #6]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d101      	bne.n	8005e38 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	e00b      	b.n	8005e50 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005e3e:	88fb      	ldrh	r3, [r7, #6]
 8005e40:	461a      	mov	r2, r3
 8005e42:	68b9      	ldr	r1, [r7, #8]
 8005e44:	68f8      	ldr	r0, [r7, #12]
 8005e46:	f000 fb24 	bl	8006492 <UART_Start_Receive_IT>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	e000      	b.n	8005e50 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005e4e:	2302      	movs	r3, #2
  }
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3710      	adds	r7, #16
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}

08005e58 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b0ba      	sub	sp, #232	; 0xe8
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	68db      	ldr	r3, [r3, #12]
 8005e70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	695b      	ldr	r3, [r3, #20]
 8005e7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005e84:	2300      	movs	r3, #0
 8005e86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005e8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e8e:	f003 030f 	and.w	r3, r3, #15
 8005e92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005e96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d10f      	bne.n	8005ebe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ea2:	f003 0320 	and.w	r3, r3, #32
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d009      	beq.n	8005ebe <HAL_UART_IRQHandler+0x66>
 8005eaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005eae:	f003 0320 	and.w	r3, r3, #32
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d003      	beq.n	8005ebe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f000 fc01 	bl	80066be <UART_Receive_IT>
      return;
 8005ebc:	e25b      	b.n	8006376 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005ebe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	f000 80de 	beq.w	8006084 <HAL_UART_IRQHandler+0x22c>
 8005ec8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ecc:	f003 0301 	and.w	r3, r3, #1
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d106      	bne.n	8005ee2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005ed4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ed8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	f000 80d1 	beq.w	8006084 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005ee2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ee6:	f003 0301 	and.w	r3, r3, #1
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d00b      	beq.n	8005f06 <HAL_UART_IRQHandler+0xae>
 8005eee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d005      	beq.n	8005f06 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005efe:	f043 0201 	orr.w	r2, r3, #1
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f0a:	f003 0304 	and.w	r3, r3, #4
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d00b      	beq.n	8005f2a <HAL_UART_IRQHandler+0xd2>
 8005f12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f16:	f003 0301 	and.w	r3, r3, #1
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d005      	beq.n	8005f2a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f22:	f043 0202 	orr.w	r2, r3, #2
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f2e:	f003 0302 	and.w	r3, r3, #2
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d00b      	beq.n	8005f4e <HAL_UART_IRQHandler+0xf6>
 8005f36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f3a:	f003 0301 	and.w	r3, r3, #1
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d005      	beq.n	8005f4e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f46:	f043 0204 	orr.w	r2, r3, #4
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005f4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f52:	f003 0308 	and.w	r3, r3, #8
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d011      	beq.n	8005f7e <HAL_UART_IRQHandler+0x126>
 8005f5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f5e:	f003 0320 	and.w	r3, r3, #32
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d105      	bne.n	8005f72 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005f66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f6a:	f003 0301 	and.w	r3, r3, #1
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d005      	beq.n	8005f7e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f76:	f043 0208 	orr.w	r2, r3, #8
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	f000 81f2 	beq.w	800636c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f8c:	f003 0320 	and.w	r3, r3, #32
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d008      	beq.n	8005fa6 <HAL_UART_IRQHandler+0x14e>
 8005f94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f98:	f003 0320 	and.w	r3, r3, #32
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d002      	beq.n	8005fa6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f000 fb8c 	bl	80066be <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	695b      	ldr	r3, [r3, #20]
 8005fac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	bf14      	ite	ne
 8005fb4:	2301      	movne	r3, #1
 8005fb6:	2300      	moveq	r3, #0
 8005fb8:	b2db      	uxtb	r3, r3
 8005fba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fc2:	f003 0308 	and.w	r3, r3, #8
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d103      	bne.n	8005fd2 <HAL_UART_IRQHandler+0x17a>
 8005fca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d04f      	beq.n	8006072 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f000 fa96 	bl	8006504 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	695b      	ldr	r3, [r3, #20]
 8005fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d041      	beq.n	800606a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	3314      	adds	r3, #20
 8005fec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ff4:	e853 3f00 	ldrex	r3, [r3]
 8005ff8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005ffc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006000:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006004:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	3314      	adds	r3, #20
 800600e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006012:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006016:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800601a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800601e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006022:	e841 2300 	strex	r3, r2, [r1]
 8006026:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800602a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800602e:	2b00      	cmp	r3, #0
 8006030:	d1d9      	bne.n	8005fe6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006036:	2b00      	cmp	r3, #0
 8006038:	d013      	beq.n	8006062 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800603e:	4a7e      	ldr	r2, [pc, #504]	; (8006238 <HAL_UART_IRQHandler+0x3e0>)
 8006040:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006046:	4618      	mov	r0, r3
 8006048:	f7fd fc9a 	bl	8003980 <HAL_DMA_Abort_IT>
 800604c:	4603      	mov	r3, r0
 800604e:	2b00      	cmp	r3, #0
 8006050:	d016      	beq.n	8006080 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006056:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006058:	687a      	ldr	r2, [r7, #4]
 800605a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800605c:	4610      	mov	r0, r2
 800605e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006060:	e00e      	b.n	8006080 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f000 f993 	bl	800638e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006068:	e00a      	b.n	8006080 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f000 f98f 	bl	800638e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006070:	e006      	b.n	8006080 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f000 f98b 	bl	800638e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2200      	movs	r2, #0
 800607c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800607e:	e175      	b.n	800636c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006080:	bf00      	nop
    return;
 8006082:	e173      	b.n	800636c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006088:	2b01      	cmp	r3, #1
 800608a:	f040 814f 	bne.w	800632c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800608e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006092:	f003 0310 	and.w	r3, r3, #16
 8006096:	2b00      	cmp	r3, #0
 8006098:	f000 8148 	beq.w	800632c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800609c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060a0:	f003 0310 	and.w	r3, r3, #16
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	f000 8141 	beq.w	800632c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80060aa:	2300      	movs	r3, #0
 80060ac:	60bb      	str	r3, [r7, #8]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	60bb      	str	r3, [r7, #8]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	60bb      	str	r3, [r7, #8]
 80060be:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	695b      	ldr	r3, [r3, #20]
 80060c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	f000 80b6 	beq.w	800623c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80060dc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	f000 8145 	beq.w	8006370 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80060ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80060ee:	429a      	cmp	r2, r3
 80060f0:	f080 813e 	bcs.w	8006370 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80060fa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006100:	699b      	ldr	r3, [r3, #24]
 8006102:	2b20      	cmp	r3, #32
 8006104:	f000 8088 	beq.w	8006218 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	330c      	adds	r3, #12
 800610e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006112:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006116:	e853 3f00 	ldrex	r3, [r3]
 800611a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800611e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006122:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006126:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	330c      	adds	r3, #12
 8006130:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006134:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006138:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800613c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006140:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006144:	e841 2300 	strex	r3, r2, [r1]
 8006148:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800614c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006150:	2b00      	cmp	r3, #0
 8006152:	d1d9      	bne.n	8006108 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	3314      	adds	r3, #20
 800615a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800615c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800615e:	e853 3f00 	ldrex	r3, [r3]
 8006162:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006164:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006166:	f023 0301 	bic.w	r3, r3, #1
 800616a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	3314      	adds	r3, #20
 8006174:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006178:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800617c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800617e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006180:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006184:	e841 2300 	strex	r3, r2, [r1]
 8006188:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800618a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800618c:	2b00      	cmp	r3, #0
 800618e:	d1e1      	bne.n	8006154 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	3314      	adds	r3, #20
 8006196:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006198:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800619a:	e853 3f00 	ldrex	r3, [r3]
 800619e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80061a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	3314      	adds	r3, #20
 80061b0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80061b4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80061b6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80061ba:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80061bc:	e841 2300 	strex	r3, r2, [r1]
 80061c0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80061c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d1e3      	bne.n	8006190 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2220      	movs	r2, #32
 80061cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	330c      	adds	r3, #12
 80061dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061e0:	e853 3f00 	ldrex	r3, [r3]
 80061e4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80061e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061e8:	f023 0310 	bic.w	r3, r3, #16
 80061ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	330c      	adds	r3, #12
 80061f6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80061fa:	65ba      	str	r2, [r7, #88]	; 0x58
 80061fc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061fe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006200:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006202:	e841 2300 	strex	r3, r2, [r1]
 8006206:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006208:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800620a:	2b00      	cmp	r3, #0
 800620c:	d1e3      	bne.n	80061d6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006212:	4618      	mov	r0, r3
 8006214:	f7fd fb79 	bl	800390a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2202      	movs	r2, #2
 800621c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006226:	b29b      	uxth	r3, r3
 8006228:	1ad3      	subs	r3, r2, r3
 800622a:	b29b      	uxth	r3, r3
 800622c:	4619      	mov	r1, r3
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 f8b6 	bl	80063a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006234:	e09c      	b.n	8006370 <HAL_UART_IRQHandler+0x518>
 8006236:	bf00      	nop
 8006238:	080065c9 	.word	0x080065c9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006244:	b29b      	uxth	r3, r3
 8006246:	1ad3      	subs	r3, r2, r3
 8006248:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006250:	b29b      	uxth	r3, r3
 8006252:	2b00      	cmp	r3, #0
 8006254:	f000 808e 	beq.w	8006374 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006258:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800625c:	2b00      	cmp	r3, #0
 800625e:	f000 8089 	beq.w	8006374 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	330c      	adds	r3, #12
 8006268:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800626a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800626c:	e853 3f00 	ldrex	r3, [r3]
 8006270:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006274:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006278:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	330c      	adds	r3, #12
 8006282:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006286:	647a      	str	r2, [r7, #68]	; 0x44
 8006288:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800628a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800628c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800628e:	e841 2300 	strex	r3, r2, [r1]
 8006292:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006294:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006296:	2b00      	cmp	r3, #0
 8006298:	d1e3      	bne.n	8006262 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	3314      	adds	r3, #20
 80062a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a4:	e853 3f00 	ldrex	r3, [r3]
 80062a8:	623b      	str	r3, [r7, #32]
   return(result);
 80062aa:	6a3b      	ldr	r3, [r7, #32]
 80062ac:	f023 0301 	bic.w	r3, r3, #1
 80062b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	3314      	adds	r3, #20
 80062ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80062be:	633a      	str	r2, [r7, #48]	; 0x30
 80062c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80062c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062c6:	e841 2300 	strex	r3, r2, [r1]
 80062ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80062cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d1e3      	bne.n	800629a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2220      	movs	r2, #32
 80062d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2200      	movs	r2, #0
 80062de:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	330c      	adds	r3, #12
 80062e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	e853 3f00 	ldrex	r3, [r3]
 80062ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f023 0310 	bic.w	r3, r3, #16
 80062f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	330c      	adds	r3, #12
 8006300:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006304:	61fa      	str	r2, [r7, #28]
 8006306:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006308:	69b9      	ldr	r1, [r7, #24]
 800630a:	69fa      	ldr	r2, [r7, #28]
 800630c:	e841 2300 	strex	r3, r2, [r1]
 8006310:	617b      	str	r3, [r7, #20]
   return(result);
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d1e3      	bne.n	80062e0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2202      	movs	r2, #2
 800631c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800631e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006322:	4619      	mov	r1, r3
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f000 f83b 	bl	80063a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800632a:	e023      	b.n	8006374 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800632c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006330:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006334:	2b00      	cmp	r3, #0
 8006336:	d009      	beq.n	800634c <HAL_UART_IRQHandler+0x4f4>
 8006338:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800633c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006340:	2b00      	cmp	r3, #0
 8006342:	d003      	beq.n	800634c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f000 f953 	bl	80065f0 <UART_Transmit_IT>
    return;
 800634a:	e014      	b.n	8006376 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800634c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006354:	2b00      	cmp	r3, #0
 8006356:	d00e      	beq.n	8006376 <HAL_UART_IRQHandler+0x51e>
 8006358:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800635c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006360:	2b00      	cmp	r3, #0
 8006362:	d008      	beq.n	8006376 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f000 f992 	bl	800668e <UART_EndTransmit_IT>
    return;
 800636a:	e004      	b.n	8006376 <HAL_UART_IRQHandler+0x51e>
    return;
 800636c:	bf00      	nop
 800636e:	e002      	b.n	8006376 <HAL_UART_IRQHandler+0x51e>
      return;
 8006370:	bf00      	nop
 8006372:	e000      	b.n	8006376 <HAL_UART_IRQHandler+0x51e>
      return;
 8006374:	bf00      	nop
  }
}
 8006376:	37e8      	adds	r7, #232	; 0xe8
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}

0800637c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800637c:	b480      	push	{r7}
 800637e:	b083      	sub	sp, #12
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006384:	bf00      	nop
 8006386:	370c      	adds	r7, #12
 8006388:	46bd      	mov	sp, r7
 800638a:	bc80      	pop	{r7}
 800638c:	4770      	bx	lr

0800638e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800638e:	b480      	push	{r7}
 8006390:	b083      	sub	sp, #12
 8006392:	af00      	add	r7, sp, #0
 8006394:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006396:	bf00      	nop
 8006398:	370c      	adds	r7, #12
 800639a:	46bd      	mov	sp, r7
 800639c:	bc80      	pop	{r7}
 800639e:	4770      	bx	lr

080063a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b083      	sub	sp, #12
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	460b      	mov	r3, r1
 80063aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80063ac:	bf00      	nop
 80063ae:	370c      	adds	r7, #12
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bc80      	pop	{r7}
 80063b4:	4770      	bx	lr

080063b6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80063b6:	b580      	push	{r7, lr}
 80063b8:	b090      	sub	sp, #64	; 0x40
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	60f8      	str	r0, [r7, #12]
 80063be:	60b9      	str	r1, [r7, #8]
 80063c0:	603b      	str	r3, [r7, #0]
 80063c2:	4613      	mov	r3, r2
 80063c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063c6:	e050      	b.n	800646a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ce:	d04c      	beq.n	800646a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80063d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d007      	beq.n	80063e6 <UART_WaitOnFlagUntilTimeout+0x30>
 80063d6:	f7fc fd5f 	bl	8002e98 <HAL_GetTick>
 80063da:	4602      	mov	r2, r0
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	1ad3      	subs	r3, r2, r3
 80063e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d241      	bcs.n	800646a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	330c      	adds	r3, #12
 80063ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f0:	e853 3f00 	ldrex	r3, [r3]
 80063f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80063f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80063fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	330c      	adds	r3, #12
 8006404:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006406:	637a      	str	r2, [r7, #52]	; 0x34
 8006408:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800640a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800640c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800640e:	e841 2300 	strex	r3, r2, [r1]
 8006412:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006416:	2b00      	cmp	r3, #0
 8006418:	d1e5      	bne.n	80063e6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	3314      	adds	r3, #20
 8006420:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	e853 3f00 	ldrex	r3, [r3]
 8006428:	613b      	str	r3, [r7, #16]
   return(result);
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	f023 0301 	bic.w	r3, r3, #1
 8006430:	63bb      	str	r3, [r7, #56]	; 0x38
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	3314      	adds	r3, #20
 8006438:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800643a:	623a      	str	r2, [r7, #32]
 800643c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800643e:	69f9      	ldr	r1, [r7, #28]
 8006440:	6a3a      	ldr	r2, [r7, #32]
 8006442:	e841 2300 	strex	r3, r2, [r1]
 8006446:	61bb      	str	r3, [r7, #24]
   return(result);
 8006448:	69bb      	ldr	r3, [r7, #24]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d1e5      	bne.n	800641a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2220      	movs	r2, #32
 8006452:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2220      	movs	r2, #32
 800645a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2200      	movs	r2, #0
 8006462:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8006466:	2303      	movs	r3, #3
 8006468:	e00f      	b.n	800648a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	681a      	ldr	r2, [r3, #0]
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	4013      	ands	r3, r2
 8006474:	68ba      	ldr	r2, [r7, #8]
 8006476:	429a      	cmp	r2, r3
 8006478:	bf0c      	ite	eq
 800647a:	2301      	moveq	r3, #1
 800647c:	2300      	movne	r3, #0
 800647e:	b2db      	uxtb	r3, r3
 8006480:	461a      	mov	r2, r3
 8006482:	79fb      	ldrb	r3, [r7, #7]
 8006484:	429a      	cmp	r2, r3
 8006486:	d09f      	beq.n	80063c8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006488:	2300      	movs	r3, #0
}
 800648a:	4618      	mov	r0, r3
 800648c:	3740      	adds	r7, #64	; 0x40
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}

08006492 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006492:	b480      	push	{r7}
 8006494:	b085      	sub	sp, #20
 8006496:	af00      	add	r7, sp, #0
 8006498:	60f8      	str	r0, [r7, #12]
 800649a:	60b9      	str	r1, [r7, #8]
 800649c:	4613      	mov	r3, r2
 800649e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	68ba      	ldr	r2, [r7, #8]
 80064a4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	88fa      	ldrh	r2, [r7, #6]
 80064aa:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	88fa      	ldrh	r2, [r7, #6]
 80064b0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2200      	movs	r2, #0
 80064b6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2222      	movs	r2, #34	; 0x22
 80064bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	691b      	ldr	r3, [r3, #16]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d007      	beq.n	80064d8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	68da      	ldr	r2, [r3, #12]
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80064d6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	695a      	ldr	r2, [r3, #20]
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f042 0201 	orr.w	r2, r2, #1
 80064e6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	68da      	ldr	r2, [r3, #12]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f042 0220 	orr.w	r2, r2, #32
 80064f6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80064f8:	2300      	movs	r3, #0
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3714      	adds	r7, #20
 80064fe:	46bd      	mov	sp, r7
 8006500:	bc80      	pop	{r7}
 8006502:	4770      	bx	lr

08006504 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006504:	b480      	push	{r7}
 8006506:	b095      	sub	sp, #84	; 0x54
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	330c      	adds	r3, #12
 8006512:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006516:	e853 3f00 	ldrex	r3, [r3]
 800651a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800651c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800651e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006522:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	330c      	adds	r3, #12
 800652a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800652c:	643a      	str	r2, [r7, #64]	; 0x40
 800652e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006530:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006532:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006534:	e841 2300 	strex	r3, r2, [r1]
 8006538:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800653a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800653c:	2b00      	cmp	r3, #0
 800653e:	d1e5      	bne.n	800650c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	3314      	adds	r3, #20
 8006546:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006548:	6a3b      	ldr	r3, [r7, #32]
 800654a:	e853 3f00 	ldrex	r3, [r3]
 800654e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006550:	69fb      	ldr	r3, [r7, #28]
 8006552:	f023 0301 	bic.w	r3, r3, #1
 8006556:	64bb      	str	r3, [r7, #72]	; 0x48
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	3314      	adds	r3, #20
 800655e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006560:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006562:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006564:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006566:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006568:	e841 2300 	strex	r3, r2, [r1]
 800656c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800656e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006570:	2b00      	cmp	r3, #0
 8006572:	d1e5      	bne.n	8006540 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006578:	2b01      	cmp	r3, #1
 800657a:	d119      	bne.n	80065b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	330c      	adds	r3, #12
 8006582:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	e853 3f00 	ldrex	r3, [r3]
 800658a:	60bb      	str	r3, [r7, #8]
   return(result);
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	f023 0310 	bic.w	r3, r3, #16
 8006592:	647b      	str	r3, [r7, #68]	; 0x44
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	330c      	adds	r3, #12
 800659a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800659c:	61ba      	str	r2, [r7, #24]
 800659e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a0:	6979      	ldr	r1, [r7, #20]
 80065a2:	69ba      	ldr	r2, [r7, #24]
 80065a4:	e841 2300 	strex	r3, r2, [r1]
 80065a8:	613b      	str	r3, [r7, #16]
   return(result);
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d1e5      	bne.n	800657c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2220      	movs	r2, #32
 80065b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2200      	movs	r2, #0
 80065bc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80065be:	bf00      	nop
 80065c0:	3754      	adds	r7, #84	; 0x54
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bc80      	pop	{r7}
 80065c6:	4770      	bx	lr

080065c8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b084      	sub	sp, #16
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2200      	movs	r2, #0
 80065da:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2200      	movs	r2, #0
 80065e0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80065e2:	68f8      	ldr	r0, [r7, #12]
 80065e4:	f7ff fed3 	bl	800638e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065e8:	bf00      	nop
 80065ea:	3710      	adds	r7, #16
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}

080065f0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b085      	sub	sp, #20
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80065fe:	b2db      	uxtb	r3, r3
 8006600:	2b21      	cmp	r3, #33	; 0x21
 8006602:	d13e      	bne.n	8006682 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800660c:	d114      	bne.n	8006638 <UART_Transmit_IT+0x48>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	691b      	ldr	r3, [r3, #16]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d110      	bne.n	8006638 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6a1b      	ldr	r3, [r3, #32]
 800661a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	881b      	ldrh	r3, [r3, #0]
 8006620:	461a      	mov	r2, r3
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800662a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6a1b      	ldr	r3, [r3, #32]
 8006630:	1c9a      	adds	r2, r3, #2
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	621a      	str	r2, [r3, #32]
 8006636:	e008      	b.n	800664a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6a1b      	ldr	r3, [r3, #32]
 800663c:	1c59      	adds	r1, r3, #1
 800663e:	687a      	ldr	r2, [r7, #4]
 8006640:	6211      	str	r1, [r2, #32]
 8006642:	781a      	ldrb	r2, [r3, #0]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800664e:	b29b      	uxth	r3, r3
 8006650:	3b01      	subs	r3, #1
 8006652:	b29b      	uxth	r3, r3
 8006654:	687a      	ldr	r2, [r7, #4]
 8006656:	4619      	mov	r1, r3
 8006658:	84d1      	strh	r1, [r2, #38]	; 0x26
 800665a:	2b00      	cmp	r3, #0
 800665c:	d10f      	bne.n	800667e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	68da      	ldr	r2, [r3, #12]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800666c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	68da      	ldr	r2, [r3, #12]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800667c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800667e:	2300      	movs	r3, #0
 8006680:	e000      	b.n	8006684 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006682:	2302      	movs	r3, #2
  }
}
 8006684:	4618      	mov	r0, r3
 8006686:	3714      	adds	r7, #20
 8006688:	46bd      	mov	sp, r7
 800668a:	bc80      	pop	{r7}
 800668c:	4770      	bx	lr

0800668e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800668e:	b580      	push	{r7, lr}
 8006690:	b082      	sub	sp, #8
 8006692:	af00      	add	r7, sp, #0
 8006694:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	68da      	ldr	r2, [r3, #12]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066a4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2220      	movs	r2, #32
 80066aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f7ff fe64 	bl	800637c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80066b4:	2300      	movs	r3, #0
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3708      	adds	r7, #8
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}

080066be <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80066be:	b580      	push	{r7, lr}
 80066c0:	b08c      	sub	sp, #48	; 0x30
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	2b22      	cmp	r3, #34	; 0x22
 80066d0:	f040 80ae 	bne.w	8006830 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066dc:	d117      	bne.n	800670e <UART_Receive_IT+0x50>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	691b      	ldr	r3, [r3, #16]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d113      	bne.n	800670e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80066e6:	2300      	movs	r3, #0
 80066e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ee:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066fc:	b29a      	uxth	r2, r3
 80066fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006700:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006706:	1c9a      	adds	r2, r3, #2
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	629a      	str	r2, [r3, #40]	; 0x28
 800670c:	e026      	b.n	800675c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006712:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006714:	2300      	movs	r3, #0
 8006716:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006720:	d007      	beq.n	8006732 <UART_Receive_IT+0x74>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d10a      	bne.n	8006740 <UART_Receive_IT+0x82>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	691b      	ldr	r3, [r3, #16]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d106      	bne.n	8006740 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	b2da      	uxtb	r2, r3
 800673a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800673c:	701a      	strb	r2, [r3, #0]
 800673e:	e008      	b.n	8006752 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	b2db      	uxtb	r3, r3
 8006748:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800674c:	b2da      	uxtb	r2, r3
 800674e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006750:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006756:	1c5a      	adds	r2, r3, #1
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006760:	b29b      	uxth	r3, r3
 8006762:	3b01      	subs	r3, #1
 8006764:	b29b      	uxth	r3, r3
 8006766:	687a      	ldr	r2, [r7, #4]
 8006768:	4619      	mov	r1, r3
 800676a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800676c:	2b00      	cmp	r3, #0
 800676e:	d15d      	bne.n	800682c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	68da      	ldr	r2, [r3, #12]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f022 0220 	bic.w	r2, r2, #32
 800677e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	68da      	ldr	r2, [r3, #12]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800678e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	695a      	ldr	r2, [r3, #20]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f022 0201 	bic.w	r2, r2, #1
 800679e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2220      	movs	r2, #32
 80067a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2200      	movs	r2, #0
 80067ac:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	d135      	bne.n	8006822 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2200      	movs	r2, #0
 80067ba:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	330c      	adds	r3, #12
 80067c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	e853 3f00 	ldrex	r3, [r3]
 80067ca:	613b      	str	r3, [r7, #16]
   return(result);
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	f023 0310 	bic.w	r3, r3, #16
 80067d2:	627b      	str	r3, [r7, #36]	; 0x24
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	330c      	adds	r3, #12
 80067da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067dc:	623a      	str	r2, [r7, #32]
 80067de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067e0:	69f9      	ldr	r1, [r7, #28]
 80067e2:	6a3a      	ldr	r2, [r7, #32]
 80067e4:	e841 2300 	strex	r3, r2, [r1]
 80067e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80067ea:	69bb      	ldr	r3, [r7, #24]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d1e5      	bne.n	80067bc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f003 0310 	and.w	r3, r3, #16
 80067fa:	2b10      	cmp	r3, #16
 80067fc:	d10a      	bne.n	8006814 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80067fe:	2300      	movs	r3, #0
 8006800:	60fb      	str	r3, [r7, #12]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	60fb      	str	r3, [r7, #12]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	60fb      	str	r3, [r7, #12]
 8006812:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006818:	4619      	mov	r1, r3
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f7ff fdc0 	bl	80063a0 <HAL_UARTEx_RxEventCallback>
 8006820:	e002      	b.n	8006828 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f7fa fcd2 	bl	80011cc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006828:	2300      	movs	r3, #0
 800682a:	e002      	b.n	8006832 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800682c:	2300      	movs	r3, #0
 800682e:	e000      	b.n	8006832 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006830:	2302      	movs	r3, #2
  }
}
 8006832:	4618      	mov	r0, r3
 8006834:	3730      	adds	r7, #48	; 0x30
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}
	...

0800683c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	691b      	ldr	r3, [r3, #16]
 800684a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	68da      	ldr	r2, [r3, #12]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	430a      	orrs	r2, r1
 8006858:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	689a      	ldr	r2, [r3, #8]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	691b      	ldr	r3, [r3, #16]
 8006862:	431a      	orrs	r2, r3
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	695b      	ldr	r3, [r3, #20]
 8006868:	4313      	orrs	r3, r2
 800686a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	68db      	ldr	r3, [r3, #12]
 8006872:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006876:	f023 030c 	bic.w	r3, r3, #12
 800687a:	687a      	ldr	r2, [r7, #4]
 800687c:	6812      	ldr	r2, [r2, #0]
 800687e:	68b9      	ldr	r1, [r7, #8]
 8006880:	430b      	orrs	r3, r1
 8006882:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	695b      	ldr	r3, [r3, #20]
 800688a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	699a      	ldr	r2, [r3, #24]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	430a      	orrs	r2, r1
 8006898:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a2c      	ldr	r2, [pc, #176]	; (8006950 <UART_SetConfig+0x114>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d103      	bne.n	80068ac <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80068a4:	f7fe fb22 	bl	8004eec <HAL_RCC_GetPCLK2Freq>
 80068a8:	60f8      	str	r0, [r7, #12]
 80068aa:	e002      	b.n	80068b2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80068ac:	f7fe fb0a 	bl	8004ec4 <HAL_RCC_GetPCLK1Freq>
 80068b0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80068b2:	68fa      	ldr	r2, [r7, #12]
 80068b4:	4613      	mov	r3, r2
 80068b6:	009b      	lsls	r3, r3, #2
 80068b8:	4413      	add	r3, r2
 80068ba:	009a      	lsls	r2, r3, #2
 80068bc:	441a      	add	r2, r3
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80068c8:	4a22      	ldr	r2, [pc, #136]	; (8006954 <UART_SetConfig+0x118>)
 80068ca:	fba2 2303 	umull	r2, r3, r2, r3
 80068ce:	095b      	lsrs	r3, r3, #5
 80068d0:	0119      	lsls	r1, r3, #4
 80068d2:	68fa      	ldr	r2, [r7, #12]
 80068d4:	4613      	mov	r3, r2
 80068d6:	009b      	lsls	r3, r3, #2
 80068d8:	4413      	add	r3, r2
 80068da:	009a      	lsls	r2, r3, #2
 80068dc:	441a      	add	r2, r3
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	009b      	lsls	r3, r3, #2
 80068e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80068e8:	4b1a      	ldr	r3, [pc, #104]	; (8006954 <UART_SetConfig+0x118>)
 80068ea:	fba3 0302 	umull	r0, r3, r3, r2
 80068ee:	095b      	lsrs	r3, r3, #5
 80068f0:	2064      	movs	r0, #100	; 0x64
 80068f2:	fb00 f303 	mul.w	r3, r0, r3
 80068f6:	1ad3      	subs	r3, r2, r3
 80068f8:	011b      	lsls	r3, r3, #4
 80068fa:	3332      	adds	r3, #50	; 0x32
 80068fc:	4a15      	ldr	r2, [pc, #84]	; (8006954 <UART_SetConfig+0x118>)
 80068fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006902:	095b      	lsrs	r3, r3, #5
 8006904:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006908:	4419      	add	r1, r3
 800690a:	68fa      	ldr	r2, [r7, #12]
 800690c:	4613      	mov	r3, r2
 800690e:	009b      	lsls	r3, r3, #2
 8006910:	4413      	add	r3, r2
 8006912:	009a      	lsls	r2, r3, #2
 8006914:	441a      	add	r2, r3
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	009b      	lsls	r3, r3, #2
 800691c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006920:	4b0c      	ldr	r3, [pc, #48]	; (8006954 <UART_SetConfig+0x118>)
 8006922:	fba3 0302 	umull	r0, r3, r3, r2
 8006926:	095b      	lsrs	r3, r3, #5
 8006928:	2064      	movs	r0, #100	; 0x64
 800692a:	fb00 f303 	mul.w	r3, r0, r3
 800692e:	1ad3      	subs	r3, r2, r3
 8006930:	011b      	lsls	r3, r3, #4
 8006932:	3332      	adds	r3, #50	; 0x32
 8006934:	4a07      	ldr	r2, [pc, #28]	; (8006954 <UART_SetConfig+0x118>)
 8006936:	fba2 2303 	umull	r2, r3, r2, r3
 800693a:	095b      	lsrs	r3, r3, #5
 800693c:	f003 020f 	and.w	r2, r3, #15
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	440a      	add	r2, r1
 8006946:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006948:	bf00      	nop
 800694a:	3710      	adds	r7, #16
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}
 8006950:	40013800 	.word	0x40013800
 8006954:	51eb851f 	.word	0x51eb851f

08006958 <atof>:
 8006958:	2100      	movs	r1, #0
 800695a:	f000 be1f 	b.w	800759c <strtod>

0800695e <atoi>:
 800695e:	220a      	movs	r2, #10
 8006960:	2100      	movs	r1, #0
 8006962:	f000 bea7 	b.w	80076b4 <strtol>

08006966 <sulp>:
 8006966:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800696a:	460f      	mov	r7, r1
 800696c:	4690      	mov	r8, r2
 800696e:	f003 fdd3 	bl	800a518 <__ulp>
 8006972:	4604      	mov	r4, r0
 8006974:	460d      	mov	r5, r1
 8006976:	f1b8 0f00 	cmp.w	r8, #0
 800697a:	d011      	beq.n	80069a0 <sulp+0x3a>
 800697c:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8006980:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006984:	2b00      	cmp	r3, #0
 8006986:	dd0b      	ble.n	80069a0 <sulp+0x3a>
 8006988:	2400      	movs	r4, #0
 800698a:	051b      	lsls	r3, r3, #20
 800698c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006990:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006994:	4622      	mov	r2, r4
 8006996:	462b      	mov	r3, r5
 8006998:	f7f9 fd9e 	bl	80004d8 <__aeabi_dmul>
 800699c:	4604      	mov	r4, r0
 800699e:	460d      	mov	r5, r1
 80069a0:	4620      	mov	r0, r4
 80069a2:	4629      	mov	r1, r5
 80069a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080069a8 <_strtod_l>:
 80069a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069ac:	b09f      	sub	sp, #124	; 0x7c
 80069ae:	9217      	str	r2, [sp, #92]	; 0x5c
 80069b0:	2200      	movs	r2, #0
 80069b2:	4604      	mov	r4, r0
 80069b4:	921a      	str	r2, [sp, #104]	; 0x68
 80069b6:	460d      	mov	r5, r1
 80069b8:	f04f 0800 	mov.w	r8, #0
 80069bc:	f04f 0900 	mov.w	r9, #0
 80069c0:	460a      	mov	r2, r1
 80069c2:	9219      	str	r2, [sp, #100]	; 0x64
 80069c4:	7811      	ldrb	r1, [r2, #0]
 80069c6:	292b      	cmp	r1, #43	; 0x2b
 80069c8:	d04a      	beq.n	8006a60 <_strtod_l+0xb8>
 80069ca:	d838      	bhi.n	8006a3e <_strtod_l+0x96>
 80069cc:	290d      	cmp	r1, #13
 80069ce:	d832      	bhi.n	8006a36 <_strtod_l+0x8e>
 80069d0:	2908      	cmp	r1, #8
 80069d2:	d832      	bhi.n	8006a3a <_strtod_l+0x92>
 80069d4:	2900      	cmp	r1, #0
 80069d6:	d03b      	beq.n	8006a50 <_strtod_l+0xa8>
 80069d8:	2200      	movs	r2, #0
 80069da:	920e      	str	r2, [sp, #56]	; 0x38
 80069dc:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80069de:	7832      	ldrb	r2, [r6, #0]
 80069e0:	2a30      	cmp	r2, #48	; 0x30
 80069e2:	f040 80b2 	bne.w	8006b4a <_strtod_l+0x1a2>
 80069e6:	7872      	ldrb	r2, [r6, #1]
 80069e8:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80069ec:	2a58      	cmp	r2, #88	; 0x58
 80069ee:	d16e      	bne.n	8006ace <_strtod_l+0x126>
 80069f0:	9302      	str	r3, [sp, #8]
 80069f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80069f4:	4620      	mov	r0, r4
 80069f6:	9301      	str	r3, [sp, #4]
 80069f8:	ab1a      	add	r3, sp, #104	; 0x68
 80069fa:	9300      	str	r3, [sp, #0]
 80069fc:	4a8c      	ldr	r2, [pc, #560]	; (8006c30 <_strtod_l+0x288>)
 80069fe:	ab1b      	add	r3, sp, #108	; 0x6c
 8006a00:	a919      	add	r1, sp, #100	; 0x64
 8006a02:	f002 fe65 	bl	80096d0 <__gethex>
 8006a06:	f010 070f 	ands.w	r7, r0, #15
 8006a0a:	4605      	mov	r5, r0
 8006a0c:	d005      	beq.n	8006a1a <_strtod_l+0x72>
 8006a0e:	2f06      	cmp	r7, #6
 8006a10:	d128      	bne.n	8006a64 <_strtod_l+0xbc>
 8006a12:	2300      	movs	r3, #0
 8006a14:	3601      	adds	r6, #1
 8006a16:	9619      	str	r6, [sp, #100]	; 0x64
 8006a18:	930e      	str	r3, [sp, #56]	; 0x38
 8006a1a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	f040 85a0 	bne.w	8007562 <_strtod_l+0xbba>
 8006a22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a24:	b1cb      	cbz	r3, 8006a5a <_strtod_l+0xb2>
 8006a26:	4642      	mov	r2, r8
 8006a28:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006a2c:	4610      	mov	r0, r2
 8006a2e:	4619      	mov	r1, r3
 8006a30:	b01f      	add	sp, #124	; 0x7c
 8006a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a36:	2920      	cmp	r1, #32
 8006a38:	d1ce      	bne.n	80069d8 <_strtod_l+0x30>
 8006a3a:	3201      	adds	r2, #1
 8006a3c:	e7c1      	b.n	80069c2 <_strtod_l+0x1a>
 8006a3e:	292d      	cmp	r1, #45	; 0x2d
 8006a40:	d1ca      	bne.n	80069d8 <_strtod_l+0x30>
 8006a42:	2101      	movs	r1, #1
 8006a44:	910e      	str	r1, [sp, #56]	; 0x38
 8006a46:	1c51      	adds	r1, r2, #1
 8006a48:	9119      	str	r1, [sp, #100]	; 0x64
 8006a4a:	7852      	ldrb	r2, [r2, #1]
 8006a4c:	2a00      	cmp	r2, #0
 8006a4e:	d1c5      	bne.n	80069dc <_strtod_l+0x34>
 8006a50:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006a52:	9519      	str	r5, [sp, #100]	; 0x64
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	f040 8582 	bne.w	800755e <_strtod_l+0xbb6>
 8006a5a:	4642      	mov	r2, r8
 8006a5c:	464b      	mov	r3, r9
 8006a5e:	e7e5      	b.n	8006a2c <_strtod_l+0x84>
 8006a60:	2100      	movs	r1, #0
 8006a62:	e7ef      	b.n	8006a44 <_strtod_l+0x9c>
 8006a64:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006a66:	b13a      	cbz	r2, 8006a78 <_strtod_l+0xd0>
 8006a68:	2135      	movs	r1, #53	; 0x35
 8006a6a:	a81c      	add	r0, sp, #112	; 0x70
 8006a6c:	f003 fe40 	bl	800a6f0 <__copybits>
 8006a70:	4620      	mov	r0, r4
 8006a72:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006a74:	f003 fa24 	bl	8009ec0 <_Bfree>
 8006a78:	3f01      	subs	r7, #1
 8006a7a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006a7c:	2f04      	cmp	r7, #4
 8006a7e:	d806      	bhi.n	8006a8e <_strtod_l+0xe6>
 8006a80:	e8df f007 	tbb	[pc, r7]
 8006a84:	201d0314 	.word	0x201d0314
 8006a88:	14          	.byte	0x14
 8006a89:	00          	.byte	0x00
 8006a8a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8006a8e:	05e9      	lsls	r1, r5, #23
 8006a90:	bf48      	it	mi
 8006a92:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8006a96:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006a9a:	0d1b      	lsrs	r3, r3, #20
 8006a9c:	051b      	lsls	r3, r3, #20
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d1bb      	bne.n	8006a1a <_strtod_l+0x72>
 8006aa2:	f001 fe85 	bl	80087b0 <__errno>
 8006aa6:	2322      	movs	r3, #34	; 0x22
 8006aa8:	6003      	str	r3, [r0, #0]
 8006aaa:	e7b6      	b.n	8006a1a <_strtod_l+0x72>
 8006aac:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006ab0:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8006ab4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006ab8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8006abc:	e7e7      	b.n	8006a8e <_strtod_l+0xe6>
 8006abe:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8006c34 <_strtod_l+0x28c>
 8006ac2:	e7e4      	b.n	8006a8e <_strtod_l+0xe6>
 8006ac4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8006ac8:	f04f 38ff 	mov.w	r8, #4294967295
 8006acc:	e7df      	b.n	8006a8e <_strtod_l+0xe6>
 8006ace:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006ad0:	1c5a      	adds	r2, r3, #1
 8006ad2:	9219      	str	r2, [sp, #100]	; 0x64
 8006ad4:	785b      	ldrb	r3, [r3, #1]
 8006ad6:	2b30      	cmp	r3, #48	; 0x30
 8006ad8:	d0f9      	beq.n	8006ace <_strtod_l+0x126>
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d09d      	beq.n	8006a1a <_strtod_l+0x72>
 8006ade:	2301      	movs	r3, #1
 8006ae0:	f04f 0a00 	mov.w	sl, #0
 8006ae4:	220a      	movs	r2, #10
 8006ae6:	46d3      	mov	fp, sl
 8006ae8:	9305      	str	r3, [sp, #20]
 8006aea:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006aec:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8006af0:	930b      	str	r3, [sp, #44]	; 0x2c
 8006af2:	9819      	ldr	r0, [sp, #100]	; 0x64
 8006af4:	7806      	ldrb	r6, [r0, #0]
 8006af6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006afa:	b2d9      	uxtb	r1, r3
 8006afc:	2909      	cmp	r1, #9
 8006afe:	d926      	bls.n	8006b4e <_strtod_l+0x1a6>
 8006b00:	2201      	movs	r2, #1
 8006b02:	494d      	ldr	r1, [pc, #308]	; (8006c38 <_strtod_l+0x290>)
 8006b04:	f001 fd86 	bl	8008614 <strncmp>
 8006b08:	2800      	cmp	r0, #0
 8006b0a:	d030      	beq.n	8006b6e <_strtod_l+0x1c6>
 8006b0c:	2000      	movs	r0, #0
 8006b0e:	4632      	mov	r2, r6
 8006b10:	4603      	mov	r3, r0
 8006b12:	465e      	mov	r6, fp
 8006b14:	9008      	str	r0, [sp, #32]
 8006b16:	2a65      	cmp	r2, #101	; 0x65
 8006b18:	d001      	beq.n	8006b1e <_strtod_l+0x176>
 8006b1a:	2a45      	cmp	r2, #69	; 0x45
 8006b1c:	d113      	bne.n	8006b46 <_strtod_l+0x19e>
 8006b1e:	b91e      	cbnz	r6, 8006b28 <_strtod_l+0x180>
 8006b20:	9a05      	ldr	r2, [sp, #20]
 8006b22:	4302      	orrs	r2, r0
 8006b24:	d094      	beq.n	8006a50 <_strtod_l+0xa8>
 8006b26:	2600      	movs	r6, #0
 8006b28:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8006b2a:	1c6a      	adds	r2, r5, #1
 8006b2c:	9219      	str	r2, [sp, #100]	; 0x64
 8006b2e:	786a      	ldrb	r2, [r5, #1]
 8006b30:	2a2b      	cmp	r2, #43	; 0x2b
 8006b32:	d074      	beq.n	8006c1e <_strtod_l+0x276>
 8006b34:	2a2d      	cmp	r2, #45	; 0x2d
 8006b36:	d078      	beq.n	8006c2a <_strtod_l+0x282>
 8006b38:	f04f 0c00 	mov.w	ip, #0
 8006b3c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006b40:	2909      	cmp	r1, #9
 8006b42:	d97f      	bls.n	8006c44 <_strtod_l+0x29c>
 8006b44:	9519      	str	r5, [sp, #100]	; 0x64
 8006b46:	2700      	movs	r7, #0
 8006b48:	e09e      	b.n	8006c88 <_strtod_l+0x2e0>
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	e7c8      	b.n	8006ae0 <_strtod_l+0x138>
 8006b4e:	f1bb 0f08 	cmp.w	fp, #8
 8006b52:	bfd8      	it	le
 8006b54:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8006b56:	f100 0001 	add.w	r0, r0, #1
 8006b5a:	bfd6      	itet	le
 8006b5c:	fb02 3301 	mlale	r3, r2, r1, r3
 8006b60:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8006b64:	930a      	strle	r3, [sp, #40]	; 0x28
 8006b66:	f10b 0b01 	add.w	fp, fp, #1
 8006b6a:	9019      	str	r0, [sp, #100]	; 0x64
 8006b6c:	e7c1      	b.n	8006af2 <_strtod_l+0x14a>
 8006b6e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006b70:	1c5a      	adds	r2, r3, #1
 8006b72:	9219      	str	r2, [sp, #100]	; 0x64
 8006b74:	785a      	ldrb	r2, [r3, #1]
 8006b76:	f1bb 0f00 	cmp.w	fp, #0
 8006b7a:	d037      	beq.n	8006bec <_strtod_l+0x244>
 8006b7c:	465e      	mov	r6, fp
 8006b7e:	9008      	str	r0, [sp, #32]
 8006b80:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006b84:	2b09      	cmp	r3, #9
 8006b86:	d912      	bls.n	8006bae <_strtod_l+0x206>
 8006b88:	2301      	movs	r3, #1
 8006b8a:	e7c4      	b.n	8006b16 <_strtod_l+0x16e>
 8006b8c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006b8e:	3001      	adds	r0, #1
 8006b90:	1c5a      	adds	r2, r3, #1
 8006b92:	9219      	str	r2, [sp, #100]	; 0x64
 8006b94:	785a      	ldrb	r2, [r3, #1]
 8006b96:	2a30      	cmp	r2, #48	; 0x30
 8006b98:	d0f8      	beq.n	8006b8c <_strtod_l+0x1e4>
 8006b9a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006b9e:	2b08      	cmp	r3, #8
 8006ba0:	f200 84e4 	bhi.w	800756c <_strtod_l+0xbc4>
 8006ba4:	9008      	str	r0, [sp, #32]
 8006ba6:	2000      	movs	r0, #0
 8006ba8:	4606      	mov	r6, r0
 8006baa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006bac:	930b      	str	r3, [sp, #44]	; 0x2c
 8006bae:	3a30      	subs	r2, #48	; 0x30
 8006bb0:	f100 0301 	add.w	r3, r0, #1
 8006bb4:	d014      	beq.n	8006be0 <_strtod_l+0x238>
 8006bb6:	9908      	ldr	r1, [sp, #32]
 8006bb8:	eb00 0c06 	add.w	ip, r0, r6
 8006bbc:	4419      	add	r1, r3
 8006bbe:	9108      	str	r1, [sp, #32]
 8006bc0:	4633      	mov	r3, r6
 8006bc2:	210a      	movs	r1, #10
 8006bc4:	4563      	cmp	r3, ip
 8006bc6:	d113      	bne.n	8006bf0 <_strtod_l+0x248>
 8006bc8:	1833      	adds	r3, r6, r0
 8006bca:	2b08      	cmp	r3, #8
 8006bcc:	f106 0601 	add.w	r6, r6, #1
 8006bd0:	4406      	add	r6, r0
 8006bd2:	dc1a      	bgt.n	8006c0a <_strtod_l+0x262>
 8006bd4:	230a      	movs	r3, #10
 8006bd6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006bd8:	fb03 2301 	mla	r3, r3, r1, r2
 8006bdc:	930a      	str	r3, [sp, #40]	; 0x28
 8006bde:	2300      	movs	r3, #0
 8006be0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006be2:	4618      	mov	r0, r3
 8006be4:	1c51      	adds	r1, r2, #1
 8006be6:	9119      	str	r1, [sp, #100]	; 0x64
 8006be8:	7852      	ldrb	r2, [r2, #1]
 8006bea:	e7c9      	b.n	8006b80 <_strtod_l+0x1d8>
 8006bec:	4658      	mov	r0, fp
 8006bee:	e7d2      	b.n	8006b96 <_strtod_l+0x1ee>
 8006bf0:	2b08      	cmp	r3, #8
 8006bf2:	f103 0301 	add.w	r3, r3, #1
 8006bf6:	dc03      	bgt.n	8006c00 <_strtod_l+0x258>
 8006bf8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8006bfa:	434f      	muls	r7, r1
 8006bfc:	970a      	str	r7, [sp, #40]	; 0x28
 8006bfe:	e7e1      	b.n	8006bc4 <_strtod_l+0x21c>
 8006c00:	2b10      	cmp	r3, #16
 8006c02:	bfd8      	it	le
 8006c04:	fb01 fa0a 	mulle.w	sl, r1, sl
 8006c08:	e7dc      	b.n	8006bc4 <_strtod_l+0x21c>
 8006c0a:	2e10      	cmp	r6, #16
 8006c0c:	bfdc      	itt	le
 8006c0e:	230a      	movle	r3, #10
 8006c10:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8006c14:	e7e3      	b.n	8006bde <_strtod_l+0x236>
 8006c16:	2300      	movs	r3, #0
 8006c18:	9308      	str	r3, [sp, #32]
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	e780      	b.n	8006b20 <_strtod_l+0x178>
 8006c1e:	f04f 0c00 	mov.w	ip, #0
 8006c22:	1caa      	adds	r2, r5, #2
 8006c24:	9219      	str	r2, [sp, #100]	; 0x64
 8006c26:	78aa      	ldrb	r2, [r5, #2]
 8006c28:	e788      	b.n	8006b3c <_strtod_l+0x194>
 8006c2a:	f04f 0c01 	mov.w	ip, #1
 8006c2e:	e7f8      	b.n	8006c22 <_strtod_l+0x27a>
 8006c30:	0800d198 	.word	0x0800d198
 8006c34:	7ff00000 	.word	0x7ff00000
 8006c38:	0800d196 	.word	0x0800d196
 8006c3c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006c3e:	1c51      	adds	r1, r2, #1
 8006c40:	9119      	str	r1, [sp, #100]	; 0x64
 8006c42:	7852      	ldrb	r2, [r2, #1]
 8006c44:	2a30      	cmp	r2, #48	; 0x30
 8006c46:	d0f9      	beq.n	8006c3c <_strtod_l+0x294>
 8006c48:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006c4c:	2908      	cmp	r1, #8
 8006c4e:	f63f af7a 	bhi.w	8006b46 <_strtod_l+0x19e>
 8006c52:	3a30      	subs	r2, #48	; 0x30
 8006c54:	9209      	str	r2, [sp, #36]	; 0x24
 8006c56:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006c58:	920c      	str	r2, [sp, #48]	; 0x30
 8006c5a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006c5c:	1c57      	adds	r7, r2, #1
 8006c5e:	9719      	str	r7, [sp, #100]	; 0x64
 8006c60:	7852      	ldrb	r2, [r2, #1]
 8006c62:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8006c66:	f1be 0f09 	cmp.w	lr, #9
 8006c6a:	d938      	bls.n	8006cde <_strtod_l+0x336>
 8006c6c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006c6e:	1a7f      	subs	r7, r7, r1
 8006c70:	2f08      	cmp	r7, #8
 8006c72:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8006c76:	dc03      	bgt.n	8006c80 <_strtod_l+0x2d8>
 8006c78:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c7a:	428f      	cmp	r7, r1
 8006c7c:	bfa8      	it	ge
 8006c7e:	460f      	movge	r7, r1
 8006c80:	f1bc 0f00 	cmp.w	ip, #0
 8006c84:	d000      	beq.n	8006c88 <_strtod_l+0x2e0>
 8006c86:	427f      	negs	r7, r7
 8006c88:	2e00      	cmp	r6, #0
 8006c8a:	d14f      	bne.n	8006d2c <_strtod_l+0x384>
 8006c8c:	9905      	ldr	r1, [sp, #20]
 8006c8e:	4301      	orrs	r1, r0
 8006c90:	f47f aec3 	bne.w	8006a1a <_strtod_l+0x72>
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	f47f aedb 	bne.w	8006a50 <_strtod_l+0xa8>
 8006c9a:	2a69      	cmp	r2, #105	; 0x69
 8006c9c:	d029      	beq.n	8006cf2 <_strtod_l+0x34a>
 8006c9e:	dc26      	bgt.n	8006cee <_strtod_l+0x346>
 8006ca0:	2a49      	cmp	r2, #73	; 0x49
 8006ca2:	d026      	beq.n	8006cf2 <_strtod_l+0x34a>
 8006ca4:	2a4e      	cmp	r2, #78	; 0x4e
 8006ca6:	f47f aed3 	bne.w	8006a50 <_strtod_l+0xa8>
 8006caa:	499a      	ldr	r1, [pc, #616]	; (8006f14 <_strtod_l+0x56c>)
 8006cac:	a819      	add	r0, sp, #100	; 0x64
 8006cae:	f002 ff51 	bl	8009b54 <__match>
 8006cb2:	2800      	cmp	r0, #0
 8006cb4:	f43f aecc 	beq.w	8006a50 <_strtod_l+0xa8>
 8006cb8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006cba:	781b      	ldrb	r3, [r3, #0]
 8006cbc:	2b28      	cmp	r3, #40	; 0x28
 8006cbe:	d12f      	bne.n	8006d20 <_strtod_l+0x378>
 8006cc0:	4995      	ldr	r1, [pc, #596]	; (8006f18 <_strtod_l+0x570>)
 8006cc2:	aa1c      	add	r2, sp, #112	; 0x70
 8006cc4:	a819      	add	r0, sp, #100	; 0x64
 8006cc6:	f002 ff59 	bl	8009b7c <__hexnan>
 8006cca:	2805      	cmp	r0, #5
 8006ccc:	d128      	bne.n	8006d20 <_strtod_l+0x378>
 8006cce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006cd0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8006cd4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8006cd8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8006cdc:	e69d      	b.n	8006a1a <_strtod_l+0x72>
 8006cde:	210a      	movs	r1, #10
 8006ce0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006ce2:	fb01 2107 	mla	r1, r1, r7, r2
 8006ce6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8006cea:	9209      	str	r2, [sp, #36]	; 0x24
 8006cec:	e7b5      	b.n	8006c5a <_strtod_l+0x2b2>
 8006cee:	2a6e      	cmp	r2, #110	; 0x6e
 8006cf0:	e7d9      	b.n	8006ca6 <_strtod_l+0x2fe>
 8006cf2:	498a      	ldr	r1, [pc, #552]	; (8006f1c <_strtod_l+0x574>)
 8006cf4:	a819      	add	r0, sp, #100	; 0x64
 8006cf6:	f002 ff2d 	bl	8009b54 <__match>
 8006cfa:	2800      	cmp	r0, #0
 8006cfc:	f43f aea8 	beq.w	8006a50 <_strtod_l+0xa8>
 8006d00:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006d02:	4987      	ldr	r1, [pc, #540]	; (8006f20 <_strtod_l+0x578>)
 8006d04:	3b01      	subs	r3, #1
 8006d06:	a819      	add	r0, sp, #100	; 0x64
 8006d08:	9319      	str	r3, [sp, #100]	; 0x64
 8006d0a:	f002 ff23 	bl	8009b54 <__match>
 8006d0e:	b910      	cbnz	r0, 8006d16 <_strtod_l+0x36e>
 8006d10:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006d12:	3301      	adds	r3, #1
 8006d14:	9319      	str	r3, [sp, #100]	; 0x64
 8006d16:	f04f 0800 	mov.w	r8, #0
 8006d1a:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8006f24 <_strtod_l+0x57c>
 8006d1e:	e67c      	b.n	8006a1a <_strtod_l+0x72>
 8006d20:	4881      	ldr	r0, [pc, #516]	; (8006f28 <_strtod_l+0x580>)
 8006d22:	f001 fd8f 	bl	8008844 <nan>
 8006d26:	4680      	mov	r8, r0
 8006d28:	4689      	mov	r9, r1
 8006d2a:	e676      	b.n	8006a1a <_strtod_l+0x72>
 8006d2c:	9b08      	ldr	r3, [sp, #32]
 8006d2e:	f1bb 0f00 	cmp.w	fp, #0
 8006d32:	bf08      	it	eq
 8006d34:	46b3      	moveq	fp, r6
 8006d36:	1afb      	subs	r3, r7, r3
 8006d38:	2e10      	cmp	r6, #16
 8006d3a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006d3c:	4635      	mov	r5, r6
 8006d3e:	9309      	str	r3, [sp, #36]	; 0x24
 8006d40:	bfa8      	it	ge
 8006d42:	2510      	movge	r5, #16
 8006d44:	f7f9 fb4e 	bl	80003e4 <__aeabi_ui2d>
 8006d48:	2e09      	cmp	r6, #9
 8006d4a:	4680      	mov	r8, r0
 8006d4c:	4689      	mov	r9, r1
 8006d4e:	dd13      	ble.n	8006d78 <_strtod_l+0x3d0>
 8006d50:	4b76      	ldr	r3, [pc, #472]	; (8006f2c <_strtod_l+0x584>)
 8006d52:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8006d56:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006d5a:	f7f9 fbbd 	bl	80004d8 <__aeabi_dmul>
 8006d5e:	4680      	mov	r8, r0
 8006d60:	4650      	mov	r0, sl
 8006d62:	4689      	mov	r9, r1
 8006d64:	f7f9 fb3e 	bl	80003e4 <__aeabi_ui2d>
 8006d68:	4602      	mov	r2, r0
 8006d6a:	460b      	mov	r3, r1
 8006d6c:	4640      	mov	r0, r8
 8006d6e:	4649      	mov	r1, r9
 8006d70:	f7f9 f9fc 	bl	800016c <__adddf3>
 8006d74:	4680      	mov	r8, r0
 8006d76:	4689      	mov	r9, r1
 8006d78:	2e0f      	cmp	r6, #15
 8006d7a:	dc36      	bgt.n	8006dea <_strtod_l+0x442>
 8006d7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	f43f ae4b 	beq.w	8006a1a <_strtod_l+0x72>
 8006d84:	dd22      	ble.n	8006dcc <_strtod_l+0x424>
 8006d86:	2b16      	cmp	r3, #22
 8006d88:	dc09      	bgt.n	8006d9e <_strtod_l+0x3f6>
 8006d8a:	4968      	ldr	r1, [pc, #416]	; (8006f2c <_strtod_l+0x584>)
 8006d8c:	4642      	mov	r2, r8
 8006d8e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006d92:	464b      	mov	r3, r9
 8006d94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d98:	f7f9 fb9e 	bl	80004d8 <__aeabi_dmul>
 8006d9c:	e7c3      	b.n	8006d26 <_strtod_l+0x37e>
 8006d9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006da0:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8006da4:	4293      	cmp	r3, r2
 8006da6:	db20      	blt.n	8006dea <_strtod_l+0x442>
 8006da8:	4c60      	ldr	r4, [pc, #384]	; (8006f2c <_strtod_l+0x584>)
 8006daa:	f1c6 060f 	rsb	r6, r6, #15
 8006dae:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8006db2:	4642      	mov	r2, r8
 8006db4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006db8:	464b      	mov	r3, r9
 8006dba:	f7f9 fb8d 	bl	80004d8 <__aeabi_dmul>
 8006dbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dc0:	1b9e      	subs	r6, r3, r6
 8006dc2:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8006dc6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006dca:	e7e5      	b.n	8006d98 <_strtod_l+0x3f0>
 8006dcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dce:	3316      	adds	r3, #22
 8006dd0:	db0b      	blt.n	8006dea <_strtod_l+0x442>
 8006dd2:	9b08      	ldr	r3, [sp, #32]
 8006dd4:	4640      	mov	r0, r8
 8006dd6:	1bdf      	subs	r7, r3, r7
 8006dd8:	4b54      	ldr	r3, [pc, #336]	; (8006f2c <_strtod_l+0x584>)
 8006dda:	4649      	mov	r1, r9
 8006ddc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8006de0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006de4:	f7f9 fca2 	bl	800072c <__aeabi_ddiv>
 8006de8:	e79d      	b.n	8006d26 <_strtod_l+0x37e>
 8006dea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dec:	1b75      	subs	r5, r6, r5
 8006dee:	441d      	add	r5, r3
 8006df0:	2d00      	cmp	r5, #0
 8006df2:	dd70      	ble.n	8006ed6 <_strtod_l+0x52e>
 8006df4:	f015 030f 	ands.w	r3, r5, #15
 8006df8:	d00a      	beq.n	8006e10 <_strtod_l+0x468>
 8006dfa:	494c      	ldr	r1, [pc, #304]	; (8006f2c <_strtod_l+0x584>)
 8006dfc:	4642      	mov	r2, r8
 8006dfe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006e02:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e06:	464b      	mov	r3, r9
 8006e08:	f7f9 fb66 	bl	80004d8 <__aeabi_dmul>
 8006e0c:	4680      	mov	r8, r0
 8006e0e:	4689      	mov	r9, r1
 8006e10:	f035 050f 	bics.w	r5, r5, #15
 8006e14:	d04d      	beq.n	8006eb2 <_strtod_l+0x50a>
 8006e16:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8006e1a:	dd22      	ble.n	8006e62 <_strtod_l+0x4ba>
 8006e1c:	2600      	movs	r6, #0
 8006e1e:	46b3      	mov	fp, r6
 8006e20:	960b      	str	r6, [sp, #44]	; 0x2c
 8006e22:	9608      	str	r6, [sp, #32]
 8006e24:	2322      	movs	r3, #34	; 0x22
 8006e26:	f04f 0800 	mov.w	r8, #0
 8006e2a:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8006f24 <_strtod_l+0x57c>
 8006e2e:	6023      	str	r3, [r4, #0]
 8006e30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	f43f adf1 	beq.w	8006a1a <_strtod_l+0x72>
 8006e38:	4620      	mov	r0, r4
 8006e3a:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006e3c:	f003 f840 	bl	8009ec0 <_Bfree>
 8006e40:	4620      	mov	r0, r4
 8006e42:	9908      	ldr	r1, [sp, #32]
 8006e44:	f003 f83c 	bl	8009ec0 <_Bfree>
 8006e48:	4659      	mov	r1, fp
 8006e4a:	4620      	mov	r0, r4
 8006e4c:	f003 f838 	bl	8009ec0 <_Bfree>
 8006e50:	4620      	mov	r0, r4
 8006e52:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006e54:	f003 f834 	bl	8009ec0 <_Bfree>
 8006e58:	4631      	mov	r1, r6
 8006e5a:	4620      	mov	r0, r4
 8006e5c:	f003 f830 	bl	8009ec0 <_Bfree>
 8006e60:	e5db      	b.n	8006a1a <_strtod_l+0x72>
 8006e62:	4b33      	ldr	r3, [pc, #204]	; (8006f30 <_strtod_l+0x588>)
 8006e64:	4640      	mov	r0, r8
 8006e66:	9305      	str	r3, [sp, #20]
 8006e68:	2300      	movs	r3, #0
 8006e6a:	4649      	mov	r1, r9
 8006e6c:	469a      	mov	sl, r3
 8006e6e:	112d      	asrs	r5, r5, #4
 8006e70:	2d01      	cmp	r5, #1
 8006e72:	dc21      	bgt.n	8006eb8 <_strtod_l+0x510>
 8006e74:	b10b      	cbz	r3, 8006e7a <_strtod_l+0x4d2>
 8006e76:	4680      	mov	r8, r0
 8006e78:	4689      	mov	r9, r1
 8006e7a:	492d      	ldr	r1, [pc, #180]	; (8006f30 <_strtod_l+0x588>)
 8006e7c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8006e80:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8006e84:	4642      	mov	r2, r8
 8006e86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e8a:	464b      	mov	r3, r9
 8006e8c:	f7f9 fb24 	bl	80004d8 <__aeabi_dmul>
 8006e90:	4b24      	ldr	r3, [pc, #144]	; (8006f24 <_strtod_l+0x57c>)
 8006e92:	460a      	mov	r2, r1
 8006e94:	400b      	ands	r3, r1
 8006e96:	4927      	ldr	r1, [pc, #156]	; (8006f34 <_strtod_l+0x58c>)
 8006e98:	4680      	mov	r8, r0
 8006e9a:	428b      	cmp	r3, r1
 8006e9c:	d8be      	bhi.n	8006e1c <_strtod_l+0x474>
 8006e9e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006ea2:	428b      	cmp	r3, r1
 8006ea4:	bf86      	itte	hi
 8006ea6:	f04f 38ff 	movhi.w	r8, #4294967295
 8006eaa:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8006f38 <_strtod_l+0x590>
 8006eae:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	9305      	str	r3, [sp, #20]
 8006eb6:	e07b      	b.n	8006fb0 <_strtod_l+0x608>
 8006eb8:	07ea      	lsls	r2, r5, #31
 8006eba:	d505      	bpl.n	8006ec8 <_strtod_l+0x520>
 8006ebc:	9b05      	ldr	r3, [sp, #20]
 8006ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ec2:	f7f9 fb09 	bl	80004d8 <__aeabi_dmul>
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	9a05      	ldr	r2, [sp, #20]
 8006eca:	f10a 0a01 	add.w	sl, sl, #1
 8006ece:	3208      	adds	r2, #8
 8006ed0:	106d      	asrs	r5, r5, #1
 8006ed2:	9205      	str	r2, [sp, #20]
 8006ed4:	e7cc      	b.n	8006e70 <_strtod_l+0x4c8>
 8006ed6:	d0ec      	beq.n	8006eb2 <_strtod_l+0x50a>
 8006ed8:	426d      	negs	r5, r5
 8006eda:	f015 020f 	ands.w	r2, r5, #15
 8006ede:	d00a      	beq.n	8006ef6 <_strtod_l+0x54e>
 8006ee0:	4b12      	ldr	r3, [pc, #72]	; (8006f2c <_strtod_l+0x584>)
 8006ee2:	4640      	mov	r0, r8
 8006ee4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ee8:	4649      	mov	r1, r9
 8006eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eee:	f7f9 fc1d 	bl	800072c <__aeabi_ddiv>
 8006ef2:	4680      	mov	r8, r0
 8006ef4:	4689      	mov	r9, r1
 8006ef6:	112d      	asrs	r5, r5, #4
 8006ef8:	d0db      	beq.n	8006eb2 <_strtod_l+0x50a>
 8006efa:	2d1f      	cmp	r5, #31
 8006efc:	dd1e      	ble.n	8006f3c <_strtod_l+0x594>
 8006efe:	2600      	movs	r6, #0
 8006f00:	46b3      	mov	fp, r6
 8006f02:	960b      	str	r6, [sp, #44]	; 0x2c
 8006f04:	9608      	str	r6, [sp, #32]
 8006f06:	2322      	movs	r3, #34	; 0x22
 8006f08:	f04f 0800 	mov.w	r8, #0
 8006f0c:	f04f 0900 	mov.w	r9, #0
 8006f10:	6023      	str	r3, [r4, #0]
 8006f12:	e78d      	b.n	8006e30 <_strtod_l+0x488>
 8006f14:	0800d2f6 	.word	0x0800d2f6
 8006f18:	0800d1ac 	.word	0x0800d1ac
 8006f1c:	0800d2ee 	.word	0x0800d2ee
 8006f20:	0800d3da 	.word	0x0800d3da
 8006f24:	7ff00000 	.word	0x7ff00000
 8006f28:	0800d3d6 	.word	0x0800d3d6
 8006f2c:	0800d530 	.word	0x0800d530
 8006f30:	0800d508 	.word	0x0800d508
 8006f34:	7ca00000 	.word	0x7ca00000
 8006f38:	7fefffff 	.word	0x7fefffff
 8006f3c:	f015 0310 	ands.w	r3, r5, #16
 8006f40:	bf18      	it	ne
 8006f42:	236a      	movne	r3, #106	; 0x6a
 8006f44:	4640      	mov	r0, r8
 8006f46:	9305      	str	r3, [sp, #20]
 8006f48:	4649      	mov	r1, r9
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8007218 <_strtod_l+0x870>
 8006f50:	07ea      	lsls	r2, r5, #31
 8006f52:	d504      	bpl.n	8006f5e <_strtod_l+0x5b6>
 8006f54:	e9da 2300 	ldrd	r2, r3, [sl]
 8006f58:	f7f9 fabe 	bl	80004d8 <__aeabi_dmul>
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	106d      	asrs	r5, r5, #1
 8006f60:	f10a 0a08 	add.w	sl, sl, #8
 8006f64:	d1f4      	bne.n	8006f50 <_strtod_l+0x5a8>
 8006f66:	b10b      	cbz	r3, 8006f6c <_strtod_l+0x5c4>
 8006f68:	4680      	mov	r8, r0
 8006f6a:	4689      	mov	r9, r1
 8006f6c:	9b05      	ldr	r3, [sp, #20]
 8006f6e:	b1bb      	cbz	r3, 8006fa0 <_strtod_l+0x5f8>
 8006f70:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8006f74:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	4649      	mov	r1, r9
 8006f7c:	dd10      	ble.n	8006fa0 <_strtod_l+0x5f8>
 8006f7e:	2b1f      	cmp	r3, #31
 8006f80:	f340 8128 	ble.w	80071d4 <_strtod_l+0x82c>
 8006f84:	2b34      	cmp	r3, #52	; 0x34
 8006f86:	bfd8      	it	le
 8006f88:	f04f 33ff 	movle.w	r3, #4294967295
 8006f8c:	f04f 0800 	mov.w	r8, #0
 8006f90:	bfcf      	iteee	gt
 8006f92:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8006f96:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8006f9a:	4093      	lslle	r3, r2
 8006f9c:	ea03 0901 	andle.w	r9, r3, r1
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	4640      	mov	r0, r8
 8006fa6:	4649      	mov	r1, r9
 8006fa8:	f7f9 fcfe 	bl	80009a8 <__aeabi_dcmpeq>
 8006fac:	2800      	cmp	r0, #0
 8006fae:	d1a6      	bne.n	8006efe <_strtod_l+0x556>
 8006fb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fb2:	465a      	mov	r2, fp
 8006fb4:	9300      	str	r3, [sp, #0]
 8006fb6:	4620      	mov	r0, r4
 8006fb8:	4633      	mov	r3, r6
 8006fba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006fbc:	f002 ffe8 	bl	8009f90 <__s2b>
 8006fc0:	900b      	str	r0, [sp, #44]	; 0x2c
 8006fc2:	2800      	cmp	r0, #0
 8006fc4:	f43f af2a 	beq.w	8006e1c <_strtod_l+0x474>
 8006fc8:	2600      	movs	r6, #0
 8006fca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006fcc:	9b08      	ldr	r3, [sp, #32]
 8006fce:	2a00      	cmp	r2, #0
 8006fd0:	eba3 0307 	sub.w	r3, r3, r7
 8006fd4:	bfa8      	it	ge
 8006fd6:	2300      	movge	r3, #0
 8006fd8:	46b3      	mov	fp, r6
 8006fda:	9312      	str	r3, [sp, #72]	; 0x48
 8006fdc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006fe0:	9316      	str	r3, [sp, #88]	; 0x58
 8006fe2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006fe4:	4620      	mov	r0, r4
 8006fe6:	6859      	ldr	r1, [r3, #4]
 8006fe8:	f002 ff2a 	bl	8009e40 <_Balloc>
 8006fec:	9008      	str	r0, [sp, #32]
 8006fee:	2800      	cmp	r0, #0
 8006ff0:	f43f af18 	beq.w	8006e24 <_strtod_l+0x47c>
 8006ff4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ff6:	300c      	adds	r0, #12
 8006ff8:	691a      	ldr	r2, [r3, #16]
 8006ffa:	f103 010c 	add.w	r1, r3, #12
 8006ffe:	3202      	adds	r2, #2
 8007000:	0092      	lsls	r2, r2, #2
 8007002:	f001 fc10 	bl	8008826 <memcpy>
 8007006:	ab1c      	add	r3, sp, #112	; 0x70
 8007008:	9301      	str	r3, [sp, #4]
 800700a:	ab1b      	add	r3, sp, #108	; 0x6c
 800700c:	9300      	str	r3, [sp, #0]
 800700e:	4642      	mov	r2, r8
 8007010:	464b      	mov	r3, r9
 8007012:	4620      	mov	r0, r4
 8007014:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8007018:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 800701c:	f003 fae4 	bl	800a5e8 <__d2b>
 8007020:	901a      	str	r0, [sp, #104]	; 0x68
 8007022:	2800      	cmp	r0, #0
 8007024:	f43f aefe 	beq.w	8006e24 <_strtod_l+0x47c>
 8007028:	2101      	movs	r1, #1
 800702a:	4620      	mov	r0, r4
 800702c:	f003 f848 	bl	800a0c0 <__i2b>
 8007030:	4683      	mov	fp, r0
 8007032:	2800      	cmp	r0, #0
 8007034:	f43f aef6 	beq.w	8006e24 <_strtod_l+0x47c>
 8007038:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800703a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800703c:	2f00      	cmp	r7, #0
 800703e:	bfab      	itete	ge
 8007040:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 8007042:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8007044:	eb07 0a03 	addge.w	sl, r7, r3
 8007048:	1bdd      	sublt	r5, r3, r7
 800704a:	9b05      	ldr	r3, [sp, #20]
 800704c:	bfa8      	it	ge
 800704e:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8007050:	eba7 0703 	sub.w	r7, r7, r3
 8007054:	4417      	add	r7, r2
 8007056:	4b71      	ldr	r3, [pc, #452]	; (800721c <_strtod_l+0x874>)
 8007058:	f107 37ff 	add.w	r7, r7, #4294967295
 800705c:	bfb8      	it	lt
 800705e:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 8007062:	429f      	cmp	r7, r3
 8007064:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007068:	f280 80c7 	bge.w	80071fa <_strtod_l+0x852>
 800706c:	1bdb      	subs	r3, r3, r7
 800706e:	2b1f      	cmp	r3, #31
 8007070:	f04f 0101 	mov.w	r1, #1
 8007074:	eba2 0203 	sub.w	r2, r2, r3
 8007078:	f300 80b3 	bgt.w	80071e2 <_strtod_l+0x83a>
 800707c:	fa01 f303 	lsl.w	r3, r1, r3
 8007080:	9313      	str	r3, [sp, #76]	; 0x4c
 8007082:	2300      	movs	r3, #0
 8007084:	9310      	str	r3, [sp, #64]	; 0x40
 8007086:	eb0a 0702 	add.w	r7, sl, r2
 800708a:	9b05      	ldr	r3, [sp, #20]
 800708c:	45ba      	cmp	sl, r7
 800708e:	4415      	add	r5, r2
 8007090:	441d      	add	r5, r3
 8007092:	4653      	mov	r3, sl
 8007094:	bfa8      	it	ge
 8007096:	463b      	movge	r3, r7
 8007098:	42ab      	cmp	r3, r5
 800709a:	bfa8      	it	ge
 800709c:	462b      	movge	r3, r5
 800709e:	2b00      	cmp	r3, #0
 80070a0:	bfc2      	ittt	gt
 80070a2:	1aff      	subgt	r7, r7, r3
 80070a4:	1aed      	subgt	r5, r5, r3
 80070a6:	ebaa 0a03 	subgt.w	sl, sl, r3
 80070aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	dd17      	ble.n	80070e0 <_strtod_l+0x738>
 80070b0:	4659      	mov	r1, fp
 80070b2:	461a      	mov	r2, r3
 80070b4:	4620      	mov	r0, r4
 80070b6:	f003 f8c1 	bl	800a23c <__pow5mult>
 80070ba:	4683      	mov	fp, r0
 80070bc:	2800      	cmp	r0, #0
 80070be:	f43f aeb1 	beq.w	8006e24 <_strtod_l+0x47c>
 80070c2:	4601      	mov	r1, r0
 80070c4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80070c6:	4620      	mov	r0, r4
 80070c8:	f003 f810 	bl	800a0ec <__multiply>
 80070cc:	900a      	str	r0, [sp, #40]	; 0x28
 80070ce:	2800      	cmp	r0, #0
 80070d0:	f43f aea8 	beq.w	8006e24 <_strtod_l+0x47c>
 80070d4:	4620      	mov	r0, r4
 80070d6:	991a      	ldr	r1, [sp, #104]	; 0x68
 80070d8:	f002 fef2 	bl	8009ec0 <_Bfree>
 80070dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070de:	931a      	str	r3, [sp, #104]	; 0x68
 80070e0:	2f00      	cmp	r7, #0
 80070e2:	f300 808f 	bgt.w	8007204 <_strtod_l+0x85c>
 80070e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	dd08      	ble.n	80070fe <_strtod_l+0x756>
 80070ec:	4620      	mov	r0, r4
 80070ee:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80070f0:	9908      	ldr	r1, [sp, #32]
 80070f2:	f003 f8a3 	bl	800a23c <__pow5mult>
 80070f6:	9008      	str	r0, [sp, #32]
 80070f8:	2800      	cmp	r0, #0
 80070fa:	f43f ae93 	beq.w	8006e24 <_strtod_l+0x47c>
 80070fe:	2d00      	cmp	r5, #0
 8007100:	dd08      	ble.n	8007114 <_strtod_l+0x76c>
 8007102:	462a      	mov	r2, r5
 8007104:	4620      	mov	r0, r4
 8007106:	9908      	ldr	r1, [sp, #32]
 8007108:	f003 f8f2 	bl	800a2f0 <__lshift>
 800710c:	9008      	str	r0, [sp, #32]
 800710e:	2800      	cmp	r0, #0
 8007110:	f43f ae88 	beq.w	8006e24 <_strtod_l+0x47c>
 8007114:	f1ba 0f00 	cmp.w	sl, #0
 8007118:	dd08      	ble.n	800712c <_strtod_l+0x784>
 800711a:	4659      	mov	r1, fp
 800711c:	4652      	mov	r2, sl
 800711e:	4620      	mov	r0, r4
 8007120:	f003 f8e6 	bl	800a2f0 <__lshift>
 8007124:	4683      	mov	fp, r0
 8007126:	2800      	cmp	r0, #0
 8007128:	f43f ae7c 	beq.w	8006e24 <_strtod_l+0x47c>
 800712c:	4620      	mov	r0, r4
 800712e:	9a08      	ldr	r2, [sp, #32]
 8007130:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007132:	f003 f965 	bl	800a400 <__mdiff>
 8007136:	4606      	mov	r6, r0
 8007138:	2800      	cmp	r0, #0
 800713a:	f43f ae73 	beq.w	8006e24 <_strtod_l+0x47c>
 800713e:	2500      	movs	r5, #0
 8007140:	68c3      	ldr	r3, [r0, #12]
 8007142:	4659      	mov	r1, fp
 8007144:	60c5      	str	r5, [r0, #12]
 8007146:	930a      	str	r3, [sp, #40]	; 0x28
 8007148:	f003 f93e 	bl	800a3c8 <__mcmp>
 800714c:	42a8      	cmp	r0, r5
 800714e:	da6b      	bge.n	8007228 <_strtod_l+0x880>
 8007150:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007152:	ea53 0308 	orrs.w	r3, r3, r8
 8007156:	f040 808f 	bne.w	8007278 <_strtod_l+0x8d0>
 800715a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800715e:	2b00      	cmp	r3, #0
 8007160:	f040 808a 	bne.w	8007278 <_strtod_l+0x8d0>
 8007164:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007168:	0d1b      	lsrs	r3, r3, #20
 800716a:	051b      	lsls	r3, r3, #20
 800716c:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007170:	f240 8082 	bls.w	8007278 <_strtod_l+0x8d0>
 8007174:	6973      	ldr	r3, [r6, #20]
 8007176:	b913      	cbnz	r3, 800717e <_strtod_l+0x7d6>
 8007178:	6933      	ldr	r3, [r6, #16]
 800717a:	2b01      	cmp	r3, #1
 800717c:	dd7c      	ble.n	8007278 <_strtod_l+0x8d0>
 800717e:	4631      	mov	r1, r6
 8007180:	2201      	movs	r2, #1
 8007182:	4620      	mov	r0, r4
 8007184:	f003 f8b4 	bl	800a2f0 <__lshift>
 8007188:	4659      	mov	r1, fp
 800718a:	4606      	mov	r6, r0
 800718c:	f003 f91c 	bl	800a3c8 <__mcmp>
 8007190:	2800      	cmp	r0, #0
 8007192:	dd71      	ble.n	8007278 <_strtod_l+0x8d0>
 8007194:	9905      	ldr	r1, [sp, #20]
 8007196:	464b      	mov	r3, r9
 8007198:	4a21      	ldr	r2, [pc, #132]	; (8007220 <_strtod_l+0x878>)
 800719a:	2900      	cmp	r1, #0
 800719c:	f000 808d 	beq.w	80072ba <_strtod_l+0x912>
 80071a0:	ea02 0109 	and.w	r1, r2, r9
 80071a4:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80071a8:	f300 8087 	bgt.w	80072ba <_strtod_l+0x912>
 80071ac:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80071b0:	f77f aea9 	ble.w	8006f06 <_strtod_l+0x55e>
 80071b4:	4640      	mov	r0, r8
 80071b6:	4649      	mov	r1, r9
 80071b8:	4b1a      	ldr	r3, [pc, #104]	; (8007224 <_strtod_l+0x87c>)
 80071ba:	2200      	movs	r2, #0
 80071bc:	f7f9 f98c 	bl	80004d8 <__aeabi_dmul>
 80071c0:	4b17      	ldr	r3, [pc, #92]	; (8007220 <_strtod_l+0x878>)
 80071c2:	4680      	mov	r8, r0
 80071c4:	400b      	ands	r3, r1
 80071c6:	4689      	mov	r9, r1
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	f47f ae35 	bne.w	8006e38 <_strtod_l+0x490>
 80071ce:	2322      	movs	r3, #34	; 0x22
 80071d0:	6023      	str	r3, [r4, #0]
 80071d2:	e631      	b.n	8006e38 <_strtod_l+0x490>
 80071d4:	f04f 32ff 	mov.w	r2, #4294967295
 80071d8:	fa02 f303 	lsl.w	r3, r2, r3
 80071dc:	ea03 0808 	and.w	r8, r3, r8
 80071e0:	e6de      	b.n	8006fa0 <_strtod_l+0x5f8>
 80071e2:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 80071e6:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 80071ea:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 80071ee:	37e2      	adds	r7, #226	; 0xe2
 80071f0:	fa01 f307 	lsl.w	r3, r1, r7
 80071f4:	9310      	str	r3, [sp, #64]	; 0x40
 80071f6:	9113      	str	r1, [sp, #76]	; 0x4c
 80071f8:	e745      	b.n	8007086 <_strtod_l+0x6de>
 80071fa:	2300      	movs	r3, #0
 80071fc:	9310      	str	r3, [sp, #64]	; 0x40
 80071fe:	2301      	movs	r3, #1
 8007200:	9313      	str	r3, [sp, #76]	; 0x4c
 8007202:	e740      	b.n	8007086 <_strtod_l+0x6de>
 8007204:	463a      	mov	r2, r7
 8007206:	4620      	mov	r0, r4
 8007208:	991a      	ldr	r1, [sp, #104]	; 0x68
 800720a:	f003 f871 	bl	800a2f0 <__lshift>
 800720e:	901a      	str	r0, [sp, #104]	; 0x68
 8007210:	2800      	cmp	r0, #0
 8007212:	f47f af68 	bne.w	80070e6 <_strtod_l+0x73e>
 8007216:	e605      	b.n	8006e24 <_strtod_l+0x47c>
 8007218:	0800d1c0 	.word	0x0800d1c0
 800721c:	fffffc02 	.word	0xfffffc02
 8007220:	7ff00000 	.word	0x7ff00000
 8007224:	39500000 	.word	0x39500000
 8007228:	46ca      	mov	sl, r9
 800722a:	d165      	bne.n	80072f8 <_strtod_l+0x950>
 800722c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800722e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007232:	b352      	cbz	r2, 800728a <_strtod_l+0x8e2>
 8007234:	4a9e      	ldr	r2, [pc, #632]	; (80074b0 <_strtod_l+0xb08>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d12a      	bne.n	8007290 <_strtod_l+0x8e8>
 800723a:	9b05      	ldr	r3, [sp, #20]
 800723c:	4641      	mov	r1, r8
 800723e:	b1fb      	cbz	r3, 8007280 <_strtod_l+0x8d8>
 8007240:	4b9c      	ldr	r3, [pc, #624]	; (80074b4 <_strtod_l+0xb0c>)
 8007242:	f04f 32ff 	mov.w	r2, #4294967295
 8007246:	ea09 0303 	and.w	r3, r9, r3
 800724a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800724e:	d81a      	bhi.n	8007286 <_strtod_l+0x8de>
 8007250:	0d1b      	lsrs	r3, r3, #20
 8007252:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007256:	fa02 f303 	lsl.w	r3, r2, r3
 800725a:	4299      	cmp	r1, r3
 800725c:	d118      	bne.n	8007290 <_strtod_l+0x8e8>
 800725e:	4b96      	ldr	r3, [pc, #600]	; (80074b8 <_strtod_l+0xb10>)
 8007260:	459a      	cmp	sl, r3
 8007262:	d102      	bne.n	800726a <_strtod_l+0x8c2>
 8007264:	3101      	adds	r1, #1
 8007266:	f43f addd 	beq.w	8006e24 <_strtod_l+0x47c>
 800726a:	f04f 0800 	mov.w	r8, #0
 800726e:	4b91      	ldr	r3, [pc, #580]	; (80074b4 <_strtod_l+0xb0c>)
 8007270:	ea0a 0303 	and.w	r3, sl, r3
 8007274:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8007278:	9b05      	ldr	r3, [sp, #20]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d19a      	bne.n	80071b4 <_strtod_l+0x80c>
 800727e:	e5db      	b.n	8006e38 <_strtod_l+0x490>
 8007280:	f04f 33ff 	mov.w	r3, #4294967295
 8007284:	e7e9      	b.n	800725a <_strtod_l+0x8b2>
 8007286:	4613      	mov	r3, r2
 8007288:	e7e7      	b.n	800725a <_strtod_l+0x8b2>
 800728a:	ea53 0308 	orrs.w	r3, r3, r8
 800728e:	d081      	beq.n	8007194 <_strtod_l+0x7ec>
 8007290:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007292:	b1e3      	cbz	r3, 80072ce <_strtod_l+0x926>
 8007294:	ea13 0f0a 	tst.w	r3, sl
 8007298:	d0ee      	beq.n	8007278 <_strtod_l+0x8d0>
 800729a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800729c:	4640      	mov	r0, r8
 800729e:	4649      	mov	r1, r9
 80072a0:	9a05      	ldr	r2, [sp, #20]
 80072a2:	b1c3      	cbz	r3, 80072d6 <_strtod_l+0x92e>
 80072a4:	f7ff fb5f 	bl	8006966 <sulp>
 80072a8:	4602      	mov	r2, r0
 80072aa:	460b      	mov	r3, r1
 80072ac:	980c      	ldr	r0, [sp, #48]	; 0x30
 80072ae:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80072b0:	f7f8 ff5c 	bl	800016c <__adddf3>
 80072b4:	4680      	mov	r8, r0
 80072b6:	4689      	mov	r9, r1
 80072b8:	e7de      	b.n	8007278 <_strtod_l+0x8d0>
 80072ba:	4013      	ands	r3, r2
 80072bc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80072c0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80072c4:	f04f 38ff 	mov.w	r8, #4294967295
 80072c8:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80072cc:	e7d4      	b.n	8007278 <_strtod_l+0x8d0>
 80072ce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80072d0:	ea13 0f08 	tst.w	r3, r8
 80072d4:	e7e0      	b.n	8007298 <_strtod_l+0x8f0>
 80072d6:	f7ff fb46 	bl	8006966 <sulp>
 80072da:	4602      	mov	r2, r0
 80072dc:	460b      	mov	r3, r1
 80072de:	980c      	ldr	r0, [sp, #48]	; 0x30
 80072e0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80072e2:	f7f8 ff41 	bl	8000168 <__aeabi_dsub>
 80072e6:	2200      	movs	r2, #0
 80072e8:	2300      	movs	r3, #0
 80072ea:	4680      	mov	r8, r0
 80072ec:	4689      	mov	r9, r1
 80072ee:	f7f9 fb5b 	bl	80009a8 <__aeabi_dcmpeq>
 80072f2:	2800      	cmp	r0, #0
 80072f4:	d0c0      	beq.n	8007278 <_strtod_l+0x8d0>
 80072f6:	e606      	b.n	8006f06 <_strtod_l+0x55e>
 80072f8:	4659      	mov	r1, fp
 80072fa:	4630      	mov	r0, r6
 80072fc:	f003 f9ca 	bl	800a694 <__ratio>
 8007300:	4602      	mov	r2, r0
 8007302:	460b      	mov	r3, r1
 8007304:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007308:	2200      	movs	r2, #0
 800730a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800730e:	f7f9 fb5f 	bl	80009d0 <__aeabi_dcmple>
 8007312:	2800      	cmp	r0, #0
 8007314:	d06f      	beq.n	80073f6 <_strtod_l+0xa4e>
 8007316:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007318:	2b00      	cmp	r3, #0
 800731a:	d17c      	bne.n	8007416 <_strtod_l+0xa6e>
 800731c:	f1b8 0f00 	cmp.w	r8, #0
 8007320:	d159      	bne.n	80073d6 <_strtod_l+0xa2e>
 8007322:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007326:	2b00      	cmp	r3, #0
 8007328:	d17b      	bne.n	8007422 <_strtod_l+0xa7a>
 800732a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800732e:	2200      	movs	r2, #0
 8007330:	4b62      	ldr	r3, [pc, #392]	; (80074bc <_strtod_l+0xb14>)
 8007332:	f7f9 fb43 	bl	80009bc <__aeabi_dcmplt>
 8007336:	2800      	cmp	r0, #0
 8007338:	d15a      	bne.n	80073f0 <_strtod_l+0xa48>
 800733a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800733e:	2200      	movs	r2, #0
 8007340:	4b5f      	ldr	r3, [pc, #380]	; (80074c0 <_strtod_l+0xb18>)
 8007342:	f7f9 f8c9 	bl	80004d8 <__aeabi_dmul>
 8007346:	4605      	mov	r5, r0
 8007348:	460f      	mov	r7, r1
 800734a:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800734e:	9506      	str	r5, [sp, #24]
 8007350:	9307      	str	r3, [sp, #28]
 8007352:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007356:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800735a:	4b56      	ldr	r3, [pc, #344]	; (80074b4 <_strtod_l+0xb0c>)
 800735c:	4a55      	ldr	r2, [pc, #340]	; (80074b4 <_strtod_l+0xb0c>)
 800735e:	ea0a 0303 	and.w	r3, sl, r3
 8007362:	9313      	str	r3, [sp, #76]	; 0x4c
 8007364:	4b57      	ldr	r3, [pc, #348]	; (80074c4 <_strtod_l+0xb1c>)
 8007366:	ea0a 0202 	and.w	r2, sl, r2
 800736a:	429a      	cmp	r2, r3
 800736c:	f040 80b0 	bne.w	80074d0 <_strtod_l+0xb28>
 8007370:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8007374:	4640      	mov	r0, r8
 8007376:	4649      	mov	r1, r9
 8007378:	f003 f8ce 	bl	800a518 <__ulp>
 800737c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007380:	f7f9 f8aa 	bl	80004d8 <__aeabi_dmul>
 8007384:	4642      	mov	r2, r8
 8007386:	464b      	mov	r3, r9
 8007388:	f7f8 fef0 	bl	800016c <__adddf3>
 800738c:	f8df a124 	ldr.w	sl, [pc, #292]	; 80074b4 <_strtod_l+0xb0c>
 8007390:	4a4d      	ldr	r2, [pc, #308]	; (80074c8 <_strtod_l+0xb20>)
 8007392:	ea01 0a0a 	and.w	sl, r1, sl
 8007396:	4592      	cmp	sl, r2
 8007398:	4680      	mov	r8, r0
 800739a:	d948      	bls.n	800742e <_strtod_l+0xa86>
 800739c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800739e:	4b46      	ldr	r3, [pc, #280]	; (80074b8 <_strtod_l+0xb10>)
 80073a0:	429a      	cmp	r2, r3
 80073a2:	d103      	bne.n	80073ac <_strtod_l+0xa04>
 80073a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80073a6:	3301      	adds	r3, #1
 80073a8:	f43f ad3c 	beq.w	8006e24 <_strtod_l+0x47c>
 80073ac:	f04f 38ff 	mov.w	r8, #4294967295
 80073b0:	f8df 9104 	ldr.w	r9, [pc, #260]	; 80074b8 <_strtod_l+0xb10>
 80073b4:	4620      	mov	r0, r4
 80073b6:	991a      	ldr	r1, [sp, #104]	; 0x68
 80073b8:	f002 fd82 	bl	8009ec0 <_Bfree>
 80073bc:	4620      	mov	r0, r4
 80073be:	9908      	ldr	r1, [sp, #32]
 80073c0:	f002 fd7e 	bl	8009ec0 <_Bfree>
 80073c4:	4659      	mov	r1, fp
 80073c6:	4620      	mov	r0, r4
 80073c8:	f002 fd7a 	bl	8009ec0 <_Bfree>
 80073cc:	4631      	mov	r1, r6
 80073ce:	4620      	mov	r0, r4
 80073d0:	f002 fd76 	bl	8009ec0 <_Bfree>
 80073d4:	e605      	b.n	8006fe2 <_strtod_l+0x63a>
 80073d6:	f1b8 0f01 	cmp.w	r8, #1
 80073da:	d103      	bne.n	80073e4 <_strtod_l+0xa3c>
 80073dc:	f1b9 0f00 	cmp.w	r9, #0
 80073e0:	f43f ad91 	beq.w	8006f06 <_strtod_l+0x55e>
 80073e4:	2200      	movs	r2, #0
 80073e6:	4b39      	ldr	r3, [pc, #228]	; (80074cc <_strtod_l+0xb24>)
 80073e8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80073ea:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80073ee:	e016      	b.n	800741e <_strtod_l+0xa76>
 80073f0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80073f2:	4f33      	ldr	r7, [pc, #204]	; (80074c0 <_strtod_l+0xb18>)
 80073f4:	e7a9      	b.n	800734a <_strtod_l+0x9a2>
 80073f6:	4b32      	ldr	r3, [pc, #200]	; (80074c0 <_strtod_l+0xb18>)
 80073f8:	2200      	movs	r2, #0
 80073fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80073fe:	f7f9 f86b 	bl	80004d8 <__aeabi_dmul>
 8007402:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007404:	4605      	mov	r5, r0
 8007406:	460f      	mov	r7, r1
 8007408:	2b00      	cmp	r3, #0
 800740a:	d09e      	beq.n	800734a <_strtod_l+0x9a2>
 800740c:	4602      	mov	r2, r0
 800740e:	460b      	mov	r3, r1
 8007410:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007414:	e79d      	b.n	8007352 <_strtod_l+0x9aa>
 8007416:	2200      	movs	r2, #0
 8007418:	4b28      	ldr	r3, [pc, #160]	; (80074bc <_strtod_l+0xb14>)
 800741a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800741e:	4f27      	ldr	r7, [pc, #156]	; (80074bc <_strtod_l+0xb14>)
 8007420:	e797      	b.n	8007352 <_strtod_l+0x9aa>
 8007422:	2200      	movs	r2, #0
 8007424:	4b29      	ldr	r3, [pc, #164]	; (80074cc <_strtod_l+0xb24>)
 8007426:	4645      	mov	r5, r8
 8007428:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800742c:	e7f7      	b.n	800741e <_strtod_l+0xa76>
 800742e:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 8007432:	9b05      	ldr	r3, [sp, #20]
 8007434:	46ca      	mov	sl, r9
 8007436:	2b00      	cmp	r3, #0
 8007438:	d1bc      	bne.n	80073b4 <_strtod_l+0xa0c>
 800743a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800743e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007440:	0d1b      	lsrs	r3, r3, #20
 8007442:	051b      	lsls	r3, r3, #20
 8007444:	429a      	cmp	r2, r3
 8007446:	d1b5      	bne.n	80073b4 <_strtod_l+0xa0c>
 8007448:	4628      	mov	r0, r5
 800744a:	4639      	mov	r1, r7
 800744c:	f7f9 fe86 	bl	800115c <__aeabi_d2lz>
 8007450:	f7f9 f814 	bl	800047c <__aeabi_l2d>
 8007454:	4602      	mov	r2, r0
 8007456:	460b      	mov	r3, r1
 8007458:	4628      	mov	r0, r5
 800745a:	4639      	mov	r1, r7
 800745c:	f7f8 fe84 	bl	8000168 <__aeabi_dsub>
 8007460:	460b      	mov	r3, r1
 8007462:	4602      	mov	r2, r0
 8007464:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 8007468:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800746c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800746e:	ea4a 0a08 	orr.w	sl, sl, r8
 8007472:	ea5a 0a03 	orrs.w	sl, sl, r3
 8007476:	d06c      	beq.n	8007552 <_strtod_l+0xbaa>
 8007478:	a309      	add	r3, pc, #36	; (adr r3, 80074a0 <_strtod_l+0xaf8>)
 800747a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800747e:	f7f9 fa9d 	bl	80009bc <__aeabi_dcmplt>
 8007482:	2800      	cmp	r0, #0
 8007484:	f47f acd8 	bne.w	8006e38 <_strtod_l+0x490>
 8007488:	a307      	add	r3, pc, #28	; (adr r3, 80074a8 <_strtod_l+0xb00>)
 800748a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800748e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007492:	f7f9 fab1 	bl	80009f8 <__aeabi_dcmpgt>
 8007496:	2800      	cmp	r0, #0
 8007498:	d08c      	beq.n	80073b4 <_strtod_l+0xa0c>
 800749a:	e4cd      	b.n	8006e38 <_strtod_l+0x490>
 800749c:	f3af 8000 	nop.w
 80074a0:	94a03595 	.word	0x94a03595
 80074a4:	3fdfffff 	.word	0x3fdfffff
 80074a8:	35afe535 	.word	0x35afe535
 80074ac:	3fe00000 	.word	0x3fe00000
 80074b0:	000fffff 	.word	0x000fffff
 80074b4:	7ff00000 	.word	0x7ff00000
 80074b8:	7fefffff 	.word	0x7fefffff
 80074bc:	3ff00000 	.word	0x3ff00000
 80074c0:	3fe00000 	.word	0x3fe00000
 80074c4:	7fe00000 	.word	0x7fe00000
 80074c8:	7c9fffff 	.word	0x7c9fffff
 80074cc:	bff00000 	.word	0xbff00000
 80074d0:	9b05      	ldr	r3, [sp, #20]
 80074d2:	b333      	cbz	r3, 8007522 <_strtod_l+0xb7a>
 80074d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80074d6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80074da:	d822      	bhi.n	8007522 <_strtod_l+0xb7a>
 80074dc:	a328      	add	r3, pc, #160	; (adr r3, 8007580 <_strtod_l+0xbd8>)
 80074de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074e2:	4628      	mov	r0, r5
 80074e4:	4639      	mov	r1, r7
 80074e6:	f7f9 fa73 	bl	80009d0 <__aeabi_dcmple>
 80074ea:	b1a0      	cbz	r0, 8007516 <_strtod_l+0xb6e>
 80074ec:	4639      	mov	r1, r7
 80074ee:	4628      	mov	r0, r5
 80074f0:	f7f9 faca 	bl	8000a88 <__aeabi_d2uiz>
 80074f4:	2801      	cmp	r0, #1
 80074f6:	bf38      	it	cc
 80074f8:	2001      	movcc	r0, #1
 80074fa:	f7f8 ff73 	bl	80003e4 <__aeabi_ui2d>
 80074fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007500:	4605      	mov	r5, r0
 8007502:	460f      	mov	r7, r1
 8007504:	bb03      	cbnz	r3, 8007548 <_strtod_l+0xba0>
 8007506:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800750a:	9014      	str	r0, [sp, #80]	; 0x50
 800750c:	9315      	str	r3, [sp, #84]	; 0x54
 800750e:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007512:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007516:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007518:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800751a:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800751e:	1a9b      	subs	r3, r3, r2
 8007520:	9311      	str	r3, [sp, #68]	; 0x44
 8007522:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007524:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007526:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 800752a:	f002 fff5 	bl	800a518 <__ulp>
 800752e:	4602      	mov	r2, r0
 8007530:	460b      	mov	r3, r1
 8007532:	4640      	mov	r0, r8
 8007534:	4649      	mov	r1, r9
 8007536:	f7f8 ffcf 	bl	80004d8 <__aeabi_dmul>
 800753a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800753c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800753e:	f7f8 fe15 	bl	800016c <__adddf3>
 8007542:	4680      	mov	r8, r0
 8007544:	4689      	mov	r9, r1
 8007546:	e774      	b.n	8007432 <_strtod_l+0xa8a>
 8007548:	4602      	mov	r2, r0
 800754a:	460b      	mov	r3, r1
 800754c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8007550:	e7dd      	b.n	800750e <_strtod_l+0xb66>
 8007552:	a30d      	add	r3, pc, #52	; (adr r3, 8007588 <_strtod_l+0xbe0>)
 8007554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007558:	f7f9 fa30 	bl	80009bc <__aeabi_dcmplt>
 800755c:	e79b      	b.n	8007496 <_strtod_l+0xaee>
 800755e:	2300      	movs	r3, #0
 8007560:	930e      	str	r3, [sp, #56]	; 0x38
 8007562:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007564:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007566:	6013      	str	r3, [r2, #0]
 8007568:	f7ff ba5b 	b.w	8006a22 <_strtod_l+0x7a>
 800756c:	2a65      	cmp	r2, #101	; 0x65
 800756e:	f43f ab52 	beq.w	8006c16 <_strtod_l+0x26e>
 8007572:	2a45      	cmp	r2, #69	; 0x45
 8007574:	f43f ab4f 	beq.w	8006c16 <_strtod_l+0x26e>
 8007578:	2301      	movs	r3, #1
 800757a:	f7ff bb87 	b.w	8006c8c <_strtod_l+0x2e4>
 800757e:	bf00      	nop
 8007580:	ffc00000 	.word	0xffc00000
 8007584:	41dfffff 	.word	0x41dfffff
 8007588:	94a03595 	.word	0x94a03595
 800758c:	3fcfffff 	.word	0x3fcfffff

08007590 <_strtod_r>:
 8007590:	4b01      	ldr	r3, [pc, #4]	; (8007598 <_strtod_r+0x8>)
 8007592:	f7ff ba09 	b.w	80069a8 <_strtod_l>
 8007596:	bf00      	nop
 8007598:	20000064 	.word	0x20000064

0800759c <strtod>:
 800759c:	460a      	mov	r2, r1
 800759e:	4601      	mov	r1, r0
 80075a0:	4802      	ldr	r0, [pc, #8]	; (80075ac <strtod+0x10>)
 80075a2:	4b03      	ldr	r3, [pc, #12]	; (80075b0 <strtod+0x14>)
 80075a4:	6800      	ldr	r0, [r0, #0]
 80075a6:	f7ff b9ff 	b.w	80069a8 <_strtod_l>
 80075aa:	bf00      	nop
 80075ac:	2000021c 	.word	0x2000021c
 80075b0:	20000064 	.word	0x20000064

080075b4 <_strtol_l.constprop.0>:
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075ba:	4686      	mov	lr, r0
 80075bc:	4690      	mov	r8, r2
 80075be:	d001      	beq.n	80075c4 <_strtol_l.constprop.0+0x10>
 80075c0:	2b24      	cmp	r3, #36	; 0x24
 80075c2:	d906      	bls.n	80075d2 <_strtol_l.constprop.0+0x1e>
 80075c4:	f001 f8f4 	bl	80087b0 <__errno>
 80075c8:	2316      	movs	r3, #22
 80075ca:	6003      	str	r3, [r0, #0]
 80075cc:	2000      	movs	r0, #0
 80075ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075d2:	460d      	mov	r5, r1
 80075d4:	4835      	ldr	r0, [pc, #212]	; (80076ac <_strtol_l.constprop.0+0xf8>)
 80075d6:	462a      	mov	r2, r5
 80075d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80075dc:	5d06      	ldrb	r6, [r0, r4]
 80075de:	f016 0608 	ands.w	r6, r6, #8
 80075e2:	d1f8      	bne.n	80075d6 <_strtol_l.constprop.0+0x22>
 80075e4:	2c2d      	cmp	r4, #45	; 0x2d
 80075e6:	d12e      	bne.n	8007646 <_strtol_l.constprop.0+0x92>
 80075e8:	2601      	movs	r6, #1
 80075ea:	782c      	ldrb	r4, [r5, #0]
 80075ec:	1c95      	adds	r5, r2, #2
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d057      	beq.n	80076a2 <_strtol_l.constprop.0+0xee>
 80075f2:	2b10      	cmp	r3, #16
 80075f4:	d109      	bne.n	800760a <_strtol_l.constprop.0+0x56>
 80075f6:	2c30      	cmp	r4, #48	; 0x30
 80075f8:	d107      	bne.n	800760a <_strtol_l.constprop.0+0x56>
 80075fa:	782a      	ldrb	r2, [r5, #0]
 80075fc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8007600:	2a58      	cmp	r2, #88	; 0x58
 8007602:	d149      	bne.n	8007698 <_strtol_l.constprop.0+0xe4>
 8007604:	2310      	movs	r3, #16
 8007606:	786c      	ldrb	r4, [r5, #1]
 8007608:	3502      	adds	r5, #2
 800760a:	2200      	movs	r2, #0
 800760c:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8007610:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007614:	fbbc f9f3 	udiv	r9, ip, r3
 8007618:	4610      	mov	r0, r2
 800761a:	fb03 ca19 	mls	sl, r3, r9, ip
 800761e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8007622:	2f09      	cmp	r7, #9
 8007624:	d814      	bhi.n	8007650 <_strtol_l.constprop.0+0x9c>
 8007626:	463c      	mov	r4, r7
 8007628:	42a3      	cmp	r3, r4
 800762a:	dd20      	ble.n	800766e <_strtol_l.constprop.0+0xba>
 800762c:	1c57      	adds	r7, r2, #1
 800762e:	d007      	beq.n	8007640 <_strtol_l.constprop.0+0x8c>
 8007630:	4581      	cmp	r9, r0
 8007632:	d319      	bcc.n	8007668 <_strtol_l.constprop.0+0xb4>
 8007634:	d101      	bne.n	800763a <_strtol_l.constprop.0+0x86>
 8007636:	45a2      	cmp	sl, r4
 8007638:	db16      	blt.n	8007668 <_strtol_l.constprop.0+0xb4>
 800763a:	2201      	movs	r2, #1
 800763c:	fb00 4003 	mla	r0, r0, r3, r4
 8007640:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007644:	e7eb      	b.n	800761e <_strtol_l.constprop.0+0x6a>
 8007646:	2c2b      	cmp	r4, #43	; 0x2b
 8007648:	bf04      	itt	eq
 800764a:	782c      	ldrbeq	r4, [r5, #0]
 800764c:	1c95      	addeq	r5, r2, #2
 800764e:	e7ce      	b.n	80075ee <_strtol_l.constprop.0+0x3a>
 8007650:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8007654:	2f19      	cmp	r7, #25
 8007656:	d801      	bhi.n	800765c <_strtol_l.constprop.0+0xa8>
 8007658:	3c37      	subs	r4, #55	; 0x37
 800765a:	e7e5      	b.n	8007628 <_strtol_l.constprop.0+0x74>
 800765c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8007660:	2f19      	cmp	r7, #25
 8007662:	d804      	bhi.n	800766e <_strtol_l.constprop.0+0xba>
 8007664:	3c57      	subs	r4, #87	; 0x57
 8007666:	e7df      	b.n	8007628 <_strtol_l.constprop.0+0x74>
 8007668:	f04f 32ff 	mov.w	r2, #4294967295
 800766c:	e7e8      	b.n	8007640 <_strtol_l.constprop.0+0x8c>
 800766e:	1c53      	adds	r3, r2, #1
 8007670:	d108      	bne.n	8007684 <_strtol_l.constprop.0+0xd0>
 8007672:	2322      	movs	r3, #34	; 0x22
 8007674:	4660      	mov	r0, ip
 8007676:	f8ce 3000 	str.w	r3, [lr]
 800767a:	f1b8 0f00 	cmp.w	r8, #0
 800767e:	d0a6      	beq.n	80075ce <_strtol_l.constprop.0+0x1a>
 8007680:	1e69      	subs	r1, r5, #1
 8007682:	e006      	b.n	8007692 <_strtol_l.constprop.0+0xde>
 8007684:	b106      	cbz	r6, 8007688 <_strtol_l.constprop.0+0xd4>
 8007686:	4240      	negs	r0, r0
 8007688:	f1b8 0f00 	cmp.w	r8, #0
 800768c:	d09f      	beq.n	80075ce <_strtol_l.constprop.0+0x1a>
 800768e:	2a00      	cmp	r2, #0
 8007690:	d1f6      	bne.n	8007680 <_strtol_l.constprop.0+0xcc>
 8007692:	f8c8 1000 	str.w	r1, [r8]
 8007696:	e79a      	b.n	80075ce <_strtol_l.constprop.0+0x1a>
 8007698:	2430      	movs	r4, #48	; 0x30
 800769a:	2b00      	cmp	r3, #0
 800769c:	d1b5      	bne.n	800760a <_strtol_l.constprop.0+0x56>
 800769e:	2308      	movs	r3, #8
 80076a0:	e7b3      	b.n	800760a <_strtol_l.constprop.0+0x56>
 80076a2:	2c30      	cmp	r4, #48	; 0x30
 80076a4:	d0a9      	beq.n	80075fa <_strtol_l.constprop.0+0x46>
 80076a6:	230a      	movs	r3, #10
 80076a8:	e7af      	b.n	800760a <_strtol_l.constprop.0+0x56>
 80076aa:	bf00      	nop
 80076ac:	0800d1e9 	.word	0x0800d1e9

080076b0 <_strtol_r>:
 80076b0:	f7ff bf80 	b.w	80075b4 <_strtol_l.constprop.0>

080076b4 <strtol>:
 80076b4:	4613      	mov	r3, r2
 80076b6:	460a      	mov	r2, r1
 80076b8:	4601      	mov	r1, r0
 80076ba:	4802      	ldr	r0, [pc, #8]	; (80076c4 <strtol+0x10>)
 80076bc:	6800      	ldr	r0, [r0, #0]
 80076be:	f7ff bf79 	b.w	80075b4 <_strtol_l.constprop.0>
 80076c2:	bf00      	nop
 80076c4:	2000021c 	.word	0x2000021c

080076c8 <__cvt>:
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076ce:	461f      	mov	r7, r3
 80076d0:	bfbb      	ittet	lt
 80076d2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80076d6:	461f      	movlt	r7, r3
 80076d8:	2300      	movge	r3, #0
 80076da:	232d      	movlt	r3, #45	; 0x2d
 80076dc:	b088      	sub	sp, #32
 80076de:	4614      	mov	r4, r2
 80076e0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80076e2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80076e4:	7013      	strb	r3, [r2, #0]
 80076e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80076e8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80076ec:	f023 0820 	bic.w	r8, r3, #32
 80076f0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80076f4:	d005      	beq.n	8007702 <__cvt+0x3a>
 80076f6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80076fa:	d100      	bne.n	80076fe <__cvt+0x36>
 80076fc:	3501      	adds	r5, #1
 80076fe:	2302      	movs	r3, #2
 8007700:	e000      	b.n	8007704 <__cvt+0x3c>
 8007702:	2303      	movs	r3, #3
 8007704:	aa07      	add	r2, sp, #28
 8007706:	9204      	str	r2, [sp, #16]
 8007708:	aa06      	add	r2, sp, #24
 800770a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800770e:	e9cd 3500 	strd	r3, r5, [sp]
 8007712:	4622      	mov	r2, r4
 8007714:	463b      	mov	r3, r7
 8007716:	f001 f947 	bl	80089a8 <_dtoa_r>
 800771a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800771e:	4606      	mov	r6, r0
 8007720:	d102      	bne.n	8007728 <__cvt+0x60>
 8007722:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007724:	07db      	lsls	r3, r3, #31
 8007726:	d522      	bpl.n	800776e <__cvt+0xa6>
 8007728:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800772c:	eb06 0905 	add.w	r9, r6, r5
 8007730:	d110      	bne.n	8007754 <__cvt+0x8c>
 8007732:	7833      	ldrb	r3, [r6, #0]
 8007734:	2b30      	cmp	r3, #48	; 0x30
 8007736:	d10a      	bne.n	800774e <__cvt+0x86>
 8007738:	2200      	movs	r2, #0
 800773a:	2300      	movs	r3, #0
 800773c:	4620      	mov	r0, r4
 800773e:	4639      	mov	r1, r7
 8007740:	f7f9 f932 	bl	80009a8 <__aeabi_dcmpeq>
 8007744:	b918      	cbnz	r0, 800774e <__cvt+0x86>
 8007746:	f1c5 0501 	rsb	r5, r5, #1
 800774a:	f8ca 5000 	str.w	r5, [sl]
 800774e:	f8da 3000 	ldr.w	r3, [sl]
 8007752:	4499      	add	r9, r3
 8007754:	2200      	movs	r2, #0
 8007756:	2300      	movs	r3, #0
 8007758:	4620      	mov	r0, r4
 800775a:	4639      	mov	r1, r7
 800775c:	f7f9 f924 	bl	80009a8 <__aeabi_dcmpeq>
 8007760:	b108      	cbz	r0, 8007766 <__cvt+0x9e>
 8007762:	f8cd 901c 	str.w	r9, [sp, #28]
 8007766:	2230      	movs	r2, #48	; 0x30
 8007768:	9b07      	ldr	r3, [sp, #28]
 800776a:	454b      	cmp	r3, r9
 800776c:	d307      	bcc.n	800777e <__cvt+0xb6>
 800776e:	4630      	mov	r0, r6
 8007770:	9b07      	ldr	r3, [sp, #28]
 8007772:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007774:	1b9b      	subs	r3, r3, r6
 8007776:	6013      	str	r3, [r2, #0]
 8007778:	b008      	add	sp, #32
 800777a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800777e:	1c59      	adds	r1, r3, #1
 8007780:	9107      	str	r1, [sp, #28]
 8007782:	701a      	strb	r2, [r3, #0]
 8007784:	e7f0      	b.n	8007768 <__cvt+0xa0>

08007786 <__exponent>:
 8007786:	4603      	mov	r3, r0
 8007788:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800778a:	2900      	cmp	r1, #0
 800778c:	f803 2b02 	strb.w	r2, [r3], #2
 8007790:	bfb6      	itet	lt
 8007792:	222d      	movlt	r2, #45	; 0x2d
 8007794:	222b      	movge	r2, #43	; 0x2b
 8007796:	4249      	neglt	r1, r1
 8007798:	2909      	cmp	r1, #9
 800779a:	7042      	strb	r2, [r0, #1]
 800779c:	dd2a      	ble.n	80077f4 <__exponent+0x6e>
 800779e:	f10d 0207 	add.w	r2, sp, #7
 80077a2:	4617      	mov	r7, r2
 80077a4:	260a      	movs	r6, #10
 80077a6:	fb91 f5f6 	sdiv	r5, r1, r6
 80077aa:	4694      	mov	ip, r2
 80077ac:	fb06 1415 	mls	r4, r6, r5, r1
 80077b0:	3430      	adds	r4, #48	; 0x30
 80077b2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80077b6:	460c      	mov	r4, r1
 80077b8:	2c63      	cmp	r4, #99	; 0x63
 80077ba:	4629      	mov	r1, r5
 80077bc:	f102 32ff 	add.w	r2, r2, #4294967295
 80077c0:	dcf1      	bgt.n	80077a6 <__exponent+0x20>
 80077c2:	3130      	adds	r1, #48	; 0x30
 80077c4:	f1ac 0402 	sub.w	r4, ip, #2
 80077c8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80077cc:	4622      	mov	r2, r4
 80077ce:	1c41      	adds	r1, r0, #1
 80077d0:	42ba      	cmp	r2, r7
 80077d2:	d30a      	bcc.n	80077ea <__exponent+0x64>
 80077d4:	f10d 0209 	add.w	r2, sp, #9
 80077d8:	eba2 020c 	sub.w	r2, r2, ip
 80077dc:	42bc      	cmp	r4, r7
 80077de:	bf88      	it	hi
 80077e0:	2200      	movhi	r2, #0
 80077e2:	4413      	add	r3, r2
 80077e4:	1a18      	subs	r0, r3, r0
 80077e6:	b003      	add	sp, #12
 80077e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077ea:	f812 5b01 	ldrb.w	r5, [r2], #1
 80077ee:	f801 5f01 	strb.w	r5, [r1, #1]!
 80077f2:	e7ed      	b.n	80077d0 <__exponent+0x4a>
 80077f4:	2330      	movs	r3, #48	; 0x30
 80077f6:	3130      	adds	r1, #48	; 0x30
 80077f8:	7083      	strb	r3, [r0, #2]
 80077fa:	70c1      	strb	r1, [r0, #3]
 80077fc:	1d03      	adds	r3, r0, #4
 80077fe:	e7f1      	b.n	80077e4 <__exponent+0x5e>

08007800 <_printf_float>:
 8007800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007804:	b091      	sub	sp, #68	; 0x44
 8007806:	460c      	mov	r4, r1
 8007808:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800780c:	4616      	mov	r6, r2
 800780e:	461f      	mov	r7, r3
 8007810:	4605      	mov	r5, r0
 8007812:	f000 ff83 	bl	800871c <_localeconv_r>
 8007816:	6803      	ldr	r3, [r0, #0]
 8007818:	4618      	mov	r0, r3
 800781a:	9309      	str	r3, [sp, #36]	; 0x24
 800781c:	f7f8 fc98 	bl	8000150 <strlen>
 8007820:	2300      	movs	r3, #0
 8007822:	930e      	str	r3, [sp, #56]	; 0x38
 8007824:	f8d8 3000 	ldr.w	r3, [r8]
 8007828:	900a      	str	r0, [sp, #40]	; 0x28
 800782a:	3307      	adds	r3, #7
 800782c:	f023 0307 	bic.w	r3, r3, #7
 8007830:	f103 0208 	add.w	r2, r3, #8
 8007834:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007838:	f8d4 b000 	ldr.w	fp, [r4]
 800783c:	f8c8 2000 	str.w	r2, [r8]
 8007840:	e9d3 a800 	ldrd	sl, r8, [r3]
 8007844:	4652      	mov	r2, sl
 8007846:	4643      	mov	r3, r8
 8007848:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800784c:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8007850:	930b      	str	r3, [sp, #44]	; 0x2c
 8007852:	f04f 32ff 	mov.w	r2, #4294967295
 8007856:	4650      	mov	r0, sl
 8007858:	4b9c      	ldr	r3, [pc, #624]	; (8007acc <_printf_float+0x2cc>)
 800785a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800785c:	f7f9 f8d6 	bl	8000a0c <__aeabi_dcmpun>
 8007860:	bb70      	cbnz	r0, 80078c0 <_printf_float+0xc0>
 8007862:	f04f 32ff 	mov.w	r2, #4294967295
 8007866:	4650      	mov	r0, sl
 8007868:	4b98      	ldr	r3, [pc, #608]	; (8007acc <_printf_float+0x2cc>)
 800786a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800786c:	f7f9 f8b0 	bl	80009d0 <__aeabi_dcmple>
 8007870:	bb30      	cbnz	r0, 80078c0 <_printf_float+0xc0>
 8007872:	2200      	movs	r2, #0
 8007874:	2300      	movs	r3, #0
 8007876:	4650      	mov	r0, sl
 8007878:	4641      	mov	r1, r8
 800787a:	f7f9 f89f 	bl	80009bc <__aeabi_dcmplt>
 800787e:	b110      	cbz	r0, 8007886 <_printf_float+0x86>
 8007880:	232d      	movs	r3, #45	; 0x2d
 8007882:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007886:	4a92      	ldr	r2, [pc, #584]	; (8007ad0 <_printf_float+0x2d0>)
 8007888:	4b92      	ldr	r3, [pc, #584]	; (8007ad4 <_printf_float+0x2d4>)
 800788a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800788e:	bf94      	ite	ls
 8007890:	4690      	movls	r8, r2
 8007892:	4698      	movhi	r8, r3
 8007894:	2303      	movs	r3, #3
 8007896:	f04f 0a00 	mov.w	sl, #0
 800789a:	6123      	str	r3, [r4, #16]
 800789c:	f02b 0304 	bic.w	r3, fp, #4
 80078a0:	6023      	str	r3, [r4, #0]
 80078a2:	4633      	mov	r3, r6
 80078a4:	4621      	mov	r1, r4
 80078a6:	4628      	mov	r0, r5
 80078a8:	9700      	str	r7, [sp, #0]
 80078aa:	aa0f      	add	r2, sp, #60	; 0x3c
 80078ac:	f000 f9d6 	bl	8007c5c <_printf_common>
 80078b0:	3001      	adds	r0, #1
 80078b2:	f040 8090 	bne.w	80079d6 <_printf_float+0x1d6>
 80078b6:	f04f 30ff 	mov.w	r0, #4294967295
 80078ba:	b011      	add	sp, #68	; 0x44
 80078bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078c0:	4652      	mov	r2, sl
 80078c2:	4643      	mov	r3, r8
 80078c4:	4650      	mov	r0, sl
 80078c6:	4641      	mov	r1, r8
 80078c8:	f7f9 f8a0 	bl	8000a0c <__aeabi_dcmpun>
 80078cc:	b148      	cbz	r0, 80078e2 <_printf_float+0xe2>
 80078ce:	f1b8 0f00 	cmp.w	r8, #0
 80078d2:	bfb8      	it	lt
 80078d4:	232d      	movlt	r3, #45	; 0x2d
 80078d6:	4a80      	ldr	r2, [pc, #512]	; (8007ad8 <_printf_float+0x2d8>)
 80078d8:	bfb8      	it	lt
 80078da:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80078de:	4b7f      	ldr	r3, [pc, #508]	; (8007adc <_printf_float+0x2dc>)
 80078e0:	e7d3      	b.n	800788a <_printf_float+0x8a>
 80078e2:	6863      	ldr	r3, [r4, #4]
 80078e4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80078e8:	1c5a      	adds	r2, r3, #1
 80078ea:	d142      	bne.n	8007972 <_printf_float+0x172>
 80078ec:	2306      	movs	r3, #6
 80078ee:	6063      	str	r3, [r4, #4]
 80078f0:	2200      	movs	r2, #0
 80078f2:	9206      	str	r2, [sp, #24]
 80078f4:	aa0e      	add	r2, sp, #56	; 0x38
 80078f6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80078fa:	aa0d      	add	r2, sp, #52	; 0x34
 80078fc:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8007900:	9203      	str	r2, [sp, #12]
 8007902:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8007906:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800790a:	6023      	str	r3, [r4, #0]
 800790c:	6863      	ldr	r3, [r4, #4]
 800790e:	4652      	mov	r2, sl
 8007910:	9300      	str	r3, [sp, #0]
 8007912:	4628      	mov	r0, r5
 8007914:	4643      	mov	r3, r8
 8007916:	910b      	str	r1, [sp, #44]	; 0x2c
 8007918:	f7ff fed6 	bl	80076c8 <__cvt>
 800791c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800791e:	4680      	mov	r8, r0
 8007920:	2947      	cmp	r1, #71	; 0x47
 8007922:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007924:	d108      	bne.n	8007938 <_printf_float+0x138>
 8007926:	1cc8      	adds	r0, r1, #3
 8007928:	db02      	blt.n	8007930 <_printf_float+0x130>
 800792a:	6863      	ldr	r3, [r4, #4]
 800792c:	4299      	cmp	r1, r3
 800792e:	dd40      	ble.n	80079b2 <_printf_float+0x1b2>
 8007930:	f1a9 0902 	sub.w	r9, r9, #2
 8007934:	fa5f f989 	uxtb.w	r9, r9
 8007938:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800793c:	d81f      	bhi.n	800797e <_printf_float+0x17e>
 800793e:	464a      	mov	r2, r9
 8007940:	3901      	subs	r1, #1
 8007942:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007946:	910d      	str	r1, [sp, #52]	; 0x34
 8007948:	f7ff ff1d 	bl	8007786 <__exponent>
 800794c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800794e:	4682      	mov	sl, r0
 8007950:	1813      	adds	r3, r2, r0
 8007952:	2a01      	cmp	r2, #1
 8007954:	6123      	str	r3, [r4, #16]
 8007956:	dc02      	bgt.n	800795e <_printf_float+0x15e>
 8007958:	6822      	ldr	r2, [r4, #0]
 800795a:	07d2      	lsls	r2, r2, #31
 800795c:	d501      	bpl.n	8007962 <_printf_float+0x162>
 800795e:	3301      	adds	r3, #1
 8007960:	6123      	str	r3, [r4, #16]
 8007962:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8007966:	2b00      	cmp	r3, #0
 8007968:	d09b      	beq.n	80078a2 <_printf_float+0xa2>
 800796a:	232d      	movs	r3, #45	; 0x2d
 800796c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007970:	e797      	b.n	80078a2 <_printf_float+0xa2>
 8007972:	2947      	cmp	r1, #71	; 0x47
 8007974:	d1bc      	bne.n	80078f0 <_printf_float+0xf0>
 8007976:	2b00      	cmp	r3, #0
 8007978:	d1ba      	bne.n	80078f0 <_printf_float+0xf0>
 800797a:	2301      	movs	r3, #1
 800797c:	e7b7      	b.n	80078ee <_printf_float+0xee>
 800797e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007982:	d118      	bne.n	80079b6 <_printf_float+0x1b6>
 8007984:	2900      	cmp	r1, #0
 8007986:	6863      	ldr	r3, [r4, #4]
 8007988:	dd0b      	ble.n	80079a2 <_printf_float+0x1a2>
 800798a:	6121      	str	r1, [r4, #16]
 800798c:	b913      	cbnz	r3, 8007994 <_printf_float+0x194>
 800798e:	6822      	ldr	r2, [r4, #0]
 8007990:	07d0      	lsls	r0, r2, #31
 8007992:	d502      	bpl.n	800799a <_printf_float+0x19a>
 8007994:	3301      	adds	r3, #1
 8007996:	440b      	add	r3, r1
 8007998:	6123      	str	r3, [r4, #16]
 800799a:	f04f 0a00 	mov.w	sl, #0
 800799e:	65a1      	str	r1, [r4, #88]	; 0x58
 80079a0:	e7df      	b.n	8007962 <_printf_float+0x162>
 80079a2:	b913      	cbnz	r3, 80079aa <_printf_float+0x1aa>
 80079a4:	6822      	ldr	r2, [r4, #0]
 80079a6:	07d2      	lsls	r2, r2, #31
 80079a8:	d501      	bpl.n	80079ae <_printf_float+0x1ae>
 80079aa:	3302      	adds	r3, #2
 80079ac:	e7f4      	b.n	8007998 <_printf_float+0x198>
 80079ae:	2301      	movs	r3, #1
 80079b0:	e7f2      	b.n	8007998 <_printf_float+0x198>
 80079b2:	f04f 0967 	mov.w	r9, #103	; 0x67
 80079b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80079b8:	4299      	cmp	r1, r3
 80079ba:	db05      	blt.n	80079c8 <_printf_float+0x1c8>
 80079bc:	6823      	ldr	r3, [r4, #0]
 80079be:	6121      	str	r1, [r4, #16]
 80079c0:	07d8      	lsls	r0, r3, #31
 80079c2:	d5ea      	bpl.n	800799a <_printf_float+0x19a>
 80079c4:	1c4b      	adds	r3, r1, #1
 80079c6:	e7e7      	b.n	8007998 <_printf_float+0x198>
 80079c8:	2900      	cmp	r1, #0
 80079ca:	bfcc      	ite	gt
 80079cc:	2201      	movgt	r2, #1
 80079ce:	f1c1 0202 	rsble	r2, r1, #2
 80079d2:	4413      	add	r3, r2
 80079d4:	e7e0      	b.n	8007998 <_printf_float+0x198>
 80079d6:	6823      	ldr	r3, [r4, #0]
 80079d8:	055a      	lsls	r2, r3, #21
 80079da:	d407      	bmi.n	80079ec <_printf_float+0x1ec>
 80079dc:	6923      	ldr	r3, [r4, #16]
 80079de:	4642      	mov	r2, r8
 80079e0:	4631      	mov	r1, r6
 80079e2:	4628      	mov	r0, r5
 80079e4:	47b8      	blx	r7
 80079e6:	3001      	adds	r0, #1
 80079e8:	d12b      	bne.n	8007a42 <_printf_float+0x242>
 80079ea:	e764      	b.n	80078b6 <_printf_float+0xb6>
 80079ec:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80079f0:	f240 80dd 	bls.w	8007bae <_printf_float+0x3ae>
 80079f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80079f8:	2200      	movs	r2, #0
 80079fa:	2300      	movs	r3, #0
 80079fc:	f7f8 ffd4 	bl	80009a8 <__aeabi_dcmpeq>
 8007a00:	2800      	cmp	r0, #0
 8007a02:	d033      	beq.n	8007a6c <_printf_float+0x26c>
 8007a04:	2301      	movs	r3, #1
 8007a06:	4631      	mov	r1, r6
 8007a08:	4628      	mov	r0, r5
 8007a0a:	4a35      	ldr	r2, [pc, #212]	; (8007ae0 <_printf_float+0x2e0>)
 8007a0c:	47b8      	blx	r7
 8007a0e:	3001      	adds	r0, #1
 8007a10:	f43f af51 	beq.w	80078b6 <_printf_float+0xb6>
 8007a14:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	db02      	blt.n	8007a22 <_printf_float+0x222>
 8007a1c:	6823      	ldr	r3, [r4, #0]
 8007a1e:	07d8      	lsls	r0, r3, #31
 8007a20:	d50f      	bpl.n	8007a42 <_printf_float+0x242>
 8007a22:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007a26:	4631      	mov	r1, r6
 8007a28:	4628      	mov	r0, r5
 8007a2a:	47b8      	blx	r7
 8007a2c:	3001      	adds	r0, #1
 8007a2e:	f43f af42 	beq.w	80078b6 <_printf_float+0xb6>
 8007a32:	f04f 0800 	mov.w	r8, #0
 8007a36:	f104 091a 	add.w	r9, r4, #26
 8007a3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a3c:	3b01      	subs	r3, #1
 8007a3e:	4543      	cmp	r3, r8
 8007a40:	dc09      	bgt.n	8007a56 <_printf_float+0x256>
 8007a42:	6823      	ldr	r3, [r4, #0]
 8007a44:	079b      	lsls	r3, r3, #30
 8007a46:	f100 8104 	bmi.w	8007c52 <_printf_float+0x452>
 8007a4a:	68e0      	ldr	r0, [r4, #12]
 8007a4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007a4e:	4298      	cmp	r0, r3
 8007a50:	bfb8      	it	lt
 8007a52:	4618      	movlt	r0, r3
 8007a54:	e731      	b.n	80078ba <_printf_float+0xba>
 8007a56:	2301      	movs	r3, #1
 8007a58:	464a      	mov	r2, r9
 8007a5a:	4631      	mov	r1, r6
 8007a5c:	4628      	mov	r0, r5
 8007a5e:	47b8      	blx	r7
 8007a60:	3001      	adds	r0, #1
 8007a62:	f43f af28 	beq.w	80078b6 <_printf_float+0xb6>
 8007a66:	f108 0801 	add.w	r8, r8, #1
 8007a6a:	e7e6      	b.n	8007a3a <_printf_float+0x23a>
 8007a6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	dc38      	bgt.n	8007ae4 <_printf_float+0x2e4>
 8007a72:	2301      	movs	r3, #1
 8007a74:	4631      	mov	r1, r6
 8007a76:	4628      	mov	r0, r5
 8007a78:	4a19      	ldr	r2, [pc, #100]	; (8007ae0 <_printf_float+0x2e0>)
 8007a7a:	47b8      	blx	r7
 8007a7c:	3001      	adds	r0, #1
 8007a7e:	f43f af1a 	beq.w	80078b6 <_printf_float+0xb6>
 8007a82:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8007a86:	4313      	orrs	r3, r2
 8007a88:	d102      	bne.n	8007a90 <_printf_float+0x290>
 8007a8a:	6823      	ldr	r3, [r4, #0]
 8007a8c:	07d9      	lsls	r1, r3, #31
 8007a8e:	d5d8      	bpl.n	8007a42 <_printf_float+0x242>
 8007a90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007a94:	4631      	mov	r1, r6
 8007a96:	4628      	mov	r0, r5
 8007a98:	47b8      	blx	r7
 8007a9a:	3001      	adds	r0, #1
 8007a9c:	f43f af0b 	beq.w	80078b6 <_printf_float+0xb6>
 8007aa0:	f04f 0900 	mov.w	r9, #0
 8007aa4:	f104 0a1a 	add.w	sl, r4, #26
 8007aa8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007aaa:	425b      	negs	r3, r3
 8007aac:	454b      	cmp	r3, r9
 8007aae:	dc01      	bgt.n	8007ab4 <_printf_float+0x2b4>
 8007ab0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007ab2:	e794      	b.n	80079de <_printf_float+0x1de>
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	4652      	mov	r2, sl
 8007ab8:	4631      	mov	r1, r6
 8007aba:	4628      	mov	r0, r5
 8007abc:	47b8      	blx	r7
 8007abe:	3001      	adds	r0, #1
 8007ac0:	f43f aef9 	beq.w	80078b6 <_printf_float+0xb6>
 8007ac4:	f109 0901 	add.w	r9, r9, #1
 8007ac8:	e7ee      	b.n	8007aa8 <_printf_float+0x2a8>
 8007aca:	bf00      	nop
 8007acc:	7fefffff 	.word	0x7fefffff
 8007ad0:	0800d2e9 	.word	0x0800d2e9
 8007ad4:	0800d2ed 	.word	0x0800d2ed
 8007ad8:	0800d2f1 	.word	0x0800d2f1
 8007adc:	0800d2f5 	.word	0x0800d2f5
 8007ae0:	0800d2f9 	.word	0x0800d2f9
 8007ae4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007ae6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007ae8:	429a      	cmp	r2, r3
 8007aea:	bfa8      	it	ge
 8007aec:	461a      	movge	r2, r3
 8007aee:	2a00      	cmp	r2, #0
 8007af0:	4691      	mov	r9, r2
 8007af2:	dc37      	bgt.n	8007b64 <_printf_float+0x364>
 8007af4:	f04f 0b00 	mov.w	fp, #0
 8007af8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007afc:	f104 021a 	add.w	r2, r4, #26
 8007b00:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007b04:	ebaa 0309 	sub.w	r3, sl, r9
 8007b08:	455b      	cmp	r3, fp
 8007b0a:	dc33      	bgt.n	8007b74 <_printf_float+0x374>
 8007b0c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007b10:	429a      	cmp	r2, r3
 8007b12:	db3b      	blt.n	8007b8c <_printf_float+0x38c>
 8007b14:	6823      	ldr	r3, [r4, #0]
 8007b16:	07da      	lsls	r2, r3, #31
 8007b18:	d438      	bmi.n	8007b8c <_printf_float+0x38c>
 8007b1a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8007b1e:	eba2 0903 	sub.w	r9, r2, r3
 8007b22:	eba2 020a 	sub.w	r2, r2, sl
 8007b26:	4591      	cmp	r9, r2
 8007b28:	bfa8      	it	ge
 8007b2a:	4691      	movge	r9, r2
 8007b2c:	f1b9 0f00 	cmp.w	r9, #0
 8007b30:	dc34      	bgt.n	8007b9c <_printf_float+0x39c>
 8007b32:	f04f 0800 	mov.w	r8, #0
 8007b36:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007b3a:	f104 0a1a 	add.w	sl, r4, #26
 8007b3e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007b42:	1a9b      	subs	r3, r3, r2
 8007b44:	eba3 0309 	sub.w	r3, r3, r9
 8007b48:	4543      	cmp	r3, r8
 8007b4a:	f77f af7a 	ble.w	8007a42 <_printf_float+0x242>
 8007b4e:	2301      	movs	r3, #1
 8007b50:	4652      	mov	r2, sl
 8007b52:	4631      	mov	r1, r6
 8007b54:	4628      	mov	r0, r5
 8007b56:	47b8      	blx	r7
 8007b58:	3001      	adds	r0, #1
 8007b5a:	f43f aeac 	beq.w	80078b6 <_printf_float+0xb6>
 8007b5e:	f108 0801 	add.w	r8, r8, #1
 8007b62:	e7ec      	b.n	8007b3e <_printf_float+0x33e>
 8007b64:	4613      	mov	r3, r2
 8007b66:	4631      	mov	r1, r6
 8007b68:	4642      	mov	r2, r8
 8007b6a:	4628      	mov	r0, r5
 8007b6c:	47b8      	blx	r7
 8007b6e:	3001      	adds	r0, #1
 8007b70:	d1c0      	bne.n	8007af4 <_printf_float+0x2f4>
 8007b72:	e6a0      	b.n	80078b6 <_printf_float+0xb6>
 8007b74:	2301      	movs	r3, #1
 8007b76:	4631      	mov	r1, r6
 8007b78:	4628      	mov	r0, r5
 8007b7a:	920b      	str	r2, [sp, #44]	; 0x2c
 8007b7c:	47b8      	blx	r7
 8007b7e:	3001      	adds	r0, #1
 8007b80:	f43f ae99 	beq.w	80078b6 <_printf_float+0xb6>
 8007b84:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007b86:	f10b 0b01 	add.w	fp, fp, #1
 8007b8a:	e7b9      	b.n	8007b00 <_printf_float+0x300>
 8007b8c:	4631      	mov	r1, r6
 8007b8e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b92:	4628      	mov	r0, r5
 8007b94:	47b8      	blx	r7
 8007b96:	3001      	adds	r0, #1
 8007b98:	d1bf      	bne.n	8007b1a <_printf_float+0x31a>
 8007b9a:	e68c      	b.n	80078b6 <_printf_float+0xb6>
 8007b9c:	464b      	mov	r3, r9
 8007b9e:	4631      	mov	r1, r6
 8007ba0:	4628      	mov	r0, r5
 8007ba2:	eb08 020a 	add.w	r2, r8, sl
 8007ba6:	47b8      	blx	r7
 8007ba8:	3001      	adds	r0, #1
 8007baa:	d1c2      	bne.n	8007b32 <_printf_float+0x332>
 8007bac:	e683      	b.n	80078b6 <_printf_float+0xb6>
 8007bae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007bb0:	2a01      	cmp	r2, #1
 8007bb2:	dc01      	bgt.n	8007bb8 <_printf_float+0x3b8>
 8007bb4:	07db      	lsls	r3, r3, #31
 8007bb6:	d539      	bpl.n	8007c2c <_printf_float+0x42c>
 8007bb8:	2301      	movs	r3, #1
 8007bba:	4642      	mov	r2, r8
 8007bbc:	4631      	mov	r1, r6
 8007bbe:	4628      	mov	r0, r5
 8007bc0:	47b8      	blx	r7
 8007bc2:	3001      	adds	r0, #1
 8007bc4:	f43f ae77 	beq.w	80078b6 <_printf_float+0xb6>
 8007bc8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007bcc:	4631      	mov	r1, r6
 8007bce:	4628      	mov	r0, r5
 8007bd0:	47b8      	blx	r7
 8007bd2:	3001      	adds	r0, #1
 8007bd4:	f43f ae6f 	beq.w	80078b6 <_printf_float+0xb6>
 8007bd8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007bdc:	2200      	movs	r2, #0
 8007bde:	2300      	movs	r3, #0
 8007be0:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8007be4:	f7f8 fee0 	bl	80009a8 <__aeabi_dcmpeq>
 8007be8:	b9d8      	cbnz	r0, 8007c22 <_printf_float+0x422>
 8007bea:	f109 33ff 	add.w	r3, r9, #4294967295
 8007bee:	f108 0201 	add.w	r2, r8, #1
 8007bf2:	4631      	mov	r1, r6
 8007bf4:	4628      	mov	r0, r5
 8007bf6:	47b8      	blx	r7
 8007bf8:	3001      	adds	r0, #1
 8007bfa:	d10e      	bne.n	8007c1a <_printf_float+0x41a>
 8007bfc:	e65b      	b.n	80078b6 <_printf_float+0xb6>
 8007bfe:	2301      	movs	r3, #1
 8007c00:	464a      	mov	r2, r9
 8007c02:	4631      	mov	r1, r6
 8007c04:	4628      	mov	r0, r5
 8007c06:	47b8      	blx	r7
 8007c08:	3001      	adds	r0, #1
 8007c0a:	f43f ae54 	beq.w	80078b6 <_printf_float+0xb6>
 8007c0e:	f108 0801 	add.w	r8, r8, #1
 8007c12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c14:	3b01      	subs	r3, #1
 8007c16:	4543      	cmp	r3, r8
 8007c18:	dcf1      	bgt.n	8007bfe <_printf_float+0x3fe>
 8007c1a:	4653      	mov	r3, sl
 8007c1c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007c20:	e6de      	b.n	80079e0 <_printf_float+0x1e0>
 8007c22:	f04f 0800 	mov.w	r8, #0
 8007c26:	f104 091a 	add.w	r9, r4, #26
 8007c2a:	e7f2      	b.n	8007c12 <_printf_float+0x412>
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	4642      	mov	r2, r8
 8007c30:	e7df      	b.n	8007bf2 <_printf_float+0x3f2>
 8007c32:	2301      	movs	r3, #1
 8007c34:	464a      	mov	r2, r9
 8007c36:	4631      	mov	r1, r6
 8007c38:	4628      	mov	r0, r5
 8007c3a:	47b8      	blx	r7
 8007c3c:	3001      	adds	r0, #1
 8007c3e:	f43f ae3a 	beq.w	80078b6 <_printf_float+0xb6>
 8007c42:	f108 0801 	add.w	r8, r8, #1
 8007c46:	68e3      	ldr	r3, [r4, #12]
 8007c48:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007c4a:	1a5b      	subs	r3, r3, r1
 8007c4c:	4543      	cmp	r3, r8
 8007c4e:	dcf0      	bgt.n	8007c32 <_printf_float+0x432>
 8007c50:	e6fb      	b.n	8007a4a <_printf_float+0x24a>
 8007c52:	f04f 0800 	mov.w	r8, #0
 8007c56:	f104 0919 	add.w	r9, r4, #25
 8007c5a:	e7f4      	b.n	8007c46 <_printf_float+0x446>

08007c5c <_printf_common>:
 8007c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c60:	4616      	mov	r6, r2
 8007c62:	4699      	mov	r9, r3
 8007c64:	688a      	ldr	r2, [r1, #8]
 8007c66:	690b      	ldr	r3, [r1, #16]
 8007c68:	4607      	mov	r7, r0
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	bfb8      	it	lt
 8007c6e:	4613      	movlt	r3, r2
 8007c70:	6033      	str	r3, [r6, #0]
 8007c72:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007c76:	460c      	mov	r4, r1
 8007c78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007c7c:	b10a      	cbz	r2, 8007c82 <_printf_common+0x26>
 8007c7e:	3301      	adds	r3, #1
 8007c80:	6033      	str	r3, [r6, #0]
 8007c82:	6823      	ldr	r3, [r4, #0]
 8007c84:	0699      	lsls	r1, r3, #26
 8007c86:	bf42      	ittt	mi
 8007c88:	6833      	ldrmi	r3, [r6, #0]
 8007c8a:	3302      	addmi	r3, #2
 8007c8c:	6033      	strmi	r3, [r6, #0]
 8007c8e:	6825      	ldr	r5, [r4, #0]
 8007c90:	f015 0506 	ands.w	r5, r5, #6
 8007c94:	d106      	bne.n	8007ca4 <_printf_common+0x48>
 8007c96:	f104 0a19 	add.w	sl, r4, #25
 8007c9a:	68e3      	ldr	r3, [r4, #12]
 8007c9c:	6832      	ldr	r2, [r6, #0]
 8007c9e:	1a9b      	subs	r3, r3, r2
 8007ca0:	42ab      	cmp	r3, r5
 8007ca2:	dc2b      	bgt.n	8007cfc <_printf_common+0xa0>
 8007ca4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007ca8:	1e13      	subs	r3, r2, #0
 8007caa:	6822      	ldr	r2, [r4, #0]
 8007cac:	bf18      	it	ne
 8007cae:	2301      	movne	r3, #1
 8007cb0:	0692      	lsls	r2, r2, #26
 8007cb2:	d430      	bmi.n	8007d16 <_printf_common+0xba>
 8007cb4:	4649      	mov	r1, r9
 8007cb6:	4638      	mov	r0, r7
 8007cb8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007cbc:	47c0      	blx	r8
 8007cbe:	3001      	adds	r0, #1
 8007cc0:	d023      	beq.n	8007d0a <_printf_common+0xae>
 8007cc2:	6823      	ldr	r3, [r4, #0]
 8007cc4:	6922      	ldr	r2, [r4, #16]
 8007cc6:	f003 0306 	and.w	r3, r3, #6
 8007cca:	2b04      	cmp	r3, #4
 8007ccc:	bf14      	ite	ne
 8007cce:	2500      	movne	r5, #0
 8007cd0:	6833      	ldreq	r3, [r6, #0]
 8007cd2:	f04f 0600 	mov.w	r6, #0
 8007cd6:	bf08      	it	eq
 8007cd8:	68e5      	ldreq	r5, [r4, #12]
 8007cda:	f104 041a 	add.w	r4, r4, #26
 8007cde:	bf08      	it	eq
 8007ce0:	1aed      	subeq	r5, r5, r3
 8007ce2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007ce6:	bf08      	it	eq
 8007ce8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007cec:	4293      	cmp	r3, r2
 8007cee:	bfc4      	itt	gt
 8007cf0:	1a9b      	subgt	r3, r3, r2
 8007cf2:	18ed      	addgt	r5, r5, r3
 8007cf4:	42b5      	cmp	r5, r6
 8007cf6:	d11a      	bne.n	8007d2e <_printf_common+0xd2>
 8007cf8:	2000      	movs	r0, #0
 8007cfa:	e008      	b.n	8007d0e <_printf_common+0xb2>
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	4652      	mov	r2, sl
 8007d00:	4649      	mov	r1, r9
 8007d02:	4638      	mov	r0, r7
 8007d04:	47c0      	blx	r8
 8007d06:	3001      	adds	r0, #1
 8007d08:	d103      	bne.n	8007d12 <_printf_common+0xb6>
 8007d0a:	f04f 30ff 	mov.w	r0, #4294967295
 8007d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d12:	3501      	adds	r5, #1
 8007d14:	e7c1      	b.n	8007c9a <_printf_common+0x3e>
 8007d16:	2030      	movs	r0, #48	; 0x30
 8007d18:	18e1      	adds	r1, r4, r3
 8007d1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007d1e:	1c5a      	adds	r2, r3, #1
 8007d20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007d24:	4422      	add	r2, r4
 8007d26:	3302      	adds	r3, #2
 8007d28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007d2c:	e7c2      	b.n	8007cb4 <_printf_common+0x58>
 8007d2e:	2301      	movs	r3, #1
 8007d30:	4622      	mov	r2, r4
 8007d32:	4649      	mov	r1, r9
 8007d34:	4638      	mov	r0, r7
 8007d36:	47c0      	blx	r8
 8007d38:	3001      	adds	r0, #1
 8007d3a:	d0e6      	beq.n	8007d0a <_printf_common+0xae>
 8007d3c:	3601      	adds	r6, #1
 8007d3e:	e7d9      	b.n	8007cf4 <_printf_common+0x98>

08007d40 <_printf_i>:
 8007d40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d44:	7e0f      	ldrb	r7, [r1, #24]
 8007d46:	4691      	mov	r9, r2
 8007d48:	2f78      	cmp	r7, #120	; 0x78
 8007d4a:	4680      	mov	r8, r0
 8007d4c:	460c      	mov	r4, r1
 8007d4e:	469a      	mov	sl, r3
 8007d50:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007d52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007d56:	d807      	bhi.n	8007d68 <_printf_i+0x28>
 8007d58:	2f62      	cmp	r7, #98	; 0x62
 8007d5a:	d80a      	bhi.n	8007d72 <_printf_i+0x32>
 8007d5c:	2f00      	cmp	r7, #0
 8007d5e:	f000 80d5 	beq.w	8007f0c <_printf_i+0x1cc>
 8007d62:	2f58      	cmp	r7, #88	; 0x58
 8007d64:	f000 80c1 	beq.w	8007eea <_printf_i+0x1aa>
 8007d68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007d70:	e03a      	b.n	8007de8 <_printf_i+0xa8>
 8007d72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007d76:	2b15      	cmp	r3, #21
 8007d78:	d8f6      	bhi.n	8007d68 <_printf_i+0x28>
 8007d7a:	a101      	add	r1, pc, #4	; (adr r1, 8007d80 <_printf_i+0x40>)
 8007d7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007d80:	08007dd9 	.word	0x08007dd9
 8007d84:	08007ded 	.word	0x08007ded
 8007d88:	08007d69 	.word	0x08007d69
 8007d8c:	08007d69 	.word	0x08007d69
 8007d90:	08007d69 	.word	0x08007d69
 8007d94:	08007d69 	.word	0x08007d69
 8007d98:	08007ded 	.word	0x08007ded
 8007d9c:	08007d69 	.word	0x08007d69
 8007da0:	08007d69 	.word	0x08007d69
 8007da4:	08007d69 	.word	0x08007d69
 8007da8:	08007d69 	.word	0x08007d69
 8007dac:	08007ef3 	.word	0x08007ef3
 8007db0:	08007e19 	.word	0x08007e19
 8007db4:	08007ead 	.word	0x08007ead
 8007db8:	08007d69 	.word	0x08007d69
 8007dbc:	08007d69 	.word	0x08007d69
 8007dc0:	08007f15 	.word	0x08007f15
 8007dc4:	08007d69 	.word	0x08007d69
 8007dc8:	08007e19 	.word	0x08007e19
 8007dcc:	08007d69 	.word	0x08007d69
 8007dd0:	08007d69 	.word	0x08007d69
 8007dd4:	08007eb5 	.word	0x08007eb5
 8007dd8:	682b      	ldr	r3, [r5, #0]
 8007dda:	1d1a      	adds	r2, r3, #4
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	602a      	str	r2, [r5, #0]
 8007de0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007de4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007de8:	2301      	movs	r3, #1
 8007dea:	e0a0      	b.n	8007f2e <_printf_i+0x1ee>
 8007dec:	6820      	ldr	r0, [r4, #0]
 8007dee:	682b      	ldr	r3, [r5, #0]
 8007df0:	0607      	lsls	r7, r0, #24
 8007df2:	f103 0104 	add.w	r1, r3, #4
 8007df6:	6029      	str	r1, [r5, #0]
 8007df8:	d501      	bpl.n	8007dfe <_printf_i+0xbe>
 8007dfa:	681e      	ldr	r6, [r3, #0]
 8007dfc:	e003      	b.n	8007e06 <_printf_i+0xc6>
 8007dfe:	0646      	lsls	r6, r0, #25
 8007e00:	d5fb      	bpl.n	8007dfa <_printf_i+0xba>
 8007e02:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007e06:	2e00      	cmp	r6, #0
 8007e08:	da03      	bge.n	8007e12 <_printf_i+0xd2>
 8007e0a:	232d      	movs	r3, #45	; 0x2d
 8007e0c:	4276      	negs	r6, r6
 8007e0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e12:	230a      	movs	r3, #10
 8007e14:	4859      	ldr	r0, [pc, #356]	; (8007f7c <_printf_i+0x23c>)
 8007e16:	e012      	b.n	8007e3e <_printf_i+0xfe>
 8007e18:	682b      	ldr	r3, [r5, #0]
 8007e1a:	6820      	ldr	r0, [r4, #0]
 8007e1c:	1d19      	adds	r1, r3, #4
 8007e1e:	6029      	str	r1, [r5, #0]
 8007e20:	0605      	lsls	r5, r0, #24
 8007e22:	d501      	bpl.n	8007e28 <_printf_i+0xe8>
 8007e24:	681e      	ldr	r6, [r3, #0]
 8007e26:	e002      	b.n	8007e2e <_printf_i+0xee>
 8007e28:	0641      	lsls	r1, r0, #25
 8007e2a:	d5fb      	bpl.n	8007e24 <_printf_i+0xe4>
 8007e2c:	881e      	ldrh	r6, [r3, #0]
 8007e2e:	2f6f      	cmp	r7, #111	; 0x6f
 8007e30:	bf0c      	ite	eq
 8007e32:	2308      	moveq	r3, #8
 8007e34:	230a      	movne	r3, #10
 8007e36:	4851      	ldr	r0, [pc, #324]	; (8007f7c <_printf_i+0x23c>)
 8007e38:	2100      	movs	r1, #0
 8007e3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007e3e:	6865      	ldr	r5, [r4, #4]
 8007e40:	2d00      	cmp	r5, #0
 8007e42:	bfa8      	it	ge
 8007e44:	6821      	ldrge	r1, [r4, #0]
 8007e46:	60a5      	str	r5, [r4, #8]
 8007e48:	bfa4      	itt	ge
 8007e4a:	f021 0104 	bicge.w	r1, r1, #4
 8007e4e:	6021      	strge	r1, [r4, #0]
 8007e50:	b90e      	cbnz	r6, 8007e56 <_printf_i+0x116>
 8007e52:	2d00      	cmp	r5, #0
 8007e54:	d04b      	beq.n	8007eee <_printf_i+0x1ae>
 8007e56:	4615      	mov	r5, r2
 8007e58:	fbb6 f1f3 	udiv	r1, r6, r3
 8007e5c:	fb03 6711 	mls	r7, r3, r1, r6
 8007e60:	5dc7      	ldrb	r7, [r0, r7]
 8007e62:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007e66:	4637      	mov	r7, r6
 8007e68:	42bb      	cmp	r3, r7
 8007e6a:	460e      	mov	r6, r1
 8007e6c:	d9f4      	bls.n	8007e58 <_printf_i+0x118>
 8007e6e:	2b08      	cmp	r3, #8
 8007e70:	d10b      	bne.n	8007e8a <_printf_i+0x14a>
 8007e72:	6823      	ldr	r3, [r4, #0]
 8007e74:	07de      	lsls	r6, r3, #31
 8007e76:	d508      	bpl.n	8007e8a <_printf_i+0x14a>
 8007e78:	6923      	ldr	r3, [r4, #16]
 8007e7a:	6861      	ldr	r1, [r4, #4]
 8007e7c:	4299      	cmp	r1, r3
 8007e7e:	bfde      	ittt	le
 8007e80:	2330      	movle	r3, #48	; 0x30
 8007e82:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007e86:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007e8a:	1b52      	subs	r2, r2, r5
 8007e8c:	6122      	str	r2, [r4, #16]
 8007e8e:	464b      	mov	r3, r9
 8007e90:	4621      	mov	r1, r4
 8007e92:	4640      	mov	r0, r8
 8007e94:	f8cd a000 	str.w	sl, [sp]
 8007e98:	aa03      	add	r2, sp, #12
 8007e9a:	f7ff fedf 	bl	8007c5c <_printf_common>
 8007e9e:	3001      	adds	r0, #1
 8007ea0:	d14a      	bne.n	8007f38 <_printf_i+0x1f8>
 8007ea2:	f04f 30ff 	mov.w	r0, #4294967295
 8007ea6:	b004      	add	sp, #16
 8007ea8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007eac:	6823      	ldr	r3, [r4, #0]
 8007eae:	f043 0320 	orr.w	r3, r3, #32
 8007eb2:	6023      	str	r3, [r4, #0]
 8007eb4:	2778      	movs	r7, #120	; 0x78
 8007eb6:	4832      	ldr	r0, [pc, #200]	; (8007f80 <_printf_i+0x240>)
 8007eb8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007ebc:	6823      	ldr	r3, [r4, #0]
 8007ebe:	6829      	ldr	r1, [r5, #0]
 8007ec0:	061f      	lsls	r7, r3, #24
 8007ec2:	f851 6b04 	ldr.w	r6, [r1], #4
 8007ec6:	d402      	bmi.n	8007ece <_printf_i+0x18e>
 8007ec8:	065f      	lsls	r7, r3, #25
 8007eca:	bf48      	it	mi
 8007ecc:	b2b6      	uxthmi	r6, r6
 8007ece:	07df      	lsls	r7, r3, #31
 8007ed0:	bf48      	it	mi
 8007ed2:	f043 0320 	orrmi.w	r3, r3, #32
 8007ed6:	6029      	str	r1, [r5, #0]
 8007ed8:	bf48      	it	mi
 8007eda:	6023      	strmi	r3, [r4, #0]
 8007edc:	b91e      	cbnz	r6, 8007ee6 <_printf_i+0x1a6>
 8007ede:	6823      	ldr	r3, [r4, #0]
 8007ee0:	f023 0320 	bic.w	r3, r3, #32
 8007ee4:	6023      	str	r3, [r4, #0]
 8007ee6:	2310      	movs	r3, #16
 8007ee8:	e7a6      	b.n	8007e38 <_printf_i+0xf8>
 8007eea:	4824      	ldr	r0, [pc, #144]	; (8007f7c <_printf_i+0x23c>)
 8007eec:	e7e4      	b.n	8007eb8 <_printf_i+0x178>
 8007eee:	4615      	mov	r5, r2
 8007ef0:	e7bd      	b.n	8007e6e <_printf_i+0x12e>
 8007ef2:	682b      	ldr	r3, [r5, #0]
 8007ef4:	6826      	ldr	r6, [r4, #0]
 8007ef6:	1d18      	adds	r0, r3, #4
 8007ef8:	6961      	ldr	r1, [r4, #20]
 8007efa:	6028      	str	r0, [r5, #0]
 8007efc:	0635      	lsls	r5, r6, #24
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	d501      	bpl.n	8007f06 <_printf_i+0x1c6>
 8007f02:	6019      	str	r1, [r3, #0]
 8007f04:	e002      	b.n	8007f0c <_printf_i+0x1cc>
 8007f06:	0670      	lsls	r0, r6, #25
 8007f08:	d5fb      	bpl.n	8007f02 <_printf_i+0x1c2>
 8007f0a:	8019      	strh	r1, [r3, #0]
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	4615      	mov	r5, r2
 8007f10:	6123      	str	r3, [r4, #16]
 8007f12:	e7bc      	b.n	8007e8e <_printf_i+0x14e>
 8007f14:	682b      	ldr	r3, [r5, #0]
 8007f16:	2100      	movs	r1, #0
 8007f18:	1d1a      	adds	r2, r3, #4
 8007f1a:	602a      	str	r2, [r5, #0]
 8007f1c:	681d      	ldr	r5, [r3, #0]
 8007f1e:	6862      	ldr	r2, [r4, #4]
 8007f20:	4628      	mov	r0, r5
 8007f22:	f000 fc72 	bl	800880a <memchr>
 8007f26:	b108      	cbz	r0, 8007f2c <_printf_i+0x1ec>
 8007f28:	1b40      	subs	r0, r0, r5
 8007f2a:	6060      	str	r0, [r4, #4]
 8007f2c:	6863      	ldr	r3, [r4, #4]
 8007f2e:	6123      	str	r3, [r4, #16]
 8007f30:	2300      	movs	r3, #0
 8007f32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f36:	e7aa      	b.n	8007e8e <_printf_i+0x14e>
 8007f38:	462a      	mov	r2, r5
 8007f3a:	4649      	mov	r1, r9
 8007f3c:	4640      	mov	r0, r8
 8007f3e:	6923      	ldr	r3, [r4, #16]
 8007f40:	47d0      	blx	sl
 8007f42:	3001      	adds	r0, #1
 8007f44:	d0ad      	beq.n	8007ea2 <_printf_i+0x162>
 8007f46:	6823      	ldr	r3, [r4, #0]
 8007f48:	079b      	lsls	r3, r3, #30
 8007f4a:	d413      	bmi.n	8007f74 <_printf_i+0x234>
 8007f4c:	68e0      	ldr	r0, [r4, #12]
 8007f4e:	9b03      	ldr	r3, [sp, #12]
 8007f50:	4298      	cmp	r0, r3
 8007f52:	bfb8      	it	lt
 8007f54:	4618      	movlt	r0, r3
 8007f56:	e7a6      	b.n	8007ea6 <_printf_i+0x166>
 8007f58:	2301      	movs	r3, #1
 8007f5a:	4632      	mov	r2, r6
 8007f5c:	4649      	mov	r1, r9
 8007f5e:	4640      	mov	r0, r8
 8007f60:	47d0      	blx	sl
 8007f62:	3001      	adds	r0, #1
 8007f64:	d09d      	beq.n	8007ea2 <_printf_i+0x162>
 8007f66:	3501      	adds	r5, #1
 8007f68:	68e3      	ldr	r3, [r4, #12]
 8007f6a:	9903      	ldr	r1, [sp, #12]
 8007f6c:	1a5b      	subs	r3, r3, r1
 8007f6e:	42ab      	cmp	r3, r5
 8007f70:	dcf2      	bgt.n	8007f58 <_printf_i+0x218>
 8007f72:	e7eb      	b.n	8007f4c <_printf_i+0x20c>
 8007f74:	2500      	movs	r5, #0
 8007f76:	f104 0619 	add.w	r6, r4, #25
 8007f7a:	e7f5      	b.n	8007f68 <_printf_i+0x228>
 8007f7c:	0800d2fb 	.word	0x0800d2fb
 8007f80:	0800d30c 	.word	0x0800d30c

08007f84 <_scanf_float>:
 8007f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f88:	b087      	sub	sp, #28
 8007f8a:	9303      	str	r3, [sp, #12]
 8007f8c:	688b      	ldr	r3, [r1, #8]
 8007f8e:	4617      	mov	r7, r2
 8007f90:	1e5a      	subs	r2, r3, #1
 8007f92:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007f96:	bf85      	ittet	hi
 8007f98:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007f9c:	195b      	addhi	r3, r3, r5
 8007f9e:	2300      	movls	r3, #0
 8007fa0:	9302      	strhi	r3, [sp, #8]
 8007fa2:	bf88      	it	hi
 8007fa4:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007fa8:	468b      	mov	fp, r1
 8007faa:	f04f 0500 	mov.w	r5, #0
 8007fae:	bf8c      	ite	hi
 8007fb0:	608b      	strhi	r3, [r1, #8]
 8007fb2:	9302      	strls	r3, [sp, #8]
 8007fb4:	680b      	ldr	r3, [r1, #0]
 8007fb6:	4680      	mov	r8, r0
 8007fb8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007fbc:	f84b 3b1c 	str.w	r3, [fp], #28
 8007fc0:	460c      	mov	r4, r1
 8007fc2:	465e      	mov	r6, fp
 8007fc4:	46aa      	mov	sl, r5
 8007fc6:	46a9      	mov	r9, r5
 8007fc8:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007fcc:	9501      	str	r5, [sp, #4]
 8007fce:	68a2      	ldr	r2, [r4, #8]
 8007fd0:	b152      	cbz	r2, 8007fe8 <_scanf_float+0x64>
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	781b      	ldrb	r3, [r3, #0]
 8007fd6:	2b4e      	cmp	r3, #78	; 0x4e
 8007fd8:	d864      	bhi.n	80080a4 <_scanf_float+0x120>
 8007fda:	2b40      	cmp	r3, #64	; 0x40
 8007fdc:	d83c      	bhi.n	8008058 <_scanf_float+0xd4>
 8007fde:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007fe2:	b2c8      	uxtb	r0, r1
 8007fe4:	280e      	cmp	r0, #14
 8007fe6:	d93a      	bls.n	800805e <_scanf_float+0xda>
 8007fe8:	f1b9 0f00 	cmp.w	r9, #0
 8007fec:	d003      	beq.n	8007ff6 <_scanf_float+0x72>
 8007fee:	6823      	ldr	r3, [r4, #0]
 8007ff0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ff4:	6023      	str	r3, [r4, #0]
 8007ff6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007ffa:	f1ba 0f01 	cmp.w	sl, #1
 8007ffe:	f200 8113 	bhi.w	8008228 <_scanf_float+0x2a4>
 8008002:	455e      	cmp	r6, fp
 8008004:	f200 8105 	bhi.w	8008212 <_scanf_float+0x28e>
 8008008:	2501      	movs	r5, #1
 800800a:	4628      	mov	r0, r5
 800800c:	b007      	add	sp, #28
 800800e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008012:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008016:	2a0d      	cmp	r2, #13
 8008018:	d8e6      	bhi.n	8007fe8 <_scanf_float+0x64>
 800801a:	a101      	add	r1, pc, #4	; (adr r1, 8008020 <_scanf_float+0x9c>)
 800801c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008020:	0800815f 	.word	0x0800815f
 8008024:	08007fe9 	.word	0x08007fe9
 8008028:	08007fe9 	.word	0x08007fe9
 800802c:	08007fe9 	.word	0x08007fe9
 8008030:	080081bf 	.word	0x080081bf
 8008034:	08008197 	.word	0x08008197
 8008038:	08007fe9 	.word	0x08007fe9
 800803c:	08007fe9 	.word	0x08007fe9
 8008040:	0800816d 	.word	0x0800816d
 8008044:	08007fe9 	.word	0x08007fe9
 8008048:	08007fe9 	.word	0x08007fe9
 800804c:	08007fe9 	.word	0x08007fe9
 8008050:	08007fe9 	.word	0x08007fe9
 8008054:	08008125 	.word	0x08008125
 8008058:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800805c:	e7db      	b.n	8008016 <_scanf_float+0x92>
 800805e:	290e      	cmp	r1, #14
 8008060:	d8c2      	bhi.n	8007fe8 <_scanf_float+0x64>
 8008062:	a001      	add	r0, pc, #4	; (adr r0, 8008068 <_scanf_float+0xe4>)
 8008064:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008068:	08008117 	.word	0x08008117
 800806c:	08007fe9 	.word	0x08007fe9
 8008070:	08008117 	.word	0x08008117
 8008074:	080081ab 	.word	0x080081ab
 8008078:	08007fe9 	.word	0x08007fe9
 800807c:	080080c5 	.word	0x080080c5
 8008080:	08008101 	.word	0x08008101
 8008084:	08008101 	.word	0x08008101
 8008088:	08008101 	.word	0x08008101
 800808c:	08008101 	.word	0x08008101
 8008090:	08008101 	.word	0x08008101
 8008094:	08008101 	.word	0x08008101
 8008098:	08008101 	.word	0x08008101
 800809c:	08008101 	.word	0x08008101
 80080a0:	08008101 	.word	0x08008101
 80080a4:	2b6e      	cmp	r3, #110	; 0x6e
 80080a6:	d809      	bhi.n	80080bc <_scanf_float+0x138>
 80080a8:	2b60      	cmp	r3, #96	; 0x60
 80080aa:	d8b2      	bhi.n	8008012 <_scanf_float+0x8e>
 80080ac:	2b54      	cmp	r3, #84	; 0x54
 80080ae:	d077      	beq.n	80081a0 <_scanf_float+0x21c>
 80080b0:	2b59      	cmp	r3, #89	; 0x59
 80080b2:	d199      	bne.n	8007fe8 <_scanf_float+0x64>
 80080b4:	2d07      	cmp	r5, #7
 80080b6:	d197      	bne.n	8007fe8 <_scanf_float+0x64>
 80080b8:	2508      	movs	r5, #8
 80080ba:	e029      	b.n	8008110 <_scanf_float+0x18c>
 80080bc:	2b74      	cmp	r3, #116	; 0x74
 80080be:	d06f      	beq.n	80081a0 <_scanf_float+0x21c>
 80080c0:	2b79      	cmp	r3, #121	; 0x79
 80080c2:	e7f6      	b.n	80080b2 <_scanf_float+0x12e>
 80080c4:	6821      	ldr	r1, [r4, #0]
 80080c6:	05c8      	lsls	r0, r1, #23
 80080c8:	d51a      	bpl.n	8008100 <_scanf_float+0x17c>
 80080ca:	9b02      	ldr	r3, [sp, #8]
 80080cc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80080d0:	6021      	str	r1, [r4, #0]
 80080d2:	f109 0901 	add.w	r9, r9, #1
 80080d6:	b11b      	cbz	r3, 80080e0 <_scanf_float+0x15c>
 80080d8:	3b01      	subs	r3, #1
 80080da:	3201      	adds	r2, #1
 80080dc:	9302      	str	r3, [sp, #8]
 80080de:	60a2      	str	r2, [r4, #8]
 80080e0:	68a3      	ldr	r3, [r4, #8]
 80080e2:	3b01      	subs	r3, #1
 80080e4:	60a3      	str	r3, [r4, #8]
 80080e6:	6923      	ldr	r3, [r4, #16]
 80080e8:	3301      	adds	r3, #1
 80080ea:	6123      	str	r3, [r4, #16]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	3b01      	subs	r3, #1
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	607b      	str	r3, [r7, #4]
 80080f4:	f340 8084 	ble.w	8008200 <_scanf_float+0x27c>
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	3301      	adds	r3, #1
 80080fc:	603b      	str	r3, [r7, #0]
 80080fe:	e766      	b.n	8007fce <_scanf_float+0x4a>
 8008100:	eb1a 0f05 	cmn.w	sl, r5
 8008104:	f47f af70 	bne.w	8007fe8 <_scanf_float+0x64>
 8008108:	6822      	ldr	r2, [r4, #0]
 800810a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800810e:	6022      	str	r2, [r4, #0]
 8008110:	f806 3b01 	strb.w	r3, [r6], #1
 8008114:	e7e4      	b.n	80080e0 <_scanf_float+0x15c>
 8008116:	6822      	ldr	r2, [r4, #0]
 8008118:	0610      	lsls	r0, r2, #24
 800811a:	f57f af65 	bpl.w	8007fe8 <_scanf_float+0x64>
 800811e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008122:	e7f4      	b.n	800810e <_scanf_float+0x18a>
 8008124:	f1ba 0f00 	cmp.w	sl, #0
 8008128:	d10e      	bne.n	8008148 <_scanf_float+0x1c4>
 800812a:	f1b9 0f00 	cmp.w	r9, #0
 800812e:	d10e      	bne.n	800814e <_scanf_float+0x1ca>
 8008130:	6822      	ldr	r2, [r4, #0]
 8008132:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008136:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800813a:	d108      	bne.n	800814e <_scanf_float+0x1ca>
 800813c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008140:	f04f 0a01 	mov.w	sl, #1
 8008144:	6022      	str	r2, [r4, #0]
 8008146:	e7e3      	b.n	8008110 <_scanf_float+0x18c>
 8008148:	f1ba 0f02 	cmp.w	sl, #2
 800814c:	d055      	beq.n	80081fa <_scanf_float+0x276>
 800814e:	2d01      	cmp	r5, #1
 8008150:	d002      	beq.n	8008158 <_scanf_float+0x1d4>
 8008152:	2d04      	cmp	r5, #4
 8008154:	f47f af48 	bne.w	8007fe8 <_scanf_float+0x64>
 8008158:	3501      	adds	r5, #1
 800815a:	b2ed      	uxtb	r5, r5
 800815c:	e7d8      	b.n	8008110 <_scanf_float+0x18c>
 800815e:	f1ba 0f01 	cmp.w	sl, #1
 8008162:	f47f af41 	bne.w	8007fe8 <_scanf_float+0x64>
 8008166:	f04f 0a02 	mov.w	sl, #2
 800816a:	e7d1      	b.n	8008110 <_scanf_float+0x18c>
 800816c:	b97d      	cbnz	r5, 800818e <_scanf_float+0x20a>
 800816e:	f1b9 0f00 	cmp.w	r9, #0
 8008172:	f47f af3c 	bne.w	8007fee <_scanf_float+0x6a>
 8008176:	6822      	ldr	r2, [r4, #0]
 8008178:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800817c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008180:	f47f af39 	bne.w	8007ff6 <_scanf_float+0x72>
 8008184:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008188:	2501      	movs	r5, #1
 800818a:	6022      	str	r2, [r4, #0]
 800818c:	e7c0      	b.n	8008110 <_scanf_float+0x18c>
 800818e:	2d03      	cmp	r5, #3
 8008190:	d0e2      	beq.n	8008158 <_scanf_float+0x1d4>
 8008192:	2d05      	cmp	r5, #5
 8008194:	e7de      	b.n	8008154 <_scanf_float+0x1d0>
 8008196:	2d02      	cmp	r5, #2
 8008198:	f47f af26 	bne.w	8007fe8 <_scanf_float+0x64>
 800819c:	2503      	movs	r5, #3
 800819e:	e7b7      	b.n	8008110 <_scanf_float+0x18c>
 80081a0:	2d06      	cmp	r5, #6
 80081a2:	f47f af21 	bne.w	8007fe8 <_scanf_float+0x64>
 80081a6:	2507      	movs	r5, #7
 80081a8:	e7b2      	b.n	8008110 <_scanf_float+0x18c>
 80081aa:	6822      	ldr	r2, [r4, #0]
 80081ac:	0591      	lsls	r1, r2, #22
 80081ae:	f57f af1b 	bpl.w	8007fe8 <_scanf_float+0x64>
 80081b2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80081b6:	6022      	str	r2, [r4, #0]
 80081b8:	f8cd 9004 	str.w	r9, [sp, #4]
 80081bc:	e7a8      	b.n	8008110 <_scanf_float+0x18c>
 80081be:	6822      	ldr	r2, [r4, #0]
 80081c0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80081c4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80081c8:	d006      	beq.n	80081d8 <_scanf_float+0x254>
 80081ca:	0550      	lsls	r0, r2, #21
 80081cc:	f57f af0c 	bpl.w	8007fe8 <_scanf_float+0x64>
 80081d0:	f1b9 0f00 	cmp.w	r9, #0
 80081d4:	f43f af0f 	beq.w	8007ff6 <_scanf_float+0x72>
 80081d8:	0591      	lsls	r1, r2, #22
 80081da:	bf58      	it	pl
 80081dc:	9901      	ldrpl	r1, [sp, #4]
 80081de:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80081e2:	bf58      	it	pl
 80081e4:	eba9 0101 	subpl.w	r1, r9, r1
 80081e8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80081ec:	f04f 0900 	mov.w	r9, #0
 80081f0:	bf58      	it	pl
 80081f2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80081f6:	6022      	str	r2, [r4, #0]
 80081f8:	e78a      	b.n	8008110 <_scanf_float+0x18c>
 80081fa:	f04f 0a03 	mov.w	sl, #3
 80081fe:	e787      	b.n	8008110 <_scanf_float+0x18c>
 8008200:	4639      	mov	r1, r7
 8008202:	4640      	mov	r0, r8
 8008204:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008208:	4798      	blx	r3
 800820a:	2800      	cmp	r0, #0
 800820c:	f43f aedf 	beq.w	8007fce <_scanf_float+0x4a>
 8008210:	e6ea      	b.n	8007fe8 <_scanf_float+0x64>
 8008212:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008216:	463a      	mov	r2, r7
 8008218:	4640      	mov	r0, r8
 800821a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800821e:	4798      	blx	r3
 8008220:	6923      	ldr	r3, [r4, #16]
 8008222:	3b01      	subs	r3, #1
 8008224:	6123      	str	r3, [r4, #16]
 8008226:	e6ec      	b.n	8008002 <_scanf_float+0x7e>
 8008228:	1e6b      	subs	r3, r5, #1
 800822a:	2b06      	cmp	r3, #6
 800822c:	d825      	bhi.n	800827a <_scanf_float+0x2f6>
 800822e:	2d02      	cmp	r5, #2
 8008230:	d836      	bhi.n	80082a0 <_scanf_float+0x31c>
 8008232:	455e      	cmp	r6, fp
 8008234:	f67f aee8 	bls.w	8008008 <_scanf_float+0x84>
 8008238:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800823c:	463a      	mov	r2, r7
 800823e:	4640      	mov	r0, r8
 8008240:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008244:	4798      	blx	r3
 8008246:	6923      	ldr	r3, [r4, #16]
 8008248:	3b01      	subs	r3, #1
 800824a:	6123      	str	r3, [r4, #16]
 800824c:	e7f1      	b.n	8008232 <_scanf_float+0x2ae>
 800824e:	9802      	ldr	r0, [sp, #8]
 8008250:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008254:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008258:	463a      	mov	r2, r7
 800825a:	9002      	str	r0, [sp, #8]
 800825c:	4640      	mov	r0, r8
 800825e:	4798      	blx	r3
 8008260:	6923      	ldr	r3, [r4, #16]
 8008262:	3b01      	subs	r3, #1
 8008264:	6123      	str	r3, [r4, #16]
 8008266:	f10a 3aff 	add.w	sl, sl, #4294967295
 800826a:	fa5f fa8a 	uxtb.w	sl, sl
 800826e:	f1ba 0f02 	cmp.w	sl, #2
 8008272:	d1ec      	bne.n	800824e <_scanf_float+0x2ca>
 8008274:	3d03      	subs	r5, #3
 8008276:	b2ed      	uxtb	r5, r5
 8008278:	1b76      	subs	r6, r6, r5
 800827a:	6823      	ldr	r3, [r4, #0]
 800827c:	05da      	lsls	r2, r3, #23
 800827e:	d52f      	bpl.n	80082e0 <_scanf_float+0x35c>
 8008280:	055b      	lsls	r3, r3, #21
 8008282:	d510      	bpl.n	80082a6 <_scanf_float+0x322>
 8008284:	455e      	cmp	r6, fp
 8008286:	f67f aebf 	bls.w	8008008 <_scanf_float+0x84>
 800828a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800828e:	463a      	mov	r2, r7
 8008290:	4640      	mov	r0, r8
 8008292:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008296:	4798      	blx	r3
 8008298:	6923      	ldr	r3, [r4, #16]
 800829a:	3b01      	subs	r3, #1
 800829c:	6123      	str	r3, [r4, #16]
 800829e:	e7f1      	b.n	8008284 <_scanf_float+0x300>
 80082a0:	46aa      	mov	sl, r5
 80082a2:	9602      	str	r6, [sp, #8]
 80082a4:	e7df      	b.n	8008266 <_scanf_float+0x2e2>
 80082a6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80082aa:	6923      	ldr	r3, [r4, #16]
 80082ac:	2965      	cmp	r1, #101	; 0x65
 80082ae:	f103 33ff 	add.w	r3, r3, #4294967295
 80082b2:	f106 35ff 	add.w	r5, r6, #4294967295
 80082b6:	6123      	str	r3, [r4, #16]
 80082b8:	d00c      	beq.n	80082d4 <_scanf_float+0x350>
 80082ba:	2945      	cmp	r1, #69	; 0x45
 80082bc:	d00a      	beq.n	80082d4 <_scanf_float+0x350>
 80082be:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80082c2:	463a      	mov	r2, r7
 80082c4:	4640      	mov	r0, r8
 80082c6:	4798      	blx	r3
 80082c8:	6923      	ldr	r3, [r4, #16]
 80082ca:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80082ce:	3b01      	subs	r3, #1
 80082d0:	1eb5      	subs	r5, r6, #2
 80082d2:	6123      	str	r3, [r4, #16]
 80082d4:	463a      	mov	r2, r7
 80082d6:	4640      	mov	r0, r8
 80082d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80082dc:	4798      	blx	r3
 80082de:	462e      	mov	r6, r5
 80082e0:	6825      	ldr	r5, [r4, #0]
 80082e2:	f015 0510 	ands.w	r5, r5, #16
 80082e6:	d155      	bne.n	8008394 <_scanf_float+0x410>
 80082e8:	7035      	strb	r5, [r6, #0]
 80082ea:	6823      	ldr	r3, [r4, #0]
 80082ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80082f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082f4:	d11d      	bne.n	8008332 <_scanf_float+0x3ae>
 80082f6:	9b01      	ldr	r3, [sp, #4]
 80082f8:	454b      	cmp	r3, r9
 80082fa:	eba3 0209 	sub.w	r2, r3, r9
 80082fe:	d125      	bne.n	800834c <_scanf_float+0x3c8>
 8008300:	2200      	movs	r2, #0
 8008302:	4659      	mov	r1, fp
 8008304:	4640      	mov	r0, r8
 8008306:	f7ff f943 	bl	8007590 <_strtod_r>
 800830a:	9b03      	ldr	r3, [sp, #12]
 800830c:	f8d4 c000 	ldr.w	ip, [r4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f01c 0f02 	tst.w	ip, #2
 8008316:	4606      	mov	r6, r0
 8008318:	460f      	mov	r7, r1
 800831a:	f103 0204 	add.w	r2, r3, #4
 800831e:	d020      	beq.n	8008362 <_scanf_float+0x3de>
 8008320:	9903      	ldr	r1, [sp, #12]
 8008322:	600a      	str	r2, [r1, #0]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	e9c3 6700 	strd	r6, r7, [r3]
 800832a:	68e3      	ldr	r3, [r4, #12]
 800832c:	3301      	adds	r3, #1
 800832e:	60e3      	str	r3, [r4, #12]
 8008330:	e66b      	b.n	800800a <_scanf_float+0x86>
 8008332:	9b04      	ldr	r3, [sp, #16]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d0e3      	beq.n	8008300 <_scanf_float+0x37c>
 8008338:	9905      	ldr	r1, [sp, #20]
 800833a:	230a      	movs	r3, #10
 800833c:	462a      	mov	r2, r5
 800833e:	4640      	mov	r0, r8
 8008340:	3101      	adds	r1, #1
 8008342:	f7ff f9b5 	bl	80076b0 <_strtol_r>
 8008346:	9b04      	ldr	r3, [sp, #16]
 8008348:	9e05      	ldr	r6, [sp, #20]
 800834a:	1ac2      	subs	r2, r0, r3
 800834c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008350:	429e      	cmp	r6, r3
 8008352:	bf28      	it	cs
 8008354:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008358:	4630      	mov	r0, r6
 800835a:	490f      	ldr	r1, [pc, #60]	; (8008398 <_scanf_float+0x414>)
 800835c:	f000 f8e2 	bl	8008524 <siprintf>
 8008360:	e7ce      	b.n	8008300 <_scanf_float+0x37c>
 8008362:	f01c 0f04 	tst.w	ip, #4
 8008366:	d1db      	bne.n	8008320 <_scanf_float+0x39c>
 8008368:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800836c:	f8cc 2000 	str.w	r2, [ip]
 8008370:	f8d3 8000 	ldr.w	r8, [r3]
 8008374:	4602      	mov	r2, r0
 8008376:	460b      	mov	r3, r1
 8008378:	f7f8 fb48 	bl	8000a0c <__aeabi_dcmpun>
 800837c:	b128      	cbz	r0, 800838a <_scanf_float+0x406>
 800837e:	4807      	ldr	r0, [pc, #28]	; (800839c <_scanf_float+0x418>)
 8008380:	f000 fa66 	bl	8008850 <nanf>
 8008384:	f8c8 0000 	str.w	r0, [r8]
 8008388:	e7cf      	b.n	800832a <_scanf_float+0x3a6>
 800838a:	4630      	mov	r0, r6
 800838c:	4639      	mov	r1, r7
 800838e:	f7f8 fb9b 	bl	8000ac8 <__aeabi_d2f>
 8008392:	e7f7      	b.n	8008384 <_scanf_float+0x400>
 8008394:	2500      	movs	r5, #0
 8008396:	e638      	b.n	800800a <_scanf_float+0x86>
 8008398:	0800d31d 	.word	0x0800d31d
 800839c:	0800d3d6 	.word	0x0800d3d6

080083a0 <std>:
 80083a0:	2300      	movs	r3, #0
 80083a2:	b510      	push	{r4, lr}
 80083a4:	4604      	mov	r4, r0
 80083a6:	e9c0 3300 	strd	r3, r3, [r0]
 80083aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80083ae:	6083      	str	r3, [r0, #8]
 80083b0:	8181      	strh	r1, [r0, #12]
 80083b2:	6643      	str	r3, [r0, #100]	; 0x64
 80083b4:	81c2      	strh	r2, [r0, #14]
 80083b6:	6183      	str	r3, [r0, #24]
 80083b8:	4619      	mov	r1, r3
 80083ba:	2208      	movs	r2, #8
 80083bc:	305c      	adds	r0, #92	; 0x5c
 80083be:	f000 f914 	bl	80085ea <memset>
 80083c2:	4b0d      	ldr	r3, [pc, #52]	; (80083f8 <std+0x58>)
 80083c4:	6224      	str	r4, [r4, #32]
 80083c6:	6263      	str	r3, [r4, #36]	; 0x24
 80083c8:	4b0c      	ldr	r3, [pc, #48]	; (80083fc <std+0x5c>)
 80083ca:	62a3      	str	r3, [r4, #40]	; 0x28
 80083cc:	4b0c      	ldr	r3, [pc, #48]	; (8008400 <std+0x60>)
 80083ce:	62e3      	str	r3, [r4, #44]	; 0x2c
 80083d0:	4b0c      	ldr	r3, [pc, #48]	; (8008404 <std+0x64>)
 80083d2:	6323      	str	r3, [r4, #48]	; 0x30
 80083d4:	4b0c      	ldr	r3, [pc, #48]	; (8008408 <std+0x68>)
 80083d6:	429c      	cmp	r4, r3
 80083d8:	d006      	beq.n	80083e8 <std+0x48>
 80083da:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80083de:	4294      	cmp	r4, r2
 80083e0:	d002      	beq.n	80083e8 <std+0x48>
 80083e2:	33d0      	adds	r3, #208	; 0xd0
 80083e4:	429c      	cmp	r4, r3
 80083e6:	d105      	bne.n	80083f4 <std+0x54>
 80083e8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80083ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083f0:	f000 ba08 	b.w	8008804 <__retarget_lock_init_recursive>
 80083f4:	bd10      	pop	{r4, pc}
 80083f6:	bf00      	nop
 80083f8:	08008565 	.word	0x08008565
 80083fc:	08008587 	.word	0x08008587
 8008400:	080085bf 	.word	0x080085bf
 8008404:	080085e3 	.word	0x080085e3
 8008408:	200008c8 	.word	0x200008c8

0800840c <stdio_exit_handler>:
 800840c:	4a02      	ldr	r2, [pc, #8]	; (8008418 <stdio_exit_handler+0xc>)
 800840e:	4903      	ldr	r1, [pc, #12]	; (800841c <stdio_exit_handler+0x10>)
 8008410:	4803      	ldr	r0, [pc, #12]	; (8008420 <stdio_exit_handler+0x14>)
 8008412:	f000 b869 	b.w	80084e8 <_fwalk_sglue>
 8008416:	bf00      	nop
 8008418:	20000058 	.word	0x20000058
 800841c:	0800ab49 	.word	0x0800ab49
 8008420:	200001d0 	.word	0x200001d0

08008424 <cleanup_stdio>:
 8008424:	6841      	ldr	r1, [r0, #4]
 8008426:	4b0c      	ldr	r3, [pc, #48]	; (8008458 <cleanup_stdio+0x34>)
 8008428:	b510      	push	{r4, lr}
 800842a:	4299      	cmp	r1, r3
 800842c:	4604      	mov	r4, r0
 800842e:	d001      	beq.n	8008434 <cleanup_stdio+0x10>
 8008430:	f002 fb8a 	bl	800ab48 <_fflush_r>
 8008434:	68a1      	ldr	r1, [r4, #8]
 8008436:	4b09      	ldr	r3, [pc, #36]	; (800845c <cleanup_stdio+0x38>)
 8008438:	4299      	cmp	r1, r3
 800843a:	d002      	beq.n	8008442 <cleanup_stdio+0x1e>
 800843c:	4620      	mov	r0, r4
 800843e:	f002 fb83 	bl	800ab48 <_fflush_r>
 8008442:	68e1      	ldr	r1, [r4, #12]
 8008444:	4b06      	ldr	r3, [pc, #24]	; (8008460 <cleanup_stdio+0x3c>)
 8008446:	4299      	cmp	r1, r3
 8008448:	d004      	beq.n	8008454 <cleanup_stdio+0x30>
 800844a:	4620      	mov	r0, r4
 800844c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008450:	f002 bb7a 	b.w	800ab48 <_fflush_r>
 8008454:	bd10      	pop	{r4, pc}
 8008456:	bf00      	nop
 8008458:	200008c8 	.word	0x200008c8
 800845c:	20000930 	.word	0x20000930
 8008460:	20000998 	.word	0x20000998

08008464 <global_stdio_init.part.0>:
 8008464:	b510      	push	{r4, lr}
 8008466:	4b0b      	ldr	r3, [pc, #44]	; (8008494 <global_stdio_init.part.0+0x30>)
 8008468:	4c0b      	ldr	r4, [pc, #44]	; (8008498 <global_stdio_init.part.0+0x34>)
 800846a:	4a0c      	ldr	r2, [pc, #48]	; (800849c <global_stdio_init.part.0+0x38>)
 800846c:	4620      	mov	r0, r4
 800846e:	601a      	str	r2, [r3, #0]
 8008470:	2104      	movs	r1, #4
 8008472:	2200      	movs	r2, #0
 8008474:	f7ff ff94 	bl	80083a0 <std>
 8008478:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800847c:	2201      	movs	r2, #1
 800847e:	2109      	movs	r1, #9
 8008480:	f7ff ff8e 	bl	80083a0 <std>
 8008484:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008488:	2202      	movs	r2, #2
 800848a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800848e:	2112      	movs	r1, #18
 8008490:	f7ff bf86 	b.w	80083a0 <std>
 8008494:	20000a00 	.word	0x20000a00
 8008498:	200008c8 	.word	0x200008c8
 800849c:	0800840d 	.word	0x0800840d

080084a0 <__sfp_lock_acquire>:
 80084a0:	4801      	ldr	r0, [pc, #4]	; (80084a8 <__sfp_lock_acquire+0x8>)
 80084a2:	f000 b9b0 	b.w	8008806 <__retarget_lock_acquire_recursive>
 80084a6:	bf00      	nop
 80084a8:	20000a09 	.word	0x20000a09

080084ac <__sfp_lock_release>:
 80084ac:	4801      	ldr	r0, [pc, #4]	; (80084b4 <__sfp_lock_release+0x8>)
 80084ae:	f000 b9ab 	b.w	8008808 <__retarget_lock_release_recursive>
 80084b2:	bf00      	nop
 80084b4:	20000a09 	.word	0x20000a09

080084b8 <__sinit>:
 80084b8:	b510      	push	{r4, lr}
 80084ba:	4604      	mov	r4, r0
 80084bc:	f7ff fff0 	bl	80084a0 <__sfp_lock_acquire>
 80084c0:	6a23      	ldr	r3, [r4, #32]
 80084c2:	b11b      	cbz	r3, 80084cc <__sinit+0x14>
 80084c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084c8:	f7ff bff0 	b.w	80084ac <__sfp_lock_release>
 80084cc:	4b04      	ldr	r3, [pc, #16]	; (80084e0 <__sinit+0x28>)
 80084ce:	6223      	str	r3, [r4, #32]
 80084d0:	4b04      	ldr	r3, [pc, #16]	; (80084e4 <__sinit+0x2c>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d1f5      	bne.n	80084c4 <__sinit+0xc>
 80084d8:	f7ff ffc4 	bl	8008464 <global_stdio_init.part.0>
 80084dc:	e7f2      	b.n	80084c4 <__sinit+0xc>
 80084de:	bf00      	nop
 80084e0:	08008425 	.word	0x08008425
 80084e4:	20000a00 	.word	0x20000a00

080084e8 <_fwalk_sglue>:
 80084e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084ec:	4607      	mov	r7, r0
 80084ee:	4688      	mov	r8, r1
 80084f0:	4614      	mov	r4, r2
 80084f2:	2600      	movs	r6, #0
 80084f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80084f8:	f1b9 0901 	subs.w	r9, r9, #1
 80084fc:	d505      	bpl.n	800850a <_fwalk_sglue+0x22>
 80084fe:	6824      	ldr	r4, [r4, #0]
 8008500:	2c00      	cmp	r4, #0
 8008502:	d1f7      	bne.n	80084f4 <_fwalk_sglue+0xc>
 8008504:	4630      	mov	r0, r6
 8008506:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800850a:	89ab      	ldrh	r3, [r5, #12]
 800850c:	2b01      	cmp	r3, #1
 800850e:	d907      	bls.n	8008520 <_fwalk_sglue+0x38>
 8008510:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008514:	3301      	adds	r3, #1
 8008516:	d003      	beq.n	8008520 <_fwalk_sglue+0x38>
 8008518:	4629      	mov	r1, r5
 800851a:	4638      	mov	r0, r7
 800851c:	47c0      	blx	r8
 800851e:	4306      	orrs	r6, r0
 8008520:	3568      	adds	r5, #104	; 0x68
 8008522:	e7e9      	b.n	80084f8 <_fwalk_sglue+0x10>

08008524 <siprintf>:
 8008524:	b40e      	push	{r1, r2, r3}
 8008526:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800852a:	b500      	push	{lr}
 800852c:	b09c      	sub	sp, #112	; 0x70
 800852e:	ab1d      	add	r3, sp, #116	; 0x74
 8008530:	9002      	str	r0, [sp, #8]
 8008532:	9006      	str	r0, [sp, #24]
 8008534:	9107      	str	r1, [sp, #28]
 8008536:	9104      	str	r1, [sp, #16]
 8008538:	4808      	ldr	r0, [pc, #32]	; (800855c <siprintf+0x38>)
 800853a:	4909      	ldr	r1, [pc, #36]	; (8008560 <siprintf+0x3c>)
 800853c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008540:	9105      	str	r1, [sp, #20]
 8008542:	6800      	ldr	r0, [r0, #0]
 8008544:	a902      	add	r1, sp, #8
 8008546:	9301      	str	r3, [sp, #4]
 8008548:	f002 f97e 	bl	800a848 <_svfiprintf_r>
 800854c:	2200      	movs	r2, #0
 800854e:	9b02      	ldr	r3, [sp, #8]
 8008550:	701a      	strb	r2, [r3, #0]
 8008552:	b01c      	add	sp, #112	; 0x70
 8008554:	f85d eb04 	ldr.w	lr, [sp], #4
 8008558:	b003      	add	sp, #12
 800855a:	4770      	bx	lr
 800855c:	2000021c 	.word	0x2000021c
 8008560:	ffff0208 	.word	0xffff0208

08008564 <__sread>:
 8008564:	b510      	push	{r4, lr}
 8008566:	460c      	mov	r4, r1
 8008568:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800856c:	f000 f8fc 	bl	8008768 <_read_r>
 8008570:	2800      	cmp	r0, #0
 8008572:	bfab      	itete	ge
 8008574:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008576:	89a3      	ldrhlt	r3, [r4, #12]
 8008578:	181b      	addge	r3, r3, r0
 800857a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800857e:	bfac      	ite	ge
 8008580:	6563      	strge	r3, [r4, #84]	; 0x54
 8008582:	81a3      	strhlt	r3, [r4, #12]
 8008584:	bd10      	pop	{r4, pc}

08008586 <__swrite>:
 8008586:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800858a:	461f      	mov	r7, r3
 800858c:	898b      	ldrh	r3, [r1, #12]
 800858e:	4605      	mov	r5, r0
 8008590:	05db      	lsls	r3, r3, #23
 8008592:	460c      	mov	r4, r1
 8008594:	4616      	mov	r6, r2
 8008596:	d505      	bpl.n	80085a4 <__swrite+0x1e>
 8008598:	2302      	movs	r3, #2
 800859a:	2200      	movs	r2, #0
 800859c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085a0:	f000 f8d0 	bl	8008744 <_lseek_r>
 80085a4:	89a3      	ldrh	r3, [r4, #12]
 80085a6:	4632      	mov	r2, r6
 80085a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80085ac:	81a3      	strh	r3, [r4, #12]
 80085ae:	4628      	mov	r0, r5
 80085b0:	463b      	mov	r3, r7
 80085b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80085b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80085ba:	f000 b8e7 	b.w	800878c <_write_r>

080085be <__sseek>:
 80085be:	b510      	push	{r4, lr}
 80085c0:	460c      	mov	r4, r1
 80085c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085c6:	f000 f8bd 	bl	8008744 <_lseek_r>
 80085ca:	1c43      	adds	r3, r0, #1
 80085cc:	89a3      	ldrh	r3, [r4, #12]
 80085ce:	bf15      	itete	ne
 80085d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80085d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80085d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80085da:	81a3      	strheq	r3, [r4, #12]
 80085dc:	bf18      	it	ne
 80085de:	81a3      	strhne	r3, [r4, #12]
 80085e0:	bd10      	pop	{r4, pc}

080085e2 <__sclose>:
 80085e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085e6:	f000 b89d 	b.w	8008724 <_close_r>

080085ea <memset>:
 80085ea:	4603      	mov	r3, r0
 80085ec:	4402      	add	r2, r0
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d100      	bne.n	80085f4 <memset+0xa>
 80085f2:	4770      	bx	lr
 80085f4:	f803 1b01 	strb.w	r1, [r3], #1
 80085f8:	e7f9      	b.n	80085ee <memset+0x4>

080085fa <strchr>:
 80085fa:	4603      	mov	r3, r0
 80085fc:	b2c9      	uxtb	r1, r1
 80085fe:	4618      	mov	r0, r3
 8008600:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008604:	b112      	cbz	r2, 800860c <strchr+0x12>
 8008606:	428a      	cmp	r2, r1
 8008608:	d1f9      	bne.n	80085fe <strchr+0x4>
 800860a:	4770      	bx	lr
 800860c:	2900      	cmp	r1, #0
 800860e:	bf18      	it	ne
 8008610:	2000      	movne	r0, #0
 8008612:	4770      	bx	lr

08008614 <strncmp>:
 8008614:	b510      	push	{r4, lr}
 8008616:	b16a      	cbz	r2, 8008634 <strncmp+0x20>
 8008618:	3901      	subs	r1, #1
 800861a:	1884      	adds	r4, r0, r2
 800861c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008620:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008624:	429a      	cmp	r2, r3
 8008626:	d103      	bne.n	8008630 <strncmp+0x1c>
 8008628:	42a0      	cmp	r0, r4
 800862a:	d001      	beq.n	8008630 <strncmp+0x1c>
 800862c:	2a00      	cmp	r2, #0
 800862e:	d1f5      	bne.n	800861c <strncmp+0x8>
 8008630:	1ad0      	subs	r0, r2, r3
 8008632:	bd10      	pop	{r4, pc}
 8008634:	4610      	mov	r0, r2
 8008636:	e7fc      	b.n	8008632 <strncmp+0x1e>

08008638 <strtok>:
 8008638:	4b16      	ldr	r3, [pc, #88]	; (8008694 <strtok+0x5c>)
 800863a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800863e:	681f      	ldr	r7, [r3, #0]
 8008640:	4605      	mov	r5, r0
 8008642:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8008644:	460e      	mov	r6, r1
 8008646:	b9ec      	cbnz	r4, 8008684 <strtok+0x4c>
 8008648:	2050      	movs	r0, #80	; 0x50
 800864a:	f001 fb33 	bl	8009cb4 <malloc>
 800864e:	4602      	mov	r2, r0
 8008650:	6478      	str	r0, [r7, #68]	; 0x44
 8008652:	b920      	cbnz	r0, 800865e <strtok+0x26>
 8008654:	215b      	movs	r1, #91	; 0x5b
 8008656:	4b10      	ldr	r3, [pc, #64]	; (8008698 <strtok+0x60>)
 8008658:	4810      	ldr	r0, [pc, #64]	; (800869c <strtok+0x64>)
 800865a:	f000 f8fd 	bl	8008858 <__assert_func>
 800865e:	e9c0 4400 	strd	r4, r4, [r0]
 8008662:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8008666:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800866a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800866e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8008672:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8008676:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800867a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800867e:	6184      	str	r4, [r0, #24]
 8008680:	7704      	strb	r4, [r0, #28]
 8008682:	6244      	str	r4, [r0, #36]	; 0x24
 8008684:	4631      	mov	r1, r6
 8008686:	4628      	mov	r0, r5
 8008688:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800868a:	2301      	movs	r3, #1
 800868c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008690:	f000 b806 	b.w	80086a0 <__strtok_r>
 8008694:	2000021c 	.word	0x2000021c
 8008698:	0800d322 	.word	0x0800d322
 800869c:	0800d339 	.word	0x0800d339

080086a0 <__strtok_r>:
 80086a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086a2:	b908      	cbnz	r0, 80086a8 <__strtok_r+0x8>
 80086a4:	6810      	ldr	r0, [r2, #0]
 80086a6:	b188      	cbz	r0, 80086cc <__strtok_r+0x2c>
 80086a8:	4604      	mov	r4, r0
 80086aa:	460f      	mov	r7, r1
 80086ac:	4620      	mov	r0, r4
 80086ae:	f814 5b01 	ldrb.w	r5, [r4], #1
 80086b2:	f817 6b01 	ldrb.w	r6, [r7], #1
 80086b6:	b91e      	cbnz	r6, 80086c0 <__strtok_r+0x20>
 80086b8:	b965      	cbnz	r5, 80086d4 <__strtok_r+0x34>
 80086ba:	4628      	mov	r0, r5
 80086bc:	6015      	str	r5, [r2, #0]
 80086be:	e005      	b.n	80086cc <__strtok_r+0x2c>
 80086c0:	42b5      	cmp	r5, r6
 80086c2:	d1f6      	bne.n	80086b2 <__strtok_r+0x12>
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d1f0      	bne.n	80086aa <__strtok_r+0xa>
 80086c8:	6014      	str	r4, [r2, #0]
 80086ca:	7003      	strb	r3, [r0, #0]
 80086cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086ce:	461c      	mov	r4, r3
 80086d0:	e00c      	b.n	80086ec <__strtok_r+0x4c>
 80086d2:	b915      	cbnz	r5, 80086da <__strtok_r+0x3a>
 80086d4:	460e      	mov	r6, r1
 80086d6:	f814 3b01 	ldrb.w	r3, [r4], #1
 80086da:	f816 5b01 	ldrb.w	r5, [r6], #1
 80086de:	42ab      	cmp	r3, r5
 80086e0:	d1f7      	bne.n	80086d2 <__strtok_r+0x32>
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d0f3      	beq.n	80086ce <__strtok_r+0x2e>
 80086e6:	2300      	movs	r3, #0
 80086e8:	f804 3c01 	strb.w	r3, [r4, #-1]
 80086ec:	6014      	str	r4, [r2, #0]
 80086ee:	e7ed      	b.n	80086cc <__strtok_r+0x2c>

080086f0 <strstr>:
 80086f0:	780a      	ldrb	r2, [r1, #0]
 80086f2:	b570      	push	{r4, r5, r6, lr}
 80086f4:	b96a      	cbnz	r2, 8008712 <strstr+0x22>
 80086f6:	bd70      	pop	{r4, r5, r6, pc}
 80086f8:	429a      	cmp	r2, r3
 80086fa:	d109      	bne.n	8008710 <strstr+0x20>
 80086fc:	460c      	mov	r4, r1
 80086fe:	4605      	mov	r5, r0
 8008700:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8008704:	2b00      	cmp	r3, #0
 8008706:	d0f6      	beq.n	80086f6 <strstr+0x6>
 8008708:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800870c:	429e      	cmp	r6, r3
 800870e:	d0f7      	beq.n	8008700 <strstr+0x10>
 8008710:	3001      	adds	r0, #1
 8008712:	7803      	ldrb	r3, [r0, #0]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d1ef      	bne.n	80086f8 <strstr+0x8>
 8008718:	4618      	mov	r0, r3
 800871a:	e7ec      	b.n	80086f6 <strstr+0x6>

0800871c <_localeconv_r>:
 800871c:	4800      	ldr	r0, [pc, #0]	; (8008720 <_localeconv_r+0x4>)
 800871e:	4770      	bx	lr
 8008720:	20000154 	.word	0x20000154

08008724 <_close_r>:
 8008724:	b538      	push	{r3, r4, r5, lr}
 8008726:	2300      	movs	r3, #0
 8008728:	4d05      	ldr	r5, [pc, #20]	; (8008740 <_close_r+0x1c>)
 800872a:	4604      	mov	r4, r0
 800872c:	4608      	mov	r0, r1
 800872e:	602b      	str	r3, [r5, #0]
 8008730:	f7fa fac8 	bl	8002cc4 <_close>
 8008734:	1c43      	adds	r3, r0, #1
 8008736:	d102      	bne.n	800873e <_close_r+0x1a>
 8008738:	682b      	ldr	r3, [r5, #0]
 800873a:	b103      	cbz	r3, 800873e <_close_r+0x1a>
 800873c:	6023      	str	r3, [r4, #0]
 800873e:	bd38      	pop	{r3, r4, r5, pc}
 8008740:	20000a04 	.word	0x20000a04

08008744 <_lseek_r>:
 8008744:	b538      	push	{r3, r4, r5, lr}
 8008746:	4604      	mov	r4, r0
 8008748:	4608      	mov	r0, r1
 800874a:	4611      	mov	r1, r2
 800874c:	2200      	movs	r2, #0
 800874e:	4d05      	ldr	r5, [pc, #20]	; (8008764 <_lseek_r+0x20>)
 8008750:	602a      	str	r2, [r5, #0]
 8008752:	461a      	mov	r2, r3
 8008754:	f7fa fada 	bl	8002d0c <_lseek>
 8008758:	1c43      	adds	r3, r0, #1
 800875a:	d102      	bne.n	8008762 <_lseek_r+0x1e>
 800875c:	682b      	ldr	r3, [r5, #0]
 800875e:	b103      	cbz	r3, 8008762 <_lseek_r+0x1e>
 8008760:	6023      	str	r3, [r4, #0]
 8008762:	bd38      	pop	{r3, r4, r5, pc}
 8008764:	20000a04 	.word	0x20000a04

08008768 <_read_r>:
 8008768:	b538      	push	{r3, r4, r5, lr}
 800876a:	4604      	mov	r4, r0
 800876c:	4608      	mov	r0, r1
 800876e:	4611      	mov	r1, r2
 8008770:	2200      	movs	r2, #0
 8008772:	4d05      	ldr	r5, [pc, #20]	; (8008788 <_read_r+0x20>)
 8008774:	602a      	str	r2, [r5, #0]
 8008776:	461a      	mov	r2, r3
 8008778:	f7fa fa6b 	bl	8002c52 <_read>
 800877c:	1c43      	adds	r3, r0, #1
 800877e:	d102      	bne.n	8008786 <_read_r+0x1e>
 8008780:	682b      	ldr	r3, [r5, #0]
 8008782:	b103      	cbz	r3, 8008786 <_read_r+0x1e>
 8008784:	6023      	str	r3, [r4, #0]
 8008786:	bd38      	pop	{r3, r4, r5, pc}
 8008788:	20000a04 	.word	0x20000a04

0800878c <_write_r>:
 800878c:	b538      	push	{r3, r4, r5, lr}
 800878e:	4604      	mov	r4, r0
 8008790:	4608      	mov	r0, r1
 8008792:	4611      	mov	r1, r2
 8008794:	2200      	movs	r2, #0
 8008796:	4d05      	ldr	r5, [pc, #20]	; (80087ac <_write_r+0x20>)
 8008798:	602a      	str	r2, [r5, #0]
 800879a:	461a      	mov	r2, r3
 800879c:	f7fa fa76 	bl	8002c8c <_write>
 80087a0:	1c43      	adds	r3, r0, #1
 80087a2:	d102      	bne.n	80087aa <_write_r+0x1e>
 80087a4:	682b      	ldr	r3, [r5, #0]
 80087a6:	b103      	cbz	r3, 80087aa <_write_r+0x1e>
 80087a8:	6023      	str	r3, [r4, #0]
 80087aa:	bd38      	pop	{r3, r4, r5, pc}
 80087ac:	20000a04 	.word	0x20000a04

080087b0 <__errno>:
 80087b0:	4b01      	ldr	r3, [pc, #4]	; (80087b8 <__errno+0x8>)
 80087b2:	6818      	ldr	r0, [r3, #0]
 80087b4:	4770      	bx	lr
 80087b6:	bf00      	nop
 80087b8:	2000021c 	.word	0x2000021c

080087bc <__libc_init_array>:
 80087bc:	b570      	push	{r4, r5, r6, lr}
 80087be:	2600      	movs	r6, #0
 80087c0:	4d0c      	ldr	r5, [pc, #48]	; (80087f4 <__libc_init_array+0x38>)
 80087c2:	4c0d      	ldr	r4, [pc, #52]	; (80087f8 <__libc_init_array+0x3c>)
 80087c4:	1b64      	subs	r4, r4, r5
 80087c6:	10a4      	asrs	r4, r4, #2
 80087c8:	42a6      	cmp	r6, r4
 80087ca:	d109      	bne.n	80087e0 <__libc_init_array+0x24>
 80087cc:	f002 fd12 	bl	800b1f4 <_init>
 80087d0:	2600      	movs	r6, #0
 80087d2:	4d0a      	ldr	r5, [pc, #40]	; (80087fc <__libc_init_array+0x40>)
 80087d4:	4c0a      	ldr	r4, [pc, #40]	; (8008800 <__libc_init_array+0x44>)
 80087d6:	1b64      	subs	r4, r4, r5
 80087d8:	10a4      	asrs	r4, r4, #2
 80087da:	42a6      	cmp	r6, r4
 80087dc:	d105      	bne.n	80087ea <__libc_init_array+0x2e>
 80087de:	bd70      	pop	{r4, r5, r6, pc}
 80087e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80087e4:	4798      	blx	r3
 80087e6:	3601      	adds	r6, #1
 80087e8:	e7ee      	b.n	80087c8 <__libc_init_array+0xc>
 80087ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80087ee:	4798      	blx	r3
 80087f0:	3601      	adds	r6, #1
 80087f2:	e7f2      	b.n	80087da <__libc_init_array+0x1e>
 80087f4:	0800d618 	.word	0x0800d618
 80087f8:	0800d618 	.word	0x0800d618
 80087fc:	0800d618 	.word	0x0800d618
 8008800:	0800d61c 	.word	0x0800d61c

08008804 <__retarget_lock_init_recursive>:
 8008804:	4770      	bx	lr

08008806 <__retarget_lock_acquire_recursive>:
 8008806:	4770      	bx	lr

08008808 <__retarget_lock_release_recursive>:
 8008808:	4770      	bx	lr

0800880a <memchr>:
 800880a:	4603      	mov	r3, r0
 800880c:	b510      	push	{r4, lr}
 800880e:	b2c9      	uxtb	r1, r1
 8008810:	4402      	add	r2, r0
 8008812:	4293      	cmp	r3, r2
 8008814:	4618      	mov	r0, r3
 8008816:	d101      	bne.n	800881c <memchr+0x12>
 8008818:	2000      	movs	r0, #0
 800881a:	e003      	b.n	8008824 <memchr+0x1a>
 800881c:	7804      	ldrb	r4, [r0, #0]
 800881e:	3301      	adds	r3, #1
 8008820:	428c      	cmp	r4, r1
 8008822:	d1f6      	bne.n	8008812 <memchr+0x8>
 8008824:	bd10      	pop	{r4, pc}

08008826 <memcpy>:
 8008826:	440a      	add	r2, r1
 8008828:	4291      	cmp	r1, r2
 800882a:	f100 33ff 	add.w	r3, r0, #4294967295
 800882e:	d100      	bne.n	8008832 <memcpy+0xc>
 8008830:	4770      	bx	lr
 8008832:	b510      	push	{r4, lr}
 8008834:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008838:	4291      	cmp	r1, r2
 800883a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800883e:	d1f9      	bne.n	8008834 <memcpy+0xe>
 8008840:	bd10      	pop	{r4, pc}
	...

08008844 <nan>:
 8008844:	2000      	movs	r0, #0
 8008846:	4901      	ldr	r1, [pc, #4]	; (800884c <nan+0x8>)
 8008848:	4770      	bx	lr
 800884a:	bf00      	nop
 800884c:	7ff80000 	.word	0x7ff80000

08008850 <nanf>:
 8008850:	4800      	ldr	r0, [pc, #0]	; (8008854 <nanf+0x4>)
 8008852:	4770      	bx	lr
 8008854:	7fc00000 	.word	0x7fc00000

08008858 <__assert_func>:
 8008858:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800885a:	4614      	mov	r4, r2
 800885c:	461a      	mov	r2, r3
 800885e:	4b09      	ldr	r3, [pc, #36]	; (8008884 <__assert_func+0x2c>)
 8008860:	4605      	mov	r5, r0
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	68d8      	ldr	r0, [r3, #12]
 8008866:	b14c      	cbz	r4, 800887c <__assert_func+0x24>
 8008868:	4b07      	ldr	r3, [pc, #28]	; (8008888 <__assert_func+0x30>)
 800886a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800886e:	9100      	str	r1, [sp, #0]
 8008870:	462b      	mov	r3, r5
 8008872:	4906      	ldr	r1, [pc, #24]	; (800888c <__assert_func+0x34>)
 8008874:	f002 f990 	bl	800ab98 <fiprintf>
 8008878:	f002 f9ca 	bl	800ac10 <abort>
 800887c:	4b04      	ldr	r3, [pc, #16]	; (8008890 <__assert_func+0x38>)
 800887e:	461c      	mov	r4, r3
 8008880:	e7f3      	b.n	800886a <__assert_func+0x12>
 8008882:	bf00      	nop
 8008884:	2000021c 	.word	0x2000021c
 8008888:	0800d39b 	.word	0x0800d39b
 800888c:	0800d3a8 	.word	0x0800d3a8
 8008890:	0800d3d6 	.word	0x0800d3d6

08008894 <quorem>:
 8008894:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008898:	6903      	ldr	r3, [r0, #16]
 800889a:	690c      	ldr	r4, [r1, #16]
 800889c:	4607      	mov	r7, r0
 800889e:	42a3      	cmp	r3, r4
 80088a0:	db7f      	blt.n	80089a2 <quorem+0x10e>
 80088a2:	3c01      	subs	r4, #1
 80088a4:	f100 0514 	add.w	r5, r0, #20
 80088a8:	f101 0814 	add.w	r8, r1, #20
 80088ac:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80088b0:	9301      	str	r3, [sp, #4]
 80088b2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80088b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80088ba:	3301      	adds	r3, #1
 80088bc:	429a      	cmp	r2, r3
 80088be:	fbb2 f6f3 	udiv	r6, r2, r3
 80088c2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80088c6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80088ca:	d331      	bcc.n	8008930 <quorem+0x9c>
 80088cc:	f04f 0e00 	mov.w	lr, #0
 80088d0:	4640      	mov	r0, r8
 80088d2:	46ac      	mov	ip, r5
 80088d4:	46f2      	mov	sl, lr
 80088d6:	f850 2b04 	ldr.w	r2, [r0], #4
 80088da:	b293      	uxth	r3, r2
 80088dc:	fb06 e303 	mla	r3, r6, r3, lr
 80088e0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80088e4:	0c1a      	lsrs	r2, r3, #16
 80088e6:	b29b      	uxth	r3, r3
 80088e8:	fb06 220e 	mla	r2, r6, lr, r2
 80088ec:	ebaa 0303 	sub.w	r3, sl, r3
 80088f0:	f8dc a000 	ldr.w	sl, [ip]
 80088f4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80088f8:	fa1f fa8a 	uxth.w	sl, sl
 80088fc:	4453      	add	r3, sl
 80088fe:	f8dc a000 	ldr.w	sl, [ip]
 8008902:	b292      	uxth	r2, r2
 8008904:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008908:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800890c:	b29b      	uxth	r3, r3
 800890e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008912:	4581      	cmp	r9, r0
 8008914:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008918:	f84c 3b04 	str.w	r3, [ip], #4
 800891c:	d2db      	bcs.n	80088d6 <quorem+0x42>
 800891e:	f855 300b 	ldr.w	r3, [r5, fp]
 8008922:	b92b      	cbnz	r3, 8008930 <quorem+0x9c>
 8008924:	9b01      	ldr	r3, [sp, #4]
 8008926:	3b04      	subs	r3, #4
 8008928:	429d      	cmp	r5, r3
 800892a:	461a      	mov	r2, r3
 800892c:	d32d      	bcc.n	800898a <quorem+0xf6>
 800892e:	613c      	str	r4, [r7, #16]
 8008930:	4638      	mov	r0, r7
 8008932:	f001 fd49 	bl	800a3c8 <__mcmp>
 8008936:	2800      	cmp	r0, #0
 8008938:	db23      	blt.n	8008982 <quorem+0xee>
 800893a:	4629      	mov	r1, r5
 800893c:	2000      	movs	r0, #0
 800893e:	3601      	adds	r6, #1
 8008940:	f858 2b04 	ldr.w	r2, [r8], #4
 8008944:	f8d1 c000 	ldr.w	ip, [r1]
 8008948:	b293      	uxth	r3, r2
 800894a:	1ac3      	subs	r3, r0, r3
 800894c:	0c12      	lsrs	r2, r2, #16
 800894e:	fa1f f08c 	uxth.w	r0, ip
 8008952:	4403      	add	r3, r0
 8008954:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008958:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800895c:	b29b      	uxth	r3, r3
 800895e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008962:	45c1      	cmp	r9, r8
 8008964:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008968:	f841 3b04 	str.w	r3, [r1], #4
 800896c:	d2e8      	bcs.n	8008940 <quorem+0xac>
 800896e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008972:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008976:	b922      	cbnz	r2, 8008982 <quorem+0xee>
 8008978:	3b04      	subs	r3, #4
 800897a:	429d      	cmp	r5, r3
 800897c:	461a      	mov	r2, r3
 800897e:	d30a      	bcc.n	8008996 <quorem+0x102>
 8008980:	613c      	str	r4, [r7, #16]
 8008982:	4630      	mov	r0, r6
 8008984:	b003      	add	sp, #12
 8008986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800898a:	6812      	ldr	r2, [r2, #0]
 800898c:	3b04      	subs	r3, #4
 800898e:	2a00      	cmp	r2, #0
 8008990:	d1cd      	bne.n	800892e <quorem+0x9a>
 8008992:	3c01      	subs	r4, #1
 8008994:	e7c8      	b.n	8008928 <quorem+0x94>
 8008996:	6812      	ldr	r2, [r2, #0]
 8008998:	3b04      	subs	r3, #4
 800899a:	2a00      	cmp	r2, #0
 800899c:	d1f0      	bne.n	8008980 <quorem+0xec>
 800899e:	3c01      	subs	r4, #1
 80089a0:	e7eb      	b.n	800897a <quorem+0xe6>
 80089a2:	2000      	movs	r0, #0
 80089a4:	e7ee      	b.n	8008984 <quorem+0xf0>
	...

080089a8 <_dtoa_r>:
 80089a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089ac:	4616      	mov	r6, r2
 80089ae:	461f      	mov	r7, r3
 80089b0:	69c4      	ldr	r4, [r0, #28]
 80089b2:	b099      	sub	sp, #100	; 0x64
 80089b4:	4605      	mov	r5, r0
 80089b6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80089ba:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80089be:	b974      	cbnz	r4, 80089de <_dtoa_r+0x36>
 80089c0:	2010      	movs	r0, #16
 80089c2:	f001 f977 	bl	8009cb4 <malloc>
 80089c6:	4602      	mov	r2, r0
 80089c8:	61e8      	str	r0, [r5, #28]
 80089ca:	b920      	cbnz	r0, 80089d6 <_dtoa_r+0x2e>
 80089cc:	21ef      	movs	r1, #239	; 0xef
 80089ce:	4bac      	ldr	r3, [pc, #688]	; (8008c80 <_dtoa_r+0x2d8>)
 80089d0:	48ac      	ldr	r0, [pc, #688]	; (8008c84 <_dtoa_r+0x2dc>)
 80089d2:	f7ff ff41 	bl	8008858 <__assert_func>
 80089d6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80089da:	6004      	str	r4, [r0, #0]
 80089dc:	60c4      	str	r4, [r0, #12]
 80089de:	69eb      	ldr	r3, [r5, #28]
 80089e0:	6819      	ldr	r1, [r3, #0]
 80089e2:	b151      	cbz	r1, 80089fa <_dtoa_r+0x52>
 80089e4:	685a      	ldr	r2, [r3, #4]
 80089e6:	2301      	movs	r3, #1
 80089e8:	4093      	lsls	r3, r2
 80089ea:	604a      	str	r2, [r1, #4]
 80089ec:	608b      	str	r3, [r1, #8]
 80089ee:	4628      	mov	r0, r5
 80089f0:	f001 fa66 	bl	8009ec0 <_Bfree>
 80089f4:	2200      	movs	r2, #0
 80089f6:	69eb      	ldr	r3, [r5, #28]
 80089f8:	601a      	str	r2, [r3, #0]
 80089fa:	1e3b      	subs	r3, r7, #0
 80089fc:	bfaf      	iteee	ge
 80089fe:	2300      	movge	r3, #0
 8008a00:	2201      	movlt	r2, #1
 8008a02:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008a06:	9305      	strlt	r3, [sp, #20]
 8008a08:	bfa8      	it	ge
 8008a0a:	f8c8 3000 	strge.w	r3, [r8]
 8008a0e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8008a12:	4b9d      	ldr	r3, [pc, #628]	; (8008c88 <_dtoa_r+0x2e0>)
 8008a14:	bfb8      	it	lt
 8008a16:	f8c8 2000 	strlt.w	r2, [r8]
 8008a1a:	ea33 0309 	bics.w	r3, r3, r9
 8008a1e:	d119      	bne.n	8008a54 <_dtoa_r+0xac>
 8008a20:	f242 730f 	movw	r3, #9999	; 0x270f
 8008a24:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008a26:	6013      	str	r3, [r2, #0]
 8008a28:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008a2c:	4333      	orrs	r3, r6
 8008a2e:	f000 8589 	beq.w	8009544 <_dtoa_r+0xb9c>
 8008a32:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008a34:	b953      	cbnz	r3, 8008a4c <_dtoa_r+0xa4>
 8008a36:	4b95      	ldr	r3, [pc, #596]	; (8008c8c <_dtoa_r+0x2e4>)
 8008a38:	e023      	b.n	8008a82 <_dtoa_r+0xda>
 8008a3a:	4b95      	ldr	r3, [pc, #596]	; (8008c90 <_dtoa_r+0x2e8>)
 8008a3c:	9303      	str	r3, [sp, #12]
 8008a3e:	3308      	adds	r3, #8
 8008a40:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008a42:	6013      	str	r3, [r2, #0]
 8008a44:	9803      	ldr	r0, [sp, #12]
 8008a46:	b019      	add	sp, #100	; 0x64
 8008a48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a4c:	4b8f      	ldr	r3, [pc, #572]	; (8008c8c <_dtoa_r+0x2e4>)
 8008a4e:	9303      	str	r3, [sp, #12]
 8008a50:	3303      	adds	r3, #3
 8008a52:	e7f5      	b.n	8008a40 <_dtoa_r+0x98>
 8008a54:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008a58:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8008a5c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008a60:	2200      	movs	r2, #0
 8008a62:	2300      	movs	r3, #0
 8008a64:	f7f7 ffa0 	bl	80009a8 <__aeabi_dcmpeq>
 8008a68:	4680      	mov	r8, r0
 8008a6a:	b160      	cbz	r0, 8008a86 <_dtoa_r+0xde>
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008a70:	6013      	str	r3, [r2, #0]
 8008a72:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	f000 8562 	beq.w	800953e <_dtoa_r+0xb96>
 8008a7a:	4b86      	ldr	r3, [pc, #536]	; (8008c94 <_dtoa_r+0x2ec>)
 8008a7c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008a7e:	6013      	str	r3, [r2, #0]
 8008a80:	3b01      	subs	r3, #1
 8008a82:	9303      	str	r3, [sp, #12]
 8008a84:	e7de      	b.n	8008a44 <_dtoa_r+0x9c>
 8008a86:	ab16      	add	r3, sp, #88	; 0x58
 8008a88:	9301      	str	r3, [sp, #4]
 8008a8a:	ab17      	add	r3, sp, #92	; 0x5c
 8008a8c:	9300      	str	r3, [sp, #0]
 8008a8e:	4628      	mov	r0, r5
 8008a90:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008a94:	f001 fda8 	bl	800a5e8 <__d2b>
 8008a98:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008a9c:	4682      	mov	sl, r0
 8008a9e:	2c00      	cmp	r4, #0
 8008aa0:	d07e      	beq.n	8008ba0 <_dtoa_r+0x1f8>
 8008aa2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008aa6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008aa8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8008aac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ab0:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008ab4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008ab8:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8008abc:	4619      	mov	r1, r3
 8008abe:	2200      	movs	r2, #0
 8008ac0:	4b75      	ldr	r3, [pc, #468]	; (8008c98 <_dtoa_r+0x2f0>)
 8008ac2:	f7f7 fb51 	bl	8000168 <__aeabi_dsub>
 8008ac6:	a368      	add	r3, pc, #416	; (adr r3, 8008c68 <_dtoa_r+0x2c0>)
 8008ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008acc:	f7f7 fd04 	bl	80004d8 <__aeabi_dmul>
 8008ad0:	a367      	add	r3, pc, #412	; (adr r3, 8008c70 <_dtoa_r+0x2c8>)
 8008ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad6:	f7f7 fb49 	bl	800016c <__adddf3>
 8008ada:	4606      	mov	r6, r0
 8008adc:	4620      	mov	r0, r4
 8008ade:	460f      	mov	r7, r1
 8008ae0:	f7f7 fc90 	bl	8000404 <__aeabi_i2d>
 8008ae4:	a364      	add	r3, pc, #400	; (adr r3, 8008c78 <_dtoa_r+0x2d0>)
 8008ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aea:	f7f7 fcf5 	bl	80004d8 <__aeabi_dmul>
 8008aee:	4602      	mov	r2, r0
 8008af0:	460b      	mov	r3, r1
 8008af2:	4630      	mov	r0, r6
 8008af4:	4639      	mov	r1, r7
 8008af6:	f7f7 fb39 	bl	800016c <__adddf3>
 8008afa:	4606      	mov	r6, r0
 8008afc:	460f      	mov	r7, r1
 8008afe:	f7f7 ff9b 	bl	8000a38 <__aeabi_d2iz>
 8008b02:	2200      	movs	r2, #0
 8008b04:	4683      	mov	fp, r0
 8008b06:	2300      	movs	r3, #0
 8008b08:	4630      	mov	r0, r6
 8008b0a:	4639      	mov	r1, r7
 8008b0c:	f7f7 ff56 	bl	80009bc <__aeabi_dcmplt>
 8008b10:	b148      	cbz	r0, 8008b26 <_dtoa_r+0x17e>
 8008b12:	4658      	mov	r0, fp
 8008b14:	f7f7 fc76 	bl	8000404 <__aeabi_i2d>
 8008b18:	4632      	mov	r2, r6
 8008b1a:	463b      	mov	r3, r7
 8008b1c:	f7f7 ff44 	bl	80009a8 <__aeabi_dcmpeq>
 8008b20:	b908      	cbnz	r0, 8008b26 <_dtoa_r+0x17e>
 8008b22:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008b26:	f1bb 0f16 	cmp.w	fp, #22
 8008b2a:	d857      	bhi.n	8008bdc <_dtoa_r+0x234>
 8008b2c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008b30:	4b5a      	ldr	r3, [pc, #360]	; (8008c9c <_dtoa_r+0x2f4>)
 8008b32:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b3a:	f7f7 ff3f 	bl	80009bc <__aeabi_dcmplt>
 8008b3e:	2800      	cmp	r0, #0
 8008b40:	d04e      	beq.n	8008be0 <_dtoa_r+0x238>
 8008b42:	2300      	movs	r3, #0
 8008b44:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008b48:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b4a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008b4c:	1b1b      	subs	r3, r3, r4
 8008b4e:	1e5a      	subs	r2, r3, #1
 8008b50:	bf46      	itte	mi
 8008b52:	f1c3 0901 	rsbmi	r9, r3, #1
 8008b56:	2300      	movmi	r3, #0
 8008b58:	f04f 0900 	movpl.w	r9, #0
 8008b5c:	9209      	str	r2, [sp, #36]	; 0x24
 8008b5e:	bf48      	it	mi
 8008b60:	9309      	strmi	r3, [sp, #36]	; 0x24
 8008b62:	f1bb 0f00 	cmp.w	fp, #0
 8008b66:	db3d      	blt.n	8008be4 <_dtoa_r+0x23c>
 8008b68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b6a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8008b6e:	445b      	add	r3, fp
 8008b70:	9309      	str	r3, [sp, #36]	; 0x24
 8008b72:	2300      	movs	r3, #0
 8008b74:	930a      	str	r3, [sp, #40]	; 0x28
 8008b76:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008b78:	2b09      	cmp	r3, #9
 8008b7a:	d867      	bhi.n	8008c4c <_dtoa_r+0x2a4>
 8008b7c:	2b05      	cmp	r3, #5
 8008b7e:	bfc4      	itt	gt
 8008b80:	3b04      	subgt	r3, #4
 8008b82:	9322      	strgt	r3, [sp, #136]	; 0x88
 8008b84:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008b86:	bfc8      	it	gt
 8008b88:	2400      	movgt	r4, #0
 8008b8a:	f1a3 0302 	sub.w	r3, r3, #2
 8008b8e:	bfd8      	it	le
 8008b90:	2401      	movle	r4, #1
 8008b92:	2b03      	cmp	r3, #3
 8008b94:	f200 8086 	bhi.w	8008ca4 <_dtoa_r+0x2fc>
 8008b98:	e8df f003 	tbb	[pc, r3]
 8008b9c:	5637392c 	.word	0x5637392c
 8008ba0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8008ba4:	441c      	add	r4, r3
 8008ba6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8008baa:	2b20      	cmp	r3, #32
 8008bac:	bfc1      	itttt	gt
 8008bae:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008bb2:	fa09 f903 	lslgt.w	r9, r9, r3
 8008bb6:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8008bba:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008bbe:	bfd6      	itet	le
 8008bc0:	f1c3 0320 	rsble	r3, r3, #32
 8008bc4:	ea49 0003 	orrgt.w	r0, r9, r3
 8008bc8:	fa06 f003 	lslle.w	r0, r6, r3
 8008bcc:	f7f7 fc0a 	bl	80003e4 <__aeabi_ui2d>
 8008bd0:	2201      	movs	r2, #1
 8008bd2:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008bd6:	3c01      	subs	r4, #1
 8008bd8:	9213      	str	r2, [sp, #76]	; 0x4c
 8008bda:	e76f      	b.n	8008abc <_dtoa_r+0x114>
 8008bdc:	2301      	movs	r3, #1
 8008bde:	e7b3      	b.n	8008b48 <_dtoa_r+0x1a0>
 8008be0:	900f      	str	r0, [sp, #60]	; 0x3c
 8008be2:	e7b2      	b.n	8008b4a <_dtoa_r+0x1a2>
 8008be4:	f1cb 0300 	rsb	r3, fp, #0
 8008be8:	930a      	str	r3, [sp, #40]	; 0x28
 8008bea:	2300      	movs	r3, #0
 8008bec:	eba9 090b 	sub.w	r9, r9, fp
 8008bf0:	930e      	str	r3, [sp, #56]	; 0x38
 8008bf2:	e7c0      	b.n	8008b76 <_dtoa_r+0x1ce>
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	930b      	str	r3, [sp, #44]	; 0x2c
 8008bf8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	dc55      	bgt.n	8008caa <_dtoa_r+0x302>
 8008bfe:	2301      	movs	r3, #1
 8008c00:	461a      	mov	r2, r3
 8008c02:	9306      	str	r3, [sp, #24]
 8008c04:	9308      	str	r3, [sp, #32]
 8008c06:	9223      	str	r2, [sp, #140]	; 0x8c
 8008c08:	e00b      	b.n	8008c22 <_dtoa_r+0x27a>
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	e7f3      	b.n	8008bf6 <_dtoa_r+0x24e>
 8008c0e:	2300      	movs	r3, #0
 8008c10:	930b      	str	r3, [sp, #44]	; 0x2c
 8008c12:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008c14:	445b      	add	r3, fp
 8008c16:	9306      	str	r3, [sp, #24]
 8008c18:	3301      	adds	r3, #1
 8008c1a:	2b01      	cmp	r3, #1
 8008c1c:	9308      	str	r3, [sp, #32]
 8008c1e:	bfb8      	it	lt
 8008c20:	2301      	movlt	r3, #1
 8008c22:	2100      	movs	r1, #0
 8008c24:	2204      	movs	r2, #4
 8008c26:	69e8      	ldr	r0, [r5, #28]
 8008c28:	f102 0614 	add.w	r6, r2, #20
 8008c2c:	429e      	cmp	r6, r3
 8008c2e:	d940      	bls.n	8008cb2 <_dtoa_r+0x30a>
 8008c30:	6041      	str	r1, [r0, #4]
 8008c32:	4628      	mov	r0, r5
 8008c34:	f001 f904 	bl	8009e40 <_Balloc>
 8008c38:	9003      	str	r0, [sp, #12]
 8008c3a:	2800      	cmp	r0, #0
 8008c3c:	d13c      	bne.n	8008cb8 <_dtoa_r+0x310>
 8008c3e:	4602      	mov	r2, r0
 8008c40:	f240 11af 	movw	r1, #431	; 0x1af
 8008c44:	4b16      	ldr	r3, [pc, #88]	; (8008ca0 <_dtoa_r+0x2f8>)
 8008c46:	e6c3      	b.n	80089d0 <_dtoa_r+0x28>
 8008c48:	2301      	movs	r3, #1
 8008c4a:	e7e1      	b.n	8008c10 <_dtoa_r+0x268>
 8008c4c:	2401      	movs	r4, #1
 8008c4e:	2300      	movs	r3, #0
 8008c50:	940b      	str	r4, [sp, #44]	; 0x2c
 8008c52:	9322      	str	r3, [sp, #136]	; 0x88
 8008c54:	f04f 33ff 	mov.w	r3, #4294967295
 8008c58:	2200      	movs	r2, #0
 8008c5a:	9306      	str	r3, [sp, #24]
 8008c5c:	9308      	str	r3, [sp, #32]
 8008c5e:	2312      	movs	r3, #18
 8008c60:	e7d1      	b.n	8008c06 <_dtoa_r+0x25e>
 8008c62:	bf00      	nop
 8008c64:	f3af 8000 	nop.w
 8008c68:	636f4361 	.word	0x636f4361
 8008c6c:	3fd287a7 	.word	0x3fd287a7
 8008c70:	8b60c8b3 	.word	0x8b60c8b3
 8008c74:	3fc68a28 	.word	0x3fc68a28
 8008c78:	509f79fb 	.word	0x509f79fb
 8008c7c:	3fd34413 	.word	0x3fd34413
 8008c80:	0800d322 	.word	0x0800d322
 8008c84:	0800d3e4 	.word	0x0800d3e4
 8008c88:	7ff00000 	.word	0x7ff00000
 8008c8c:	0800d3e0 	.word	0x0800d3e0
 8008c90:	0800d3d7 	.word	0x0800d3d7
 8008c94:	0800d2fa 	.word	0x0800d2fa
 8008c98:	3ff80000 	.word	0x3ff80000
 8008c9c:	0800d530 	.word	0x0800d530
 8008ca0:	0800d43c 	.word	0x0800d43c
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ca8:	e7d4      	b.n	8008c54 <_dtoa_r+0x2ac>
 8008caa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008cac:	9306      	str	r3, [sp, #24]
 8008cae:	9308      	str	r3, [sp, #32]
 8008cb0:	e7b7      	b.n	8008c22 <_dtoa_r+0x27a>
 8008cb2:	3101      	adds	r1, #1
 8008cb4:	0052      	lsls	r2, r2, #1
 8008cb6:	e7b7      	b.n	8008c28 <_dtoa_r+0x280>
 8008cb8:	69eb      	ldr	r3, [r5, #28]
 8008cba:	9a03      	ldr	r2, [sp, #12]
 8008cbc:	601a      	str	r2, [r3, #0]
 8008cbe:	9b08      	ldr	r3, [sp, #32]
 8008cc0:	2b0e      	cmp	r3, #14
 8008cc2:	f200 80a8 	bhi.w	8008e16 <_dtoa_r+0x46e>
 8008cc6:	2c00      	cmp	r4, #0
 8008cc8:	f000 80a5 	beq.w	8008e16 <_dtoa_r+0x46e>
 8008ccc:	f1bb 0f00 	cmp.w	fp, #0
 8008cd0:	dd34      	ble.n	8008d3c <_dtoa_r+0x394>
 8008cd2:	4b9a      	ldr	r3, [pc, #616]	; (8008f3c <_dtoa_r+0x594>)
 8008cd4:	f00b 020f 	and.w	r2, fp, #15
 8008cd8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008cdc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008ce0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008ce4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008ce8:	ea4f 142b 	mov.w	r4, fp, asr #4
 8008cec:	d016      	beq.n	8008d1c <_dtoa_r+0x374>
 8008cee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008cf2:	4b93      	ldr	r3, [pc, #588]	; (8008f40 <_dtoa_r+0x598>)
 8008cf4:	2703      	movs	r7, #3
 8008cf6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008cfa:	f7f7 fd17 	bl	800072c <__aeabi_ddiv>
 8008cfe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008d02:	f004 040f 	and.w	r4, r4, #15
 8008d06:	4e8e      	ldr	r6, [pc, #568]	; (8008f40 <_dtoa_r+0x598>)
 8008d08:	b954      	cbnz	r4, 8008d20 <_dtoa_r+0x378>
 8008d0a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008d0e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008d12:	f7f7 fd0b 	bl	800072c <__aeabi_ddiv>
 8008d16:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008d1a:	e029      	b.n	8008d70 <_dtoa_r+0x3c8>
 8008d1c:	2702      	movs	r7, #2
 8008d1e:	e7f2      	b.n	8008d06 <_dtoa_r+0x35e>
 8008d20:	07e1      	lsls	r1, r4, #31
 8008d22:	d508      	bpl.n	8008d36 <_dtoa_r+0x38e>
 8008d24:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008d28:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008d2c:	f7f7 fbd4 	bl	80004d8 <__aeabi_dmul>
 8008d30:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008d34:	3701      	adds	r7, #1
 8008d36:	1064      	asrs	r4, r4, #1
 8008d38:	3608      	adds	r6, #8
 8008d3a:	e7e5      	b.n	8008d08 <_dtoa_r+0x360>
 8008d3c:	f000 80a5 	beq.w	8008e8a <_dtoa_r+0x4e2>
 8008d40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008d44:	f1cb 0400 	rsb	r4, fp, #0
 8008d48:	4b7c      	ldr	r3, [pc, #496]	; (8008f3c <_dtoa_r+0x594>)
 8008d4a:	f004 020f 	and.w	r2, r4, #15
 8008d4e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d56:	f7f7 fbbf 	bl	80004d8 <__aeabi_dmul>
 8008d5a:	2702      	movs	r7, #2
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008d62:	4e77      	ldr	r6, [pc, #476]	; (8008f40 <_dtoa_r+0x598>)
 8008d64:	1124      	asrs	r4, r4, #4
 8008d66:	2c00      	cmp	r4, #0
 8008d68:	f040 8084 	bne.w	8008e74 <_dtoa_r+0x4cc>
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d1d2      	bne.n	8008d16 <_dtoa_r+0x36e>
 8008d70:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008d74:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008d78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	f000 8087 	beq.w	8008e8e <_dtoa_r+0x4e6>
 8008d80:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008d84:	2200      	movs	r2, #0
 8008d86:	4b6f      	ldr	r3, [pc, #444]	; (8008f44 <_dtoa_r+0x59c>)
 8008d88:	f7f7 fe18 	bl	80009bc <__aeabi_dcmplt>
 8008d8c:	2800      	cmp	r0, #0
 8008d8e:	d07e      	beq.n	8008e8e <_dtoa_r+0x4e6>
 8008d90:	9b08      	ldr	r3, [sp, #32]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d07b      	beq.n	8008e8e <_dtoa_r+0x4e6>
 8008d96:	9b06      	ldr	r3, [sp, #24]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	dd38      	ble.n	8008e0e <_dtoa_r+0x466>
 8008d9c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008da0:	2200      	movs	r2, #0
 8008da2:	4b69      	ldr	r3, [pc, #420]	; (8008f48 <_dtoa_r+0x5a0>)
 8008da4:	f7f7 fb98 	bl	80004d8 <__aeabi_dmul>
 8008da8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008dac:	9c06      	ldr	r4, [sp, #24]
 8008dae:	f10b 38ff 	add.w	r8, fp, #4294967295
 8008db2:	3701      	adds	r7, #1
 8008db4:	4638      	mov	r0, r7
 8008db6:	f7f7 fb25 	bl	8000404 <__aeabi_i2d>
 8008dba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008dbe:	f7f7 fb8b 	bl	80004d8 <__aeabi_dmul>
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	4b61      	ldr	r3, [pc, #388]	; (8008f4c <_dtoa_r+0x5a4>)
 8008dc6:	f7f7 f9d1 	bl	800016c <__adddf3>
 8008dca:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008dce:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008dd2:	9611      	str	r6, [sp, #68]	; 0x44
 8008dd4:	2c00      	cmp	r4, #0
 8008dd6:	d15d      	bne.n	8008e94 <_dtoa_r+0x4ec>
 8008dd8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008ddc:	2200      	movs	r2, #0
 8008dde:	4b5c      	ldr	r3, [pc, #368]	; (8008f50 <_dtoa_r+0x5a8>)
 8008de0:	f7f7 f9c2 	bl	8000168 <__aeabi_dsub>
 8008de4:	4602      	mov	r2, r0
 8008de6:	460b      	mov	r3, r1
 8008de8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008dec:	4633      	mov	r3, r6
 8008dee:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008df0:	f7f7 fe02 	bl	80009f8 <__aeabi_dcmpgt>
 8008df4:	2800      	cmp	r0, #0
 8008df6:	f040 8295 	bne.w	8009324 <_dtoa_r+0x97c>
 8008dfa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008dfe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008e00:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008e04:	f7f7 fdda 	bl	80009bc <__aeabi_dcmplt>
 8008e08:	2800      	cmp	r0, #0
 8008e0a:	f040 8289 	bne.w	8009320 <_dtoa_r+0x978>
 8008e0e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8008e12:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008e16:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	f2c0 8151 	blt.w	80090c0 <_dtoa_r+0x718>
 8008e1e:	f1bb 0f0e 	cmp.w	fp, #14
 8008e22:	f300 814d 	bgt.w	80090c0 <_dtoa_r+0x718>
 8008e26:	4b45      	ldr	r3, [pc, #276]	; (8008f3c <_dtoa_r+0x594>)
 8008e28:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008e2c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008e30:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8008e34:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	f280 80da 	bge.w	8008ff0 <_dtoa_r+0x648>
 8008e3c:	9b08      	ldr	r3, [sp, #32]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	f300 80d6 	bgt.w	8008ff0 <_dtoa_r+0x648>
 8008e44:	f040 826b 	bne.w	800931e <_dtoa_r+0x976>
 8008e48:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	4b40      	ldr	r3, [pc, #256]	; (8008f50 <_dtoa_r+0x5a8>)
 8008e50:	f7f7 fb42 	bl	80004d8 <__aeabi_dmul>
 8008e54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e58:	f7f7 fdc4 	bl	80009e4 <__aeabi_dcmpge>
 8008e5c:	9c08      	ldr	r4, [sp, #32]
 8008e5e:	4626      	mov	r6, r4
 8008e60:	2800      	cmp	r0, #0
 8008e62:	f040 8241 	bne.w	80092e8 <_dtoa_r+0x940>
 8008e66:	2331      	movs	r3, #49	; 0x31
 8008e68:	9f03      	ldr	r7, [sp, #12]
 8008e6a:	f10b 0b01 	add.w	fp, fp, #1
 8008e6e:	f807 3b01 	strb.w	r3, [r7], #1
 8008e72:	e23d      	b.n	80092f0 <_dtoa_r+0x948>
 8008e74:	07e2      	lsls	r2, r4, #31
 8008e76:	d505      	bpl.n	8008e84 <_dtoa_r+0x4dc>
 8008e78:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008e7c:	f7f7 fb2c 	bl	80004d8 <__aeabi_dmul>
 8008e80:	2301      	movs	r3, #1
 8008e82:	3701      	adds	r7, #1
 8008e84:	1064      	asrs	r4, r4, #1
 8008e86:	3608      	adds	r6, #8
 8008e88:	e76d      	b.n	8008d66 <_dtoa_r+0x3be>
 8008e8a:	2702      	movs	r7, #2
 8008e8c:	e770      	b.n	8008d70 <_dtoa_r+0x3c8>
 8008e8e:	46d8      	mov	r8, fp
 8008e90:	9c08      	ldr	r4, [sp, #32]
 8008e92:	e78f      	b.n	8008db4 <_dtoa_r+0x40c>
 8008e94:	9903      	ldr	r1, [sp, #12]
 8008e96:	4b29      	ldr	r3, [pc, #164]	; (8008f3c <_dtoa_r+0x594>)
 8008e98:	4421      	add	r1, r4
 8008e9a:	9112      	str	r1, [sp, #72]	; 0x48
 8008e9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008e9e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008ea2:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8008ea6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008eaa:	2900      	cmp	r1, #0
 8008eac:	d054      	beq.n	8008f58 <_dtoa_r+0x5b0>
 8008eae:	2000      	movs	r0, #0
 8008eb0:	4928      	ldr	r1, [pc, #160]	; (8008f54 <_dtoa_r+0x5ac>)
 8008eb2:	f7f7 fc3b 	bl	800072c <__aeabi_ddiv>
 8008eb6:	463b      	mov	r3, r7
 8008eb8:	4632      	mov	r2, r6
 8008eba:	f7f7 f955 	bl	8000168 <__aeabi_dsub>
 8008ebe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008ec2:	9f03      	ldr	r7, [sp, #12]
 8008ec4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008ec8:	f7f7 fdb6 	bl	8000a38 <__aeabi_d2iz>
 8008ecc:	4604      	mov	r4, r0
 8008ece:	f7f7 fa99 	bl	8000404 <__aeabi_i2d>
 8008ed2:	4602      	mov	r2, r0
 8008ed4:	460b      	mov	r3, r1
 8008ed6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008eda:	f7f7 f945 	bl	8000168 <__aeabi_dsub>
 8008ede:	4602      	mov	r2, r0
 8008ee0:	460b      	mov	r3, r1
 8008ee2:	3430      	adds	r4, #48	; 0x30
 8008ee4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008ee8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008eec:	f807 4b01 	strb.w	r4, [r7], #1
 8008ef0:	f7f7 fd64 	bl	80009bc <__aeabi_dcmplt>
 8008ef4:	2800      	cmp	r0, #0
 8008ef6:	d173      	bne.n	8008fe0 <_dtoa_r+0x638>
 8008ef8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008efc:	2000      	movs	r0, #0
 8008efe:	4911      	ldr	r1, [pc, #68]	; (8008f44 <_dtoa_r+0x59c>)
 8008f00:	f7f7 f932 	bl	8000168 <__aeabi_dsub>
 8008f04:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008f08:	f7f7 fd58 	bl	80009bc <__aeabi_dcmplt>
 8008f0c:	2800      	cmp	r0, #0
 8008f0e:	f040 80b6 	bne.w	800907e <_dtoa_r+0x6d6>
 8008f12:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008f14:	429f      	cmp	r7, r3
 8008f16:	f43f af7a 	beq.w	8008e0e <_dtoa_r+0x466>
 8008f1a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008f1e:	2200      	movs	r2, #0
 8008f20:	4b09      	ldr	r3, [pc, #36]	; (8008f48 <_dtoa_r+0x5a0>)
 8008f22:	f7f7 fad9 	bl	80004d8 <__aeabi_dmul>
 8008f26:	2200      	movs	r2, #0
 8008f28:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008f2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008f30:	4b05      	ldr	r3, [pc, #20]	; (8008f48 <_dtoa_r+0x5a0>)
 8008f32:	f7f7 fad1 	bl	80004d8 <__aeabi_dmul>
 8008f36:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008f3a:	e7c3      	b.n	8008ec4 <_dtoa_r+0x51c>
 8008f3c:	0800d530 	.word	0x0800d530
 8008f40:	0800d508 	.word	0x0800d508
 8008f44:	3ff00000 	.word	0x3ff00000
 8008f48:	40240000 	.word	0x40240000
 8008f4c:	401c0000 	.word	0x401c0000
 8008f50:	40140000 	.word	0x40140000
 8008f54:	3fe00000 	.word	0x3fe00000
 8008f58:	4630      	mov	r0, r6
 8008f5a:	4639      	mov	r1, r7
 8008f5c:	f7f7 fabc 	bl	80004d8 <__aeabi_dmul>
 8008f60:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008f62:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008f66:	9c03      	ldr	r4, [sp, #12]
 8008f68:	9314      	str	r3, [sp, #80]	; 0x50
 8008f6a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008f6e:	f7f7 fd63 	bl	8000a38 <__aeabi_d2iz>
 8008f72:	9015      	str	r0, [sp, #84]	; 0x54
 8008f74:	f7f7 fa46 	bl	8000404 <__aeabi_i2d>
 8008f78:	4602      	mov	r2, r0
 8008f7a:	460b      	mov	r3, r1
 8008f7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008f80:	f7f7 f8f2 	bl	8000168 <__aeabi_dsub>
 8008f84:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f86:	4606      	mov	r6, r0
 8008f88:	3330      	adds	r3, #48	; 0x30
 8008f8a:	f804 3b01 	strb.w	r3, [r4], #1
 8008f8e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008f90:	460f      	mov	r7, r1
 8008f92:	429c      	cmp	r4, r3
 8008f94:	f04f 0200 	mov.w	r2, #0
 8008f98:	d124      	bne.n	8008fe4 <_dtoa_r+0x63c>
 8008f9a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008f9e:	4baf      	ldr	r3, [pc, #700]	; (800925c <_dtoa_r+0x8b4>)
 8008fa0:	f7f7 f8e4 	bl	800016c <__adddf3>
 8008fa4:	4602      	mov	r2, r0
 8008fa6:	460b      	mov	r3, r1
 8008fa8:	4630      	mov	r0, r6
 8008faa:	4639      	mov	r1, r7
 8008fac:	f7f7 fd24 	bl	80009f8 <__aeabi_dcmpgt>
 8008fb0:	2800      	cmp	r0, #0
 8008fb2:	d163      	bne.n	800907c <_dtoa_r+0x6d4>
 8008fb4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008fb8:	2000      	movs	r0, #0
 8008fba:	49a8      	ldr	r1, [pc, #672]	; (800925c <_dtoa_r+0x8b4>)
 8008fbc:	f7f7 f8d4 	bl	8000168 <__aeabi_dsub>
 8008fc0:	4602      	mov	r2, r0
 8008fc2:	460b      	mov	r3, r1
 8008fc4:	4630      	mov	r0, r6
 8008fc6:	4639      	mov	r1, r7
 8008fc8:	f7f7 fcf8 	bl	80009bc <__aeabi_dcmplt>
 8008fcc:	2800      	cmp	r0, #0
 8008fce:	f43f af1e 	beq.w	8008e0e <_dtoa_r+0x466>
 8008fd2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008fd4:	1e7b      	subs	r3, r7, #1
 8008fd6:	9314      	str	r3, [sp, #80]	; 0x50
 8008fd8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8008fdc:	2b30      	cmp	r3, #48	; 0x30
 8008fde:	d0f8      	beq.n	8008fd2 <_dtoa_r+0x62a>
 8008fe0:	46c3      	mov	fp, r8
 8008fe2:	e03b      	b.n	800905c <_dtoa_r+0x6b4>
 8008fe4:	4b9e      	ldr	r3, [pc, #632]	; (8009260 <_dtoa_r+0x8b8>)
 8008fe6:	f7f7 fa77 	bl	80004d8 <__aeabi_dmul>
 8008fea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008fee:	e7bc      	b.n	8008f6a <_dtoa_r+0x5c2>
 8008ff0:	9f03      	ldr	r7, [sp, #12]
 8008ff2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008ff6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008ffa:	4640      	mov	r0, r8
 8008ffc:	4649      	mov	r1, r9
 8008ffe:	f7f7 fb95 	bl	800072c <__aeabi_ddiv>
 8009002:	f7f7 fd19 	bl	8000a38 <__aeabi_d2iz>
 8009006:	4604      	mov	r4, r0
 8009008:	f7f7 f9fc 	bl	8000404 <__aeabi_i2d>
 800900c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009010:	f7f7 fa62 	bl	80004d8 <__aeabi_dmul>
 8009014:	4602      	mov	r2, r0
 8009016:	460b      	mov	r3, r1
 8009018:	4640      	mov	r0, r8
 800901a:	4649      	mov	r1, r9
 800901c:	f7f7 f8a4 	bl	8000168 <__aeabi_dsub>
 8009020:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8009024:	f807 6b01 	strb.w	r6, [r7], #1
 8009028:	9e03      	ldr	r6, [sp, #12]
 800902a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800902e:	1bbe      	subs	r6, r7, r6
 8009030:	45b4      	cmp	ip, r6
 8009032:	4602      	mov	r2, r0
 8009034:	460b      	mov	r3, r1
 8009036:	d136      	bne.n	80090a6 <_dtoa_r+0x6fe>
 8009038:	f7f7 f898 	bl	800016c <__adddf3>
 800903c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009040:	4680      	mov	r8, r0
 8009042:	4689      	mov	r9, r1
 8009044:	f7f7 fcd8 	bl	80009f8 <__aeabi_dcmpgt>
 8009048:	bb58      	cbnz	r0, 80090a2 <_dtoa_r+0x6fa>
 800904a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800904e:	4640      	mov	r0, r8
 8009050:	4649      	mov	r1, r9
 8009052:	f7f7 fca9 	bl	80009a8 <__aeabi_dcmpeq>
 8009056:	b108      	cbz	r0, 800905c <_dtoa_r+0x6b4>
 8009058:	07e3      	lsls	r3, r4, #31
 800905a:	d422      	bmi.n	80090a2 <_dtoa_r+0x6fa>
 800905c:	4651      	mov	r1, sl
 800905e:	4628      	mov	r0, r5
 8009060:	f000 ff2e 	bl	8009ec0 <_Bfree>
 8009064:	2300      	movs	r3, #0
 8009066:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009068:	703b      	strb	r3, [r7, #0]
 800906a:	f10b 0301 	add.w	r3, fp, #1
 800906e:	6013      	str	r3, [r2, #0]
 8009070:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009072:	2b00      	cmp	r3, #0
 8009074:	f43f ace6 	beq.w	8008a44 <_dtoa_r+0x9c>
 8009078:	601f      	str	r7, [r3, #0]
 800907a:	e4e3      	b.n	8008a44 <_dtoa_r+0x9c>
 800907c:	4627      	mov	r7, r4
 800907e:	463b      	mov	r3, r7
 8009080:	461f      	mov	r7, r3
 8009082:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009086:	2a39      	cmp	r2, #57	; 0x39
 8009088:	d107      	bne.n	800909a <_dtoa_r+0x6f2>
 800908a:	9a03      	ldr	r2, [sp, #12]
 800908c:	429a      	cmp	r2, r3
 800908e:	d1f7      	bne.n	8009080 <_dtoa_r+0x6d8>
 8009090:	2230      	movs	r2, #48	; 0x30
 8009092:	9903      	ldr	r1, [sp, #12]
 8009094:	f108 0801 	add.w	r8, r8, #1
 8009098:	700a      	strb	r2, [r1, #0]
 800909a:	781a      	ldrb	r2, [r3, #0]
 800909c:	3201      	adds	r2, #1
 800909e:	701a      	strb	r2, [r3, #0]
 80090a0:	e79e      	b.n	8008fe0 <_dtoa_r+0x638>
 80090a2:	46d8      	mov	r8, fp
 80090a4:	e7eb      	b.n	800907e <_dtoa_r+0x6d6>
 80090a6:	2200      	movs	r2, #0
 80090a8:	4b6d      	ldr	r3, [pc, #436]	; (8009260 <_dtoa_r+0x8b8>)
 80090aa:	f7f7 fa15 	bl	80004d8 <__aeabi_dmul>
 80090ae:	2200      	movs	r2, #0
 80090b0:	2300      	movs	r3, #0
 80090b2:	4680      	mov	r8, r0
 80090b4:	4689      	mov	r9, r1
 80090b6:	f7f7 fc77 	bl	80009a8 <__aeabi_dcmpeq>
 80090ba:	2800      	cmp	r0, #0
 80090bc:	d09b      	beq.n	8008ff6 <_dtoa_r+0x64e>
 80090be:	e7cd      	b.n	800905c <_dtoa_r+0x6b4>
 80090c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80090c2:	2a00      	cmp	r2, #0
 80090c4:	f000 80c4 	beq.w	8009250 <_dtoa_r+0x8a8>
 80090c8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80090ca:	2a01      	cmp	r2, #1
 80090cc:	f300 80a8 	bgt.w	8009220 <_dtoa_r+0x878>
 80090d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80090d2:	2a00      	cmp	r2, #0
 80090d4:	f000 80a0 	beq.w	8009218 <_dtoa_r+0x870>
 80090d8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80090dc:	464f      	mov	r7, r9
 80090de:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80090e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090e2:	2101      	movs	r1, #1
 80090e4:	441a      	add	r2, r3
 80090e6:	4628      	mov	r0, r5
 80090e8:	4499      	add	r9, r3
 80090ea:	9209      	str	r2, [sp, #36]	; 0x24
 80090ec:	f000 ffe8 	bl	800a0c0 <__i2b>
 80090f0:	4606      	mov	r6, r0
 80090f2:	b15f      	cbz	r7, 800910c <_dtoa_r+0x764>
 80090f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	dd08      	ble.n	800910c <_dtoa_r+0x764>
 80090fa:	42bb      	cmp	r3, r7
 80090fc:	bfa8      	it	ge
 80090fe:	463b      	movge	r3, r7
 8009100:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009102:	eba9 0903 	sub.w	r9, r9, r3
 8009106:	1aff      	subs	r7, r7, r3
 8009108:	1ad3      	subs	r3, r2, r3
 800910a:	9309      	str	r3, [sp, #36]	; 0x24
 800910c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800910e:	b1f3      	cbz	r3, 800914e <_dtoa_r+0x7a6>
 8009110:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009112:	2b00      	cmp	r3, #0
 8009114:	f000 80a0 	beq.w	8009258 <_dtoa_r+0x8b0>
 8009118:	2c00      	cmp	r4, #0
 800911a:	dd10      	ble.n	800913e <_dtoa_r+0x796>
 800911c:	4631      	mov	r1, r6
 800911e:	4622      	mov	r2, r4
 8009120:	4628      	mov	r0, r5
 8009122:	f001 f88b 	bl	800a23c <__pow5mult>
 8009126:	4652      	mov	r2, sl
 8009128:	4601      	mov	r1, r0
 800912a:	4606      	mov	r6, r0
 800912c:	4628      	mov	r0, r5
 800912e:	f000 ffdd 	bl	800a0ec <__multiply>
 8009132:	4680      	mov	r8, r0
 8009134:	4651      	mov	r1, sl
 8009136:	4628      	mov	r0, r5
 8009138:	f000 fec2 	bl	8009ec0 <_Bfree>
 800913c:	46c2      	mov	sl, r8
 800913e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009140:	1b1a      	subs	r2, r3, r4
 8009142:	d004      	beq.n	800914e <_dtoa_r+0x7a6>
 8009144:	4651      	mov	r1, sl
 8009146:	4628      	mov	r0, r5
 8009148:	f001 f878 	bl	800a23c <__pow5mult>
 800914c:	4682      	mov	sl, r0
 800914e:	2101      	movs	r1, #1
 8009150:	4628      	mov	r0, r5
 8009152:	f000 ffb5 	bl	800a0c0 <__i2b>
 8009156:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009158:	4604      	mov	r4, r0
 800915a:	2b00      	cmp	r3, #0
 800915c:	f340 8082 	ble.w	8009264 <_dtoa_r+0x8bc>
 8009160:	461a      	mov	r2, r3
 8009162:	4601      	mov	r1, r0
 8009164:	4628      	mov	r0, r5
 8009166:	f001 f869 	bl	800a23c <__pow5mult>
 800916a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800916c:	4604      	mov	r4, r0
 800916e:	2b01      	cmp	r3, #1
 8009170:	dd7b      	ble.n	800926a <_dtoa_r+0x8c2>
 8009172:	f04f 0800 	mov.w	r8, #0
 8009176:	6923      	ldr	r3, [r4, #16]
 8009178:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800917c:	6918      	ldr	r0, [r3, #16]
 800917e:	f000 ff51 	bl	800a024 <__hi0bits>
 8009182:	f1c0 0020 	rsb	r0, r0, #32
 8009186:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009188:	4418      	add	r0, r3
 800918a:	f010 001f 	ands.w	r0, r0, #31
 800918e:	f000 8092 	beq.w	80092b6 <_dtoa_r+0x90e>
 8009192:	f1c0 0320 	rsb	r3, r0, #32
 8009196:	2b04      	cmp	r3, #4
 8009198:	f340 8085 	ble.w	80092a6 <_dtoa_r+0x8fe>
 800919c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800919e:	f1c0 001c 	rsb	r0, r0, #28
 80091a2:	4403      	add	r3, r0
 80091a4:	4481      	add	r9, r0
 80091a6:	4407      	add	r7, r0
 80091a8:	9309      	str	r3, [sp, #36]	; 0x24
 80091aa:	f1b9 0f00 	cmp.w	r9, #0
 80091ae:	dd05      	ble.n	80091bc <_dtoa_r+0x814>
 80091b0:	4651      	mov	r1, sl
 80091b2:	464a      	mov	r2, r9
 80091b4:	4628      	mov	r0, r5
 80091b6:	f001 f89b 	bl	800a2f0 <__lshift>
 80091ba:	4682      	mov	sl, r0
 80091bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091be:	2b00      	cmp	r3, #0
 80091c0:	dd05      	ble.n	80091ce <_dtoa_r+0x826>
 80091c2:	4621      	mov	r1, r4
 80091c4:	461a      	mov	r2, r3
 80091c6:	4628      	mov	r0, r5
 80091c8:	f001 f892 	bl	800a2f0 <__lshift>
 80091cc:	4604      	mov	r4, r0
 80091ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d072      	beq.n	80092ba <_dtoa_r+0x912>
 80091d4:	4621      	mov	r1, r4
 80091d6:	4650      	mov	r0, sl
 80091d8:	f001 f8f6 	bl	800a3c8 <__mcmp>
 80091dc:	2800      	cmp	r0, #0
 80091de:	da6c      	bge.n	80092ba <_dtoa_r+0x912>
 80091e0:	2300      	movs	r3, #0
 80091e2:	4651      	mov	r1, sl
 80091e4:	220a      	movs	r2, #10
 80091e6:	4628      	mov	r0, r5
 80091e8:	f000 fe8c 	bl	8009f04 <__multadd>
 80091ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091ee:	4682      	mov	sl, r0
 80091f0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	f000 81ac 	beq.w	8009552 <_dtoa_r+0xbaa>
 80091fa:	2300      	movs	r3, #0
 80091fc:	4631      	mov	r1, r6
 80091fe:	220a      	movs	r2, #10
 8009200:	4628      	mov	r0, r5
 8009202:	f000 fe7f 	bl	8009f04 <__multadd>
 8009206:	9b06      	ldr	r3, [sp, #24]
 8009208:	4606      	mov	r6, r0
 800920a:	2b00      	cmp	r3, #0
 800920c:	f300 8093 	bgt.w	8009336 <_dtoa_r+0x98e>
 8009210:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009212:	2b02      	cmp	r3, #2
 8009214:	dc59      	bgt.n	80092ca <_dtoa_r+0x922>
 8009216:	e08e      	b.n	8009336 <_dtoa_r+0x98e>
 8009218:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800921a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800921e:	e75d      	b.n	80090dc <_dtoa_r+0x734>
 8009220:	9b08      	ldr	r3, [sp, #32]
 8009222:	1e5c      	subs	r4, r3, #1
 8009224:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009226:	42a3      	cmp	r3, r4
 8009228:	bfbf      	itttt	lt
 800922a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800922c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800922e:	1ae3      	sublt	r3, r4, r3
 8009230:	18d2      	addlt	r2, r2, r3
 8009232:	bfa8      	it	ge
 8009234:	1b1c      	subge	r4, r3, r4
 8009236:	9b08      	ldr	r3, [sp, #32]
 8009238:	bfbe      	ittt	lt
 800923a:	940a      	strlt	r4, [sp, #40]	; 0x28
 800923c:	920e      	strlt	r2, [sp, #56]	; 0x38
 800923e:	2400      	movlt	r4, #0
 8009240:	2b00      	cmp	r3, #0
 8009242:	bfb5      	itete	lt
 8009244:	eba9 0703 	sublt.w	r7, r9, r3
 8009248:	464f      	movge	r7, r9
 800924a:	2300      	movlt	r3, #0
 800924c:	9b08      	ldrge	r3, [sp, #32]
 800924e:	e747      	b.n	80090e0 <_dtoa_r+0x738>
 8009250:	464f      	mov	r7, r9
 8009252:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009254:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8009256:	e74c      	b.n	80090f2 <_dtoa_r+0x74a>
 8009258:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800925a:	e773      	b.n	8009144 <_dtoa_r+0x79c>
 800925c:	3fe00000 	.word	0x3fe00000
 8009260:	40240000 	.word	0x40240000
 8009264:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009266:	2b01      	cmp	r3, #1
 8009268:	dc18      	bgt.n	800929c <_dtoa_r+0x8f4>
 800926a:	9b04      	ldr	r3, [sp, #16]
 800926c:	b9b3      	cbnz	r3, 800929c <_dtoa_r+0x8f4>
 800926e:	9b05      	ldr	r3, [sp, #20]
 8009270:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009274:	b993      	cbnz	r3, 800929c <_dtoa_r+0x8f4>
 8009276:	9b05      	ldr	r3, [sp, #20]
 8009278:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800927c:	0d1b      	lsrs	r3, r3, #20
 800927e:	051b      	lsls	r3, r3, #20
 8009280:	b17b      	cbz	r3, 80092a2 <_dtoa_r+0x8fa>
 8009282:	f04f 0801 	mov.w	r8, #1
 8009286:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009288:	f109 0901 	add.w	r9, r9, #1
 800928c:	3301      	adds	r3, #1
 800928e:	9309      	str	r3, [sp, #36]	; 0x24
 8009290:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009292:	2b00      	cmp	r3, #0
 8009294:	f47f af6f 	bne.w	8009176 <_dtoa_r+0x7ce>
 8009298:	2001      	movs	r0, #1
 800929a:	e774      	b.n	8009186 <_dtoa_r+0x7de>
 800929c:	f04f 0800 	mov.w	r8, #0
 80092a0:	e7f6      	b.n	8009290 <_dtoa_r+0x8e8>
 80092a2:	4698      	mov	r8, r3
 80092a4:	e7f4      	b.n	8009290 <_dtoa_r+0x8e8>
 80092a6:	d080      	beq.n	80091aa <_dtoa_r+0x802>
 80092a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092aa:	331c      	adds	r3, #28
 80092ac:	441a      	add	r2, r3
 80092ae:	4499      	add	r9, r3
 80092b0:	441f      	add	r7, r3
 80092b2:	9209      	str	r2, [sp, #36]	; 0x24
 80092b4:	e779      	b.n	80091aa <_dtoa_r+0x802>
 80092b6:	4603      	mov	r3, r0
 80092b8:	e7f6      	b.n	80092a8 <_dtoa_r+0x900>
 80092ba:	9b08      	ldr	r3, [sp, #32]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	dc34      	bgt.n	800932a <_dtoa_r+0x982>
 80092c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80092c2:	2b02      	cmp	r3, #2
 80092c4:	dd31      	ble.n	800932a <_dtoa_r+0x982>
 80092c6:	9b08      	ldr	r3, [sp, #32]
 80092c8:	9306      	str	r3, [sp, #24]
 80092ca:	9b06      	ldr	r3, [sp, #24]
 80092cc:	b963      	cbnz	r3, 80092e8 <_dtoa_r+0x940>
 80092ce:	4621      	mov	r1, r4
 80092d0:	2205      	movs	r2, #5
 80092d2:	4628      	mov	r0, r5
 80092d4:	f000 fe16 	bl	8009f04 <__multadd>
 80092d8:	4601      	mov	r1, r0
 80092da:	4604      	mov	r4, r0
 80092dc:	4650      	mov	r0, sl
 80092de:	f001 f873 	bl	800a3c8 <__mcmp>
 80092e2:	2800      	cmp	r0, #0
 80092e4:	f73f adbf 	bgt.w	8008e66 <_dtoa_r+0x4be>
 80092e8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80092ea:	9f03      	ldr	r7, [sp, #12]
 80092ec:	ea6f 0b03 	mvn.w	fp, r3
 80092f0:	f04f 0800 	mov.w	r8, #0
 80092f4:	4621      	mov	r1, r4
 80092f6:	4628      	mov	r0, r5
 80092f8:	f000 fde2 	bl	8009ec0 <_Bfree>
 80092fc:	2e00      	cmp	r6, #0
 80092fe:	f43f aead 	beq.w	800905c <_dtoa_r+0x6b4>
 8009302:	f1b8 0f00 	cmp.w	r8, #0
 8009306:	d005      	beq.n	8009314 <_dtoa_r+0x96c>
 8009308:	45b0      	cmp	r8, r6
 800930a:	d003      	beq.n	8009314 <_dtoa_r+0x96c>
 800930c:	4641      	mov	r1, r8
 800930e:	4628      	mov	r0, r5
 8009310:	f000 fdd6 	bl	8009ec0 <_Bfree>
 8009314:	4631      	mov	r1, r6
 8009316:	4628      	mov	r0, r5
 8009318:	f000 fdd2 	bl	8009ec0 <_Bfree>
 800931c:	e69e      	b.n	800905c <_dtoa_r+0x6b4>
 800931e:	2400      	movs	r4, #0
 8009320:	4626      	mov	r6, r4
 8009322:	e7e1      	b.n	80092e8 <_dtoa_r+0x940>
 8009324:	46c3      	mov	fp, r8
 8009326:	4626      	mov	r6, r4
 8009328:	e59d      	b.n	8008e66 <_dtoa_r+0x4be>
 800932a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800932c:	2b00      	cmp	r3, #0
 800932e:	f000 80c8 	beq.w	80094c2 <_dtoa_r+0xb1a>
 8009332:	9b08      	ldr	r3, [sp, #32]
 8009334:	9306      	str	r3, [sp, #24]
 8009336:	2f00      	cmp	r7, #0
 8009338:	dd05      	ble.n	8009346 <_dtoa_r+0x99e>
 800933a:	4631      	mov	r1, r6
 800933c:	463a      	mov	r2, r7
 800933e:	4628      	mov	r0, r5
 8009340:	f000 ffd6 	bl	800a2f0 <__lshift>
 8009344:	4606      	mov	r6, r0
 8009346:	f1b8 0f00 	cmp.w	r8, #0
 800934a:	d05b      	beq.n	8009404 <_dtoa_r+0xa5c>
 800934c:	4628      	mov	r0, r5
 800934e:	6871      	ldr	r1, [r6, #4]
 8009350:	f000 fd76 	bl	8009e40 <_Balloc>
 8009354:	4607      	mov	r7, r0
 8009356:	b928      	cbnz	r0, 8009364 <_dtoa_r+0x9bc>
 8009358:	4602      	mov	r2, r0
 800935a:	f240 21ef 	movw	r1, #751	; 0x2ef
 800935e:	4b81      	ldr	r3, [pc, #516]	; (8009564 <_dtoa_r+0xbbc>)
 8009360:	f7ff bb36 	b.w	80089d0 <_dtoa_r+0x28>
 8009364:	6932      	ldr	r2, [r6, #16]
 8009366:	f106 010c 	add.w	r1, r6, #12
 800936a:	3202      	adds	r2, #2
 800936c:	0092      	lsls	r2, r2, #2
 800936e:	300c      	adds	r0, #12
 8009370:	f7ff fa59 	bl	8008826 <memcpy>
 8009374:	2201      	movs	r2, #1
 8009376:	4639      	mov	r1, r7
 8009378:	4628      	mov	r0, r5
 800937a:	f000 ffb9 	bl	800a2f0 <__lshift>
 800937e:	46b0      	mov	r8, r6
 8009380:	4606      	mov	r6, r0
 8009382:	9b03      	ldr	r3, [sp, #12]
 8009384:	9a03      	ldr	r2, [sp, #12]
 8009386:	3301      	adds	r3, #1
 8009388:	9308      	str	r3, [sp, #32]
 800938a:	9b06      	ldr	r3, [sp, #24]
 800938c:	4413      	add	r3, r2
 800938e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009390:	9b04      	ldr	r3, [sp, #16]
 8009392:	f003 0301 	and.w	r3, r3, #1
 8009396:	930a      	str	r3, [sp, #40]	; 0x28
 8009398:	9b08      	ldr	r3, [sp, #32]
 800939a:	4621      	mov	r1, r4
 800939c:	3b01      	subs	r3, #1
 800939e:	4650      	mov	r0, sl
 80093a0:	9304      	str	r3, [sp, #16]
 80093a2:	f7ff fa77 	bl	8008894 <quorem>
 80093a6:	4641      	mov	r1, r8
 80093a8:	9006      	str	r0, [sp, #24]
 80093aa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80093ae:	4650      	mov	r0, sl
 80093b0:	f001 f80a 	bl	800a3c8 <__mcmp>
 80093b4:	4632      	mov	r2, r6
 80093b6:	9009      	str	r0, [sp, #36]	; 0x24
 80093b8:	4621      	mov	r1, r4
 80093ba:	4628      	mov	r0, r5
 80093bc:	f001 f820 	bl	800a400 <__mdiff>
 80093c0:	68c2      	ldr	r2, [r0, #12]
 80093c2:	4607      	mov	r7, r0
 80093c4:	bb02      	cbnz	r2, 8009408 <_dtoa_r+0xa60>
 80093c6:	4601      	mov	r1, r0
 80093c8:	4650      	mov	r0, sl
 80093ca:	f000 fffd 	bl	800a3c8 <__mcmp>
 80093ce:	4602      	mov	r2, r0
 80093d0:	4639      	mov	r1, r7
 80093d2:	4628      	mov	r0, r5
 80093d4:	920c      	str	r2, [sp, #48]	; 0x30
 80093d6:	f000 fd73 	bl	8009ec0 <_Bfree>
 80093da:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80093dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80093de:	9f08      	ldr	r7, [sp, #32]
 80093e0:	ea43 0102 	orr.w	r1, r3, r2
 80093e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093e6:	4319      	orrs	r1, r3
 80093e8:	d110      	bne.n	800940c <_dtoa_r+0xa64>
 80093ea:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80093ee:	d029      	beq.n	8009444 <_dtoa_r+0xa9c>
 80093f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	dd02      	ble.n	80093fc <_dtoa_r+0xa54>
 80093f6:	9b06      	ldr	r3, [sp, #24]
 80093f8:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80093fc:	9b04      	ldr	r3, [sp, #16]
 80093fe:	f883 9000 	strb.w	r9, [r3]
 8009402:	e777      	b.n	80092f4 <_dtoa_r+0x94c>
 8009404:	4630      	mov	r0, r6
 8009406:	e7ba      	b.n	800937e <_dtoa_r+0x9d6>
 8009408:	2201      	movs	r2, #1
 800940a:	e7e1      	b.n	80093d0 <_dtoa_r+0xa28>
 800940c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800940e:	2b00      	cmp	r3, #0
 8009410:	db04      	blt.n	800941c <_dtoa_r+0xa74>
 8009412:	9922      	ldr	r1, [sp, #136]	; 0x88
 8009414:	430b      	orrs	r3, r1
 8009416:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009418:	430b      	orrs	r3, r1
 800941a:	d120      	bne.n	800945e <_dtoa_r+0xab6>
 800941c:	2a00      	cmp	r2, #0
 800941e:	dded      	ble.n	80093fc <_dtoa_r+0xa54>
 8009420:	4651      	mov	r1, sl
 8009422:	2201      	movs	r2, #1
 8009424:	4628      	mov	r0, r5
 8009426:	f000 ff63 	bl	800a2f0 <__lshift>
 800942a:	4621      	mov	r1, r4
 800942c:	4682      	mov	sl, r0
 800942e:	f000 ffcb 	bl	800a3c8 <__mcmp>
 8009432:	2800      	cmp	r0, #0
 8009434:	dc03      	bgt.n	800943e <_dtoa_r+0xa96>
 8009436:	d1e1      	bne.n	80093fc <_dtoa_r+0xa54>
 8009438:	f019 0f01 	tst.w	r9, #1
 800943c:	d0de      	beq.n	80093fc <_dtoa_r+0xa54>
 800943e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009442:	d1d8      	bne.n	80093f6 <_dtoa_r+0xa4e>
 8009444:	2339      	movs	r3, #57	; 0x39
 8009446:	9a04      	ldr	r2, [sp, #16]
 8009448:	7013      	strb	r3, [r2, #0]
 800944a:	463b      	mov	r3, r7
 800944c:	461f      	mov	r7, r3
 800944e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8009452:	3b01      	subs	r3, #1
 8009454:	2a39      	cmp	r2, #57	; 0x39
 8009456:	d06b      	beq.n	8009530 <_dtoa_r+0xb88>
 8009458:	3201      	adds	r2, #1
 800945a:	701a      	strb	r2, [r3, #0]
 800945c:	e74a      	b.n	80092f4 <_dtoa_r+0x94c>
 800945e:	2a00      	cmp	r2, #0
 8009460:	dd07      	ble.n	8009472 <_dtoa_r+0xaca>
 8009462:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009466:	d0ed      	beq.n	8009444 <_dtoa_r+0xa9c>
 8009468:	9a04      	ldr	r2, [sp, #16]
 800946a:	f109 0301 	add.w	r3, r9, #1
 800946e:	7013      	strb	r3, [r2, #0]
 8009470:	e740      	b.n	80092f4 <_dtoa_r+0x94c>
 8009472:	9b08      	ldr	r3, [sp, #32]
 8009474:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009476:	f803 9c01 	strb.w	r9, [r3, #-1]
 800947a:	4293      	cmp	r3, r2
 800947c:	d042      	beq.n	8009504 <_dtoa_r+0xb5c>
 800947e:	4651      	mov	r1, sl
 8009480:	2300      	movs	r3, #0
 8009482:	220a      	movs	r2, #10
 8009484:	4628      	mov	r0, r5
 8009486:	f000 fd3d 	bl	8009f04 <__multadd>
 800948a:	45b0      	cmp	r8, r6
 800948c:	4682      	mov	sl, r0
 800948e:	f04f 0300 	mov.w	r3, #0
 8009492:	f04f 020a 	mov.w	r2, #10
 8009496:	4641      	mov	r1, r8
 8009498:	4628      	mov	r0, r5
 800949a:	d107      	bne.n	80094ac <_dtoa_r+0xb04>
 800949c:	f000 fd32 	bl	8009f04 <__multadd>
 80094a0:	4680      	mov	r8, r0
 80094a2:	4606      	mov	r6, r0
 80094a4:	9b08      	ldr	r3, [sp, #32]
 80094a6:	3301      	adds	r3, #1
 80094a8:	9308      	str	r3, [sp, #32]
 80094aa:	e775      	b.n	8009398 <_dtoa_r+0x9f0>
 80094ac:	f000 fd2a 	bl	8009f04 <__multadd>
 80094b0:	4631      	mov	r1, r6
 80094b2:	4680      	mov	r8, r0
 80094b4:	2300      	movs	r3, #0
 80094b6:	220a      	movs	r2, #10
 80094b8:	4628      	mov	r0, r5
 80094ba:	f000 fd23 	bl	8009f04 <__multadd>
 80094be:	4606      	mov	r6, r0
 80094c0:	e7f0      	b.n	80094a4 <_dtoa_r+0xafc>
 80094c2:	9b08      	ldr	r3, [sp, #32]
 80094c4:	9306      	str	r3, [sp, #24]
 80094c6:	9f03      	ldr	r7, [sp, #12]
 80094c8:	4621      	mov	r1, r4
 80094ca:	4650      	mov	r0, sl
 80094cc:	f7ff f9e2 	bl	8008894 <quorem>
 80094d0:	9b03      	ldr	r3, [sp, #12]
 80094d2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80094d6:	f807 9b01 	strb.w	r9, [r7], #1
 80094da:	1afa      	subs	r2, r7, r3
 80094dc:	9b06      	ldr	r3, [sp, #24]
 80094de:	4293      	cmp	r3, r2
 80094e0:	dd07      	ble.n	80094f2 <_dtoa_r+0xb4a>
 80094e2:	4651      	mov	r1, sl
 80094e4:	2300      	movs	r3, #0
 80094e6:	220a      	movs	r2, #10
 80094e8:	4628      	mov	r0, r5
 80094ea:	f000 fd0b 	bl	8009f04 <__multadd>
 80094ee:	4682      	mov	sl, r0
 80094f0:	e7ea      	b.n	80094c8 <_dtoa_r+0xb20>
 80094f2:	9b06      	ldr	r3, [sp, #24]
 80094f4:	f04f 0800 	mov.w	r8, #0
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	bfcc      	ite	gt
 80094fc:	461f      	movgt	r7, r3
 80094fe:	2701      	movle	r7, #1
 8009500:	9b03      	ldr	r3, [sp, #12]
 8009502:	441f      	add	r7, r3
 8009504:	4651      	mov	r1, sl
 8009506:	2201      	movs	r2, #1
 8009508:	4628      	mov	r0, r5
 800950a:	f000 fef1 	bl	800a2f0 <__lshift>
 800950e:	4621      	mov	r1, r4
 8009510:	4682      	mov	sl, r0
 8009512:	f000 ff59 	bl	800a3c8 <__mcmp>
 8009516:	2800      	cmp	r0, #0
 8009518:	dc97      	bgt.n	800944a <_dtoa_r+0xaa2>
 800951a:	d102      	bne.n	8009522 <_dtoa_r+0xb7a>
 800951c:	f019 0f01 	tst.w	r9, #1
 8009520:	d193      	bne.n	800944a <_dtoa_r+0xaa2>
 8009522:	463b      	mov	r3, r7
 8009524:	461f      	mov	r7, r3
 8009526:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800952a:	2a30      	cmp	r2, #48	; 0x30
 800952c:	d0fa      	beq.n	8009524 <_dtoa_r+0xb7c>
 800952e:	e6e1      	b.n	80092f4 <_dtoa_r+0x94c>
 8009530:	9a03      	ldr	r2, [sp, #12]
 8009532:	429a      	cmp	r2, r3
 8009534:	d18a      	bne.n	800944c <_dtoa_r+0xaa4>
 8009536:	2331      	movs	r3, #49	; 0x31
 8009538:	f10b 0b01 	add.w	fp, fp, #1
 800953c:	e797      	b.n	800946e <_dtoa_r+0xac6>
 800953e:	4b0a      	ldr	r3, [pc, #40]	; (8009568 <_dtoa_r+0xbc0>)
 8009540:	f7ff ba9f 	b.w	8008a82 <_dtoa_r+0xda>
 8009544:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009546:	2b00      	cmp	r3, #0
 8009548:	f47f aa77 	bne.w	8008a3a <_dtoa_r+0x92>
 800954c:	4b07      	ldr	r3, [pc, #28]	; (800956c <_dtoa_r+0xbc4>)
 800954e:	f7ff ba98 	b.w	8008a82 <_dtoa_r+0xda>
 8009552:	9b06      	ldr	r3, [sp, #24]
 8009554:	2b00      	cmp	r3, #0
 8009556:	dcb6      	bgt.n	80094c6 <_dtoa_r+0xb1e>
 8009558:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800955a:	2b02      	cmp	r3, #2
 800955c:	f73f aeb5 	bgt.w	80092ca <_dtoa_r+0x922>
 8009560:	e7b1      	b.n	80094c6 <_dtoa_r+0xb1e>
 8009562:	bf00      	nop
 8009564:	0800d43c 	.word	0x0800d43c
 8009568:	0800d2f9 	.word	0x0800d2f9
 800956c:	0800d3d7 	.word	0x0800d3d7

08009570 <_free_r>:
 8009570:	b538      	push	{r3, r4, r5, lr}
 8009572:	4605      	mov	r5, r0
 8009574:	2900      	cmp	r1, #0
 8009576:	d040      	beq.n	80095fa <_free_r+0x8a>
 8009578:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800957c:	1f0c      	subs	r4, r1, #4
 800957e:	2b00      	cmp	r3, #0
 8009580:	bfb8      	it	lt
 8009582:	18e4      	addlt	r4, r4, r3
 8009584:	f000 fc50 	bl	8009e28 <__malloc_lock>
 8009588:	4a1c      	ldr	r2, [pc, #112]	; (80095fc <_free_r+0x8c>)
 800958a:	6813      	ldr	r3, [r2, #0]
 800958c:	b933      	cbnz	r3, 800959c <_free_r+0x2c>
 800958e:	6063      	str	r3, [r4, #4]
 8009590:	6014      	str	r4, [r2, #0]
 8009592:	4628      	mov	r0, r5
 8009594:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009598:	f000 bc4c 	b.w	8009e34 <__malloc_unlock>
 800959c:	42a3      	cmp	r3, r4
 800959e:	d908      	bls.n	80095b2 <_free_r+0x42>
 80095a0:	6820      	ldr	r0, [r4, #0]
 80095a2:	1821      	adds	r1, r4, r0
 80095a4:	428b      	cmp	r3, r1
 80095a6:	bf01      	itttt	eq
 80095a8:	6819      	ldreq	r1, [r3, #0]
 80095aa:	685b      	ldreq	r3, [r3, #4]
 80095ac:	1809      	addeq	r1, r1, r0
 80095ae:	6021      	streq	r1, [r4, #0]
 80095b0:	e7ed      	b.n	800958e <_free_r+0x1e>
 80095b2:	461a      	mov	r2, r3
 80095b4:	685b      	ldr	r3, [r3, #4]
 80095b6:	b10b      	cbz	r3, 80095bc <_free_r+0x4c>
 80095b8:	42a3      	cmp	r3, r4
 80095ba:	d9fa      	bls.n	80095b2 <_free_r+0x42>
 80095bc:	6811      	ldr	r1, [r2, #0]
 80095be:	1850      	adds	r0, r2, r1
 80095c0:	42a0      	cmp	r0, r4
 80095c2:	d10b      	bne.n	80095dc <_free_r+0x6c>
 80095c4:	6820      	ldr	r0, [r4, #0]
 80095c6:	4401      	add	r1, r0
 80095c8:	1850      	adds	r0, r2, r1
 80095ca:	4283      	cmp	r3, r0
 80095cc:	6011      	str	r1, [r2, #0]
 80095ce:	d1e0      	bne.n	8009592 <_free_r+0x22>
 80095d0:	6818      	ldr	r0, [r3, #0]
 80095d2:	685b      	ldr	r3, [r3, #4]
 80095d4:	4408      	add	r0, r1
 80095d6:	6010      	str	r0, [r2, #0]
 80095d8:	6053      	str	r3, [r2, #4]
 80095da:	e7da      	b.n	8009592 <_free_r+0x22>
 80095dc:	d902      	bls.n	80095e4 <_free_r+0x74>
 80095de:	230c      	movs	r3, #12
 80095e0:	602b      	str	r3, [r5, #0]
 80095e2:	e7d6      	b.n	8009592 <_free_r+0x22>
 80095e4:	6820      	ldr	r0, [r4, #0]
 80095e6:	1821      	adds	r1, r4, r0
 80095e8:	428b      	cmp	r3, r1
 80095ea:	bf01      	itttt	eq
 80095ec:	6819      	ldreq	r1, [r3, #0]
 80095ee:	685b      	ldreq	r3, [r3, #4]
 80095f0:	1809      	addeq	r1, r1, r0
 80095f2:	6021      	streq	r1, [r4, #0]
 80095f4:	6063      	str	r3, [r4, #4]
 80095f6:	6054      	str	r4, [r2, #4]
 80095f8:	e7cb      	b.n	8009592 <_free_r+0x22>
 80095fa:	bd38      	pop	{r3, r4, r5, pc}
 80095fc:	20000a0c 	.word	0x20000a0c

08009600 <rshift>:
 8009600:	6903      	ldr	r3, [r0, #16]
 8009602:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009606:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800960a:	f100 0414 	add.w	r4, r0, #20
 800960e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009612:	dd46      	ble.n	80096a2 <rshift+0xa2>
 8009614:	f011 011f 	ands.w	r1, r1, #31
 8009618:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800961c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009620:	d10c      	bne.n	800963c <rshift+0x3c>
 8009622:	4629      	mov	r1, r5
 8009624:	f100 0710 	add.w	r7, r0, #16
 8009628:	42b1      	cmp	r1, r6
 800962a:	d335      	bcc.n	8009698 <rshift+0x98>
 800962c:	1a9b      	subs	r3, r3, r2
 800962e:	009b      	lsls	r3, r3, #2
 8009630:	1eea      	subs	r2, r5, #3
 8009632:	4296      	cmp	r6, r2
 8009634:	bf38      	it	cc
 8009636:	2300      	movcc	r3, #0
 8009638:	4423      	add	r3, r4
 800963a:	e015      	b.n	8009668 <rshift+0x68>
 800963c:	46a1      	mov	r9, r4
 800963e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009642:	f1c1 0820 	rsb	r8, r1, #32
 8009646:	40cf      	lsrs	r7, r1
 8009648:	f105 0e04 	add.w	lr, r5, #4
 800964c:	4576      	cmp	r6, lr
 800964e:	46f4      	mov	ip, lr
 8009650:	d816      	bhi.n	8009680 <rshift+0x80>
 8009652:	1a9a      	subs	r2, r3, r2
 8009654:	0092      	lsls	r2, r2, #2
 8009656:	3a04      	subs	r2, #4
 8009658:	3501      	adds	r5, #1
 800965a:	42ae      	cmp	r6, r5
 800965c:	bf38      	it	cc
 800965e:	2200      	movcc	r2, #0
 8009660:	18a3      	adds	r3, r4, r2
 8009662:	50a7      	str	r7, [r4, r2]
 8009664:	b107      	cbz	r7, 8009668 <rshift+0x68>
 8009666:	3304      	adds	r3, #4
 8009668:	42a3      	cmp	r3, r4
 800966a:	eba3 0204 	sub.w	r2, r3, r4
 800966e:	bf08      	it	eq
 8009670:	2300      	moveq	r3, #0
 8009672:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009676:	6102      	str	r2, [r0, #16]
 8009678:	bf08      	it	eq
 800967a:	6143      	streq	r3, [r0, #20]
 800967c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009680:	f8dc c000 	ldr.w	ip, [ip]
 8009684:	fa0c fc08 	lsl.w	ip, ip, r8
 8009688:	ea4c 0707 	orr.w	r7, ip, r7
 800968c:	f849 7b04 	str.w	r7, [r9], #4
 8009690:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009694:	40cf      	lsrs	r7, r1
 8009696:	e7d9      	b.n	800964c <rshift+0x4c>
 8009698:	f851 cb04 	ldr.w	ip, [r1], #4
 800969c:	f847 cf04 	str.w	ip, [r7, #4]!
 80096a0:	e7c2      	b.n	8009628 <rshift+0x28>
 80096a2:	4623      	mov	r3, r4
 80096a4:	e7e0      	b.n	8009668 <rshift+0x68>

080096a6 <__hexdig_fun>:
 80096a6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80096aa:	2b09      	cmp	r3, #9
 80096ac:	d802      	bhi.n	80096b4 <__hexdig_fun+0xe>
 80096ae:	3820      	subs	r0, #32
 80096b0:	b2c0      	uxtb	r0, r0
 80096b2:	4770      	bx	lr
 80096b4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80096b8:	2b05      	cmp	r3, #5
 80096ba:	d801      	bhi.n	80096c0 <__hexdig_fun+0x1a>
 80096bc:	3847      	subs	r0, #71	; 0x47
 80096be:	e7f7      	b.n	80096b0 <__hexdig_fun+0xa>
 80096c0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80096c4:	2b05      	cmp	r3, #5
 80096c6:	d801      	bhi.n	80096cc <__hexdig_fun+0x26>
 80096c8:	3827      	subs	r0, #39	; 0x27
 80096ca:	e7f1      	b.n	80096b0 <__hexdig_fun+0xa>
 80096cc:	2000      	movs	r0, #0
 80096ce:	4770      	bx	lr

080096d0 <__gethex>:
 80096d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096d4:	4681      	mov	r9, r0
 80096d6:	468a      	mov	sl, r1
 80096d8:	4617      	mov	r7, r2
 80096da:	680a      	ldr	r2, [r1, #0]
 80096dc:	b085      	sub	sp, #20
 80096de:	f102 0b02 	add.w	fp, r2, #2
 80096e2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80096e6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80096ea:	9302      	str	r3, [sp, #8]
 80096ec:	32fe      	adds	r2, #254	; 0xfe
 80096ee:	eb02 030b 	add.w	r3, r2, fp
 80096f2:	46d8      	mov	r8, fp
 80096f4:	f81b 0b01 	ldrb.w	r0, [fp], #1
 80096f8:	9301      	str	r3, [sp, #4]
 80096fa:	2830      	cmp	r0, #48	; 0x30
 80096fc:	d0f7      	beq.n	80096ee <__gethex+0x1e>
 80096fe:	f7ff ffd2 	bl	80096a6 <__hexdig_fun>
 8009702:	4604      	mov	r4, r0
 8009704:	2800      	cmp	r0, #0
 8009706:	d138      	bne.n	800977a <__gethex+0xaa>
 8009708:	2201      	movs	r2, #1
 800970a:	4640      	mov	r0, r8
 800970c:	49a7      	ldr	r1, [pc, #668]	; (80099ac <__gethex+0x2dc>)
 800970e:	f7fe ff81 	bl	8008614 <strncmp>
 8009712:	4606      	mov	r6, r0
 8009714:	2800      	cmp	r0, #0
 8009716:	d169      	bne.n	80097ec <__gethex+0x11c>
 8009718:	f898 0001 	ldrb.w	r0, [r8, #1]
 800971c:	465d      	mov	r5, fp
 800971e:	f7ff ffc2 	bl	80096a6 <__hexdig_fun>
 8009722:	2800      	cmp	r0, #0
 8009724:	d064      	beq.n	80097f0 <__gethex+0x120>
 8009726:	465a      	mov	r2, fp
 8009728:	7810      	ldrb	r0, [r2, #0]
 800972a:	4690      	mov	r8, r2
 800972c:	2830      	cmp	r0, #48	; 0x30
 800972e:	f102 0201 	add.w	r2, r2, #1
 8009732:	d0f9      	beq.n	8009728 <__gethex+0x58>
 8009734:	f7ff ffb7 	bl	80096a6 <__hexdig_fun>
 8009738:	2301      	movs	r3, #1
 800973a:	fab0 f480 	clz	r4, r0
 800973e:	465e      	mov	r6, fp
 8009740:	0964      	lsrs	r4, r4, #5
 8009742:	9301      	str	r3, [sp, #4]
 8009744:	4642      	mov	r2, r8
 8009746:	4615      	mov	r5, r2
 8009748:	7828      	ldrb	r0, [r5, #0]
 800974a:	3201      	adds	r2, #1
 800974c:	f7ff ffab 	bl	80096a6 <__hexdig_fun>
 8009750:	2800      	cmp	r0, #0
 8009752:	d1f8      	bne.n	8009746 <__gethex+0x76>
 8009754:	2201      	movs	r2, #1
 8009756:	4628      	mov	r0, r5
 8009758:	4994      	ldr	r1, [pc, #592]	; (80099ac <__gethex+0x2dc>)
 800975a:	f7fe ff5b 	bl	8008614 <strncmp>
 800975e:	b978      	cbnz	r0, 8009780 <__gethex+0xb0>
 8009760:	b946      	cbnz	r6, 8009774 <__gethex+0xa4>
 8009762:	1c6e      	adds	r6, r5, #1
 8009764:	4632      	mov	r2, r6
 8009766:	4615      	mov	r5, r2
 8009768:	7828      	ldrb	r0, [r5, #0]
 800976a:	3201      	adds	r2, #1
 800976c:	f7ff ff9b 	bl	80096a6 <__hexdig_fun>
 8009770:	2800      	cmp	r0, #0
 8009772:	d1f8      	bne.n	8009766 <__gethex+0x96>
 8009774:	1b73      	subs	r3, r6, r5
 8009776:	009e      	lsls	r6, r3, #2
 8009778:	e004      	b.n	8009784 <__gethex+0xb4>
 800977a:	2400      	movs	r4, #0
 800977c:	4626      	mov	r6, r4
 800977e:	e7e1      	b.n	8009744 <__gethex+0x74>
 8009780:	2e00      	cmp	r6, #0
 8009782:	d1f7      	bne.n	8009774 <__gethex+0xa4>
 8009784:	782b      	ldrb	r3, [r5, #0]
 8009786:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800978a:	2b50      	cmp	r3, #80	; 0x50
 800978c:	d13d      	bne.n	800980a <__gethex+0x13a>
 800978e:	786b      	ldrb	r3, [r5, #1]
 8009790:	2b2b      	cmp	r3, #43	; 0x2b
 8009792:	d02f      	beq.n	80097f4 <__gethex+0x124>
 8009794:	2b2d      	cmp	r3, #45	; 0x2d
 8009796:	d031      	beq.n	80097fc <__gethex+0x12c>
 8009798:	f04f 0b00 	mov.w	fp, #0
 800979c:	1c69      	adds	r1, r5, #1
 800979e:	7808      	ldrb	r0, [r1, #0]
 80097a0:	f7ff ff81 	bl	80096a6 <__hexdig_fun>
 80097a4:	1e42      	subs	r2, r0, #1
 80097a6:	b2d2      	uxtb	r2, r2
 80097a8:	2a18      	cmp	r2, #24
 80097aa:	d82e      	bhi.n	800980a <__gethex+0x13a>
 80097ac:	f1a0 0210 	sub.w	r2, r0, #16
 80097b0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80097b4:	f7ff ff77 	bl	80096a6 <__hexdig_fun>
 80097b8:	f100 3cff 	add.w	ip, r0, #4294967295
 80097bc:	fa5f fc8c 	uxtb.w	ip, ip
 80097c0:	f1bc 0f18 	cmp.w	ip, #24
 80097c4:	d91d      	bls.n	8009802 <__gethex+0x132>
 80097c6:	f1bb 0f00 	cmp.w	fp, #0
 80097ca:	d000      	beq.n	80097ce <__gethex+0xfe>
 80097cc:	4252      	negs	r2, r2
 80097ce:	4416      	add	r6, r2
 80097d0:	f8ca 1000 	str.w	r1, [sl]
 80097d4:	b1dc      	cbz	r4, 800980e <__gethex+0x13e>
 80097d6:	9b01      	ldr	r3, [sp, #4]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	bf14      	ite	ne
 80097dc:	f04f 0800 	movne.w	r8, #0
 80097e0:	f04f 0806 	moveq.w	r8, #6
 80097e4:	4640      	mov	r0, r8
 80097e6:	b005      	add	sp, #20
 80097e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097ec:	4645      	mov	r5, r8
 80097ee:	4626      	mov	r6, r4
 80097f0:	2401      	movs	r4, #1
 80097f2:	e7c7      	b.n	8009784 <__gethex+0xb4>
 80097f4:	f04f 0b00 	mov.w	fp, #0
 80097f8:	1ca9      	adds	r1, r5, #2
 80097fa:	e7d0      	b.n	800979e <__gethex+0xce>
 80097fc:	f04f 0b01 	mov.w	fp, #1
 8009800:	e7fa      	b.n	80097f8 <__gethex+0x128>
 8009802:	230a      	movs	r3, #10
 8009804:	fb03 0002 	mla	r0, r3, r2, r0
 8009808:	e7d0      	b.n	80097ac <__gethex+0xdc>
 800980a:	4629      	mov	r1, r5
 800980c:	e7e0      	b.n	80097d0 <__gethex+0x100>
 800980e:	4621      	mov	r1, r4
 8009810:	eba5 0308 	sub.w	r3, r5, r8
 8009814:	3b01      	subs	r3, #1
 8009816:	2b07      	cmp	r3, #7
 8009818:	dc0a      	bgt.n	8009830 <__gethex+0x160>
 800981a:	4648      	mov	r0, r9
 800981c:	f000 fb10 	bl	8009e40 <_Balloc>
 8009820:	4604      	mov	r4, r0
 8009822:	b940      	cbnz	r0, 8009836 <__gethex+0x166>
 8009824:	4602      	mov	r2, r0
 8009826:	21e4      	movs	r1, #228	; 0xe4
 8009828:	4b61      	ldr	r3, [pc, #388]	; (80099b0 <__gethex+0x2e0>)
 800982a:	4862      	ldr	r0, [pc, #392]	; (80099b4 <__gethex+0x2e4>)
 800982c:	f7ff f814 	bl	8008858 <__assert_func>
 8009830:	3101      	adds	r1, #1
 8009832:	105b      	asrs	r3, r3, #1
 8009834:	e7ef      	b.n	8009816 <__gethex+0x146>
 8009836:	2300      	movs	r3, #0
 8009838:	469b      	mov	fp, r3
 800983a:	f100 0a14 	add.w	sl, r0, #20
 800983e:	f8cd a004 	str.w	sl, [sp, #4]
 8009842:	45a8      	cmp	r8, r5
 8009844:	d344      	bcc.n	80098d0 <__gethex+0x200>
 8009846:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800984a:	4658      	mov	r0, fp
 800984c:	f848 bb04 	str.w	fp, [r8], #4
 8009850:	eba8 080a 	sub.w	r8, r8, sl
 8009854:	ea4f 02a8 	mov.w	r2, r8, asr #2
 8009858:	6122      	str	r2, [r4, #16]
 800985a:	ea4f 1842 	mov.w	r8, r2, lsl #5
 800985e:	f000 fbe1 	bl	800a024 <__hi0bits>
 8009862:	683d      	ldr	r5, [r7, #0]
 8009864:	eba8 0800 	sub.w	r8, r8, r0
 8009868:	45a8      	cmp	r8, r5
 800986a:	dd59      	ble.n	8009920 <__gethex+0x250>
 800986c:	eba8 0805 	sub.w	r8, r8, r5
 8009870:	4641      	mov	r1, r8
 8009872:	4620      	mov	r0, r4
 8009874:	f000 ff5f 	bl	800a736 <__any_on>
 8009878:	4683      	mov	fp, r0
 800987a:	b1b8      	cbz	r0, 80098ac <__gethex+0x1dc>
 800987c:	f04f 0b01 	mov.w	fp, #1
 8009880:	f108 33ff 	add.w	r3, r8, #4294967295
 8009884:	1159      	asrs	r1, r3, #5
 8009886:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800988a:	f003 021f 	and.w	r2, r3, #31
 800988e:	fa0b f202 	lsl.w	r2, fp, r2
 8009892:	420a      	tst	r2, r1
 8009894:	d00a      	beq.n	80098ac <__gethex+0x1dc>
 8009896:	455b      	cmp	r3, fp
 8009898:	dd06      	ble.n	80098a8 <__gethex+0x1d8>
 800989a:	4620      	mov	r0, r4
 800989c:	f1a8 0102 	sub.w	r1, r8, #2
 80098a0:	f000 ff49 	bl	800a736 <__any_on>
 80098a4:	2800      	cmp	r0, #0
 80098a6:	d138      	bne.n	800991a <__gethex+0x24a>
 80098a8:	f04f 0b02 	mov.w	fp, #2
 80098ac:	4641      	mov	r1, r8
 80098ae:	4620      	mov	r0, r4
 80098b0:	f7ff fea6 	bl	8009600 <rshift>
 80098b4:	4446      	add	r6, r8
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	42b3      	cmp	r3, r6
 80098ba:	da41      	bge.n	8009940 <__gethex+0x270>
 80098bc:	4621      	mov	r1, r4
 80098be:	4648      	mov	r0, r9
 80098c0:	f000 fafe 	bl	8009ec0 <_Bfree>
 80098c4:	2300      	movs	r3, #0
 80098c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80098c8:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 80098cc:	6013      	str	r3, [r2, #0]
 80098ce:	e789      	b.n	80097e4 <__gethex+0x114>
 80098d0:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 80098d4:	2a2e      	cmp	r2, #46	; 0x2e
 80098d6:	d014      	beq.n	8009902 <__gethex+0x232>
 80098d8:	2b20      	cmp	r3, #32
 80098da:	d106      	bne.n	80098ea <__gethex+0x21a>
 80098dc:	9b01      	ldr	r3, [sp, #4]
 80098de:	f843 bb04 	str.w	fp, [r3], #4
 80098e2:	f04f 0b00 	mov.w	fp, #0
 80098e6:	9301      	str	r3, [sp, #4]
 80098e8:	465b      	mov	r3, fp
 80098ea:	7828      	ldrb	r0, [r5, #0]
 80098ec:	9303      	str	r3, [sp, #12]
 80098ee:	f7ff feda 	bl	80096a6 <__hexdig_fun>
 80098f2:	9b03      	ldr	r3, [sp, #12]
 80098f4:	f000 000f 	and.w	r0, r0, #15
 80098f8:	4098      	lsls	r0, r3
 80098fa:	ea4b 0b00 	orr.w	fp, fp, r0
 80098fe:	3304      	adds	r3, #4
 8009900:	e79f      	b.n	8009842 <__gethex+0x172>
 8009902:	45a8      	cmp	r8, r5
 8009904:	d8e8      	bhi.n	80098d8 <__gethex+0x208>
 8009906:	2201      	movs	r2, #1
 8009908:	4628      	mov	r0, r5
 800990a:	4928      	ldr	r1, [pc, #160]	; (80099ac <__gethex+0x2dc>)
 800990c:	9303      	str	r3, [sp, #12]
 800990e:	f7fe fe81 	bl	8008614 <strncmp>
 8009912:	9b03      	ldr	r3, [sp, #12]
 8009914:	2800      	cmp	r0, #0
 8009916:	d1df      	bne.n	80098d8 <__gethex+0x208>
 8009918:	e793      	b.n	8009842 <__gethex+0x172>
 800991a:	f04f 0b03 	mov.w	fp, #3
 800991e:	e7c5      	b.n	80098ac <__gethex+0x1dc>
 8009920:	da0b      	bge.n	800993a <__gethex+0x26a>
 8009922:	eba5 0808 	sub.w	r8, r5, r8
 8009926:	4621      	mov	r1, r4
 8009928:	4642      	mov	r2, r8
 800992a:	4648      	mov	r0, r9
 800992c:	f000 fce0 	bl	800a2f0 <__lshift>
 8009930:	4604      	mov	r4, r0
 8009932:	eba6 0608 	sub.w	r6, r6, r8
 8009936:	f100 0a14 	add.w	sl, r0, #20
 800993a:	f04f 0b00 	mov.w	fp, #0
 800993e:	e7ba      	b.n	80098b6 <__gethex+0x1e6>
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	42b3      	cmp	r3, r6
 8009944:	dd74      	ble.n	8009a30 <__gethex+0x360>
 8009946:	1b9e      	subs	r6, r3, r6
 8009948:	42b5      	cmp	r5, r6
 800994a:	dc35      	bgt.n	80099b8 <__gethex+0x2e8>
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	2b02      	cmp	r3, #2
 8009950:	d023      	beq.n	800999a <__gethex+0x2ca>
 8009952:	2b03      	cmp	r3, #3
 8009954:	d025      	beq.n	80099a2 <__gethex+0x2d2>
 8009956:	2b01      	cmp	r3, #1
 8009958:	d115      	bne.n	8009986 <__gethex+0x2b6>
 800995a:	42b5      	cmp	r5, r6
 800995c:	d113      	bne.n	8009986 <__gethex+0x2b6>
 800995e:	2d01      	cmp	r5, #1
 8009960:	d10b      	bne.n	800997a <__gethex+0x2aa>
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	9a02      	ldr	r2, [sp, #8]
 8009966:	f04f 0862 	mov.w	r8, #98	; 0x62
 800996a:	6013      	str	r3, [r2, #0]
 800996c:	2301      	movs	r3, #1
 800996e:	6123      	str	r3, [r4, #16]
 8009970:	f8ca 3000 	str.w	r3, [sl]
 8009974:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009976:	601c      	str	r4, [r3, #0]
 8009978:	e734      	b.n	80097e4 <__gethex+0x114>
 800997a:	4620      	mov	r0, r4
 800997c:	1e69      	subs	r1, r5, #1
 800997e:	f000 feda 	bl	800a736 <__any_on>
 8009982:	2800      	cmp	r0, #0
 8009984:	d1ed      	bne.n	8009962 <__gethex+0x292>
 8009986:	4621      	mov	r1, r4
 8009988:	4648      	mov	r0, r9
 800998a:	f000 fa99 	bl	8009ec0 <_Bfree>
 800998e:	2300      	movs	r3, #0
 8009990:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009992:	f04f 0850 	mov.w	r8, #80	; 0x50
 8009996:	6013      	str	r3, [r2, #0]
 8009998:	e724      	b.n	80097e4 <__gethex+0x114>
 800999a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800999c:	2b00      	cmp	r3, #0
 800999e:	d1f2      	bne.n	8009986 <__gethex+0x2b6>
 80099a0:	e7df      	b.n	8009962 <__gethex+0x292>
 80099a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d1dc      	bne.n	8009962 <__gethex+0x292>
 80099a8:	e7ed      	b.n	8009986 <__gethex+0x2b6>
 80099aa:	bf00      	nop
 80099ac:	0800d196 	.word	0x0800d196
 80099b0:	0800d43c 	.word	0x0800d43c
 80099b4:	0800d44d 	.word	0x0800d44d
 80099b8:	f106 38ff 	add.w	r8, r6, #4294967295
 80099bc:	f1bb 0f00 	cmp.w	fp, #0
 80099c0:	d133      	bne.n	8009a2a <__gethex+0x35a>
 80099c2:	f1b8 0f00 	cmp.w	r8, #0
 80099c6:	d004      	beq.n	80099d2 <__gethex+0x302>
 80099c8:	4641      	mov	r1, r8
 80099ca:	4620      	mov	r0, r4
 80099cc:	f000 feb3 	bl	800a736 <__any_on>
 80099d0:	4683      	mov	fp, r0
 80099d2:	2301      	movs	r3, #1
 80099d4:	ea4f 1268 	mov.w	r2, r8, asr #5
 80099d8:	f008 081f 	and.w	r8, r8, #31
 80099dc:	fa03 f308 	lsl.w	r3, r3, r8
 80099e0:	f04f 0802 	mov.w	r8, #2
 80099e4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80099e8:	4631      	mov	r1, r6
 80099ea:	4213      	tst	r3, r2
 80099ec:	4620      	mov	r0, r4
 80099ee:	bf18      	it	ne
 80099f0:	f04b 0b02 	orrne.w	fp, fp, #2
 80099f4:	1bad      	subs	r5, r5, r6
 80099f6:	f7ff fe03 	bl	8009600 <rshift>
 80099fa:	687e      	ldr	r6, [r7, #4]
 80099fc:	f1bb 0f00 	cmp.w	fp, #0
 8009a00:	d04a      	beq.n	8009a98 <__gethex+0x3c8>
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	2b02      	cmp	r3, #2
 8009a06:	d016      	beq.n	8009a36 <__gethex+0x366>
 8009a08:	2b03      	cmp	r3, #3
 8009a0a:	d018      	beq.n	8009a3e <__gethex+0x36e>
 8009a0c:	2b01      	cmp	r3, #1
 8009a0e:	d109      	bne.n	8009a24 <__gethex+0x354>
 8009a10:	f01b 0f02 	tst.w	fp, #2
 8009a14:	d006      	beq.n	8009a24 <__gethex+0x354>
 8009a16:	f8da 3000 	ldr.w	r3, [sl]
 8009a1a:	ea4b 0b03 	orr.w	fp, fp, r3
 8009a1e:	f01b 0f01 	tst.w	fp, #1
 8009a22:	d10f      	bne.n	8009a44 <__gethex+0x374>
 8009a24:	f048 0810 	orr.w	r8, r8, #16
 8009a28:	e036      	b.n	8009a98 <__gethex+0x3c8>
 8009a2a:	f04f 0b01 	mov.w	fp, #1
 8009a2e:	e7d0      	b.n	80099d2 <__gethex+0x302>
 8009a30:	f04f 0801 	mov.w	r8, #1
 8009a34:	e7e2      	b.n	80099fc <__gethex+0x32c>
 8009a36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009a38:	f1c3 0301 	rsb	r3, r3, #1
 8009a3c:	930f      	str	r3, [sp, #60]	; 0x3c
 8009a3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d0ef      	beq.n	8009a24 <__gethex+0x354>
 8009a44:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009a48:	f104 0214 	add.w	r2, r4, #20
 8009a4c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8009a50:	9301      	str	r3, [sp, #4]
 8009a52:	2300      	movs	r3, #0
 8009a54:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8009a58:	4694      	mov	ip, r2
 8009a5a:	f852 1b04 	ldr.w	r1, [r2], #4
 8009a5e:	f1b1 3fff 	cmp.w	r1, #4294967295
 8009a62:	d01e      	beq.n	8009aa2 <__gethex+0x3d2>
 8009a64:	3101      	adds	r1, #1
 8009a66:	f8cc 1000 	str.w	r1, [ip]
 8009a6a:	f1b8 0f02 	cmp.w	r8, #2
 8009a6e:	f104 0214 	add.w	r2, r4, #20
 8009a72:	d13d      	bne.n	8009af0 <__gethex+0x420>
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	3b01      	subs	r3, #1
 8009a78:	42ab      	cmp	r3, r5
 8009a7a:	d10b      	bne.n	8009a94 <__gethex+0x3c4>
 8009a7c:	2301      	movs	r3, #1
 8009a7e:	1169      	asrs	r1, r5, #5
 8009a80:	f005 051f 	and.w	r5, r5, #31
 8009a84:	fa03 f505 	lsl.w	r5, r3, r5
 8009a88:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009a8c:	421d      	tst	r5, r3
 8009a8e:	bf18      	it	ne
 8009a90:	f04f 0801 	movne.w	r8, #1
 8009a94:	f048 0820 	orr.w	r8, r8, #32
 8009a98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a9a:	601c      	str	r4, [r3, #0]
 8009a9c:	9b02      	ldr	r3, [sp, #8]
 8009a9e:	601e      	str	r6, [r3, #0]
 8009aa0:	e6a0      	b.n	80097e4 <__gethex+0x114>
 8009aa2:	4290      	cmp	r0, r2
 8009aa4:	f842 3c04 	str.w	r3, [r2, #-4]
 8009aa8:	d8d6      	bhi.n	8009a58 <__gethex+0x388>
 8009aaa:	68a2      	ldr	r2, [r4, #8]
 8009aac:	4593      	cmp	fp, r2
 8009aae:	db17      	blt.n	8009ae0 <__gethex+0x410>
 8009ab0:	6861      	ldr	r1, [r4, #4]
 8009ab2:	4648      	mov	r0, r9
 8009ab4:	3101      	adds	r1, #1
 8009ab6:	f000 f9c3 	bl	8009e40 <_Balloc>
 8009aba:	4682      	mov	sl, r0
 8009abc:	b918      	cbnz	r0, 8009ac6 <__gethex+0x3f6>
 8009abe:	4602      	mov	r2, r0
 8009ac0:	2184      	movs	r1, #132	; 0x84
 8009ac2:	4b1a      	ldr	r3, [pc, #104]	; (8009b2c <__gethex+0x45c>)
 8009ac4:	e6b1      	b.n	800982a <__gethex+0x15a>
 8009ac6:	6922      	ldr	r2, [r4, #16]
 8009ac8:	f104 010c 	add.w	r1, r4, #12
 8009acc:	3202      	adds	r2, #2
 8009ace:	0092      	lsls	r2, r2, #2
 8009ad0:	300c      	adds	r0, #12
 8009ad2:	f7fe fea8 	bl	8008826 <memcpy>
 8009ad6:	4621      	mov	r1, r4
 8009ad8:	4648      	mov	r0, r9
 8009ada:	f000 f9f1 	bl	8009ec0 <_Bfree>
 8009ade:	4654      	mov	r4, sl
 8009ae0:	6922      	ldr	r2, [r4, #16]
 8009ae2:	1c51      	adds	r1, r2, #1
 8009ae4:	6121      	str	r1, [r4, #16]
 8009ae6:	2101      	movs	r1, #1
 8009ae8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009aec:	6151      	str	r1, [r2, #20]
 8009aee:	e7bc      	b.n	8009a6a <__gethex+0x39a>
 8009af0:	6921      	ldr	r1, [r4, #16]
 8009af2:	4559      	cmp	r1, fp
 8009af4:	dd0b      	ble.n	8009b0e <__gethex+0x43e>
 8009af6:	2101      	movs	r1, #1
 8009af8:	4620      	mov	r0, r4
 8009afa:	f7ff fd81 	bl	8009600 <rshift>
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	3601      	adds	r6, #1
 8009b02:	42b3      	cmp	r3, r6
 8009b04:	f6ff aeda 	blt.w	80098bc <__gethex+0x1ec>
 8009b08:	f04f 0801 	mov.w	r8, #1
 8009b0c:	e7c2      	b.n	8009a94 <__gethex+0x3c4>
 8009b0e:	f015 051f 	ands.w	r5, r5, #31
 8009b12:	d0f9      	beq.n	8009b08 <__gethex+0x438>
 8009b14:	9b01      	ldr	r3, [sp, #4]
 8009b16:	f1c5 0520 	rsb	r5, r5, #32
 8009b1a:	441a      	add	r2, r3
 8009b1c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8009b20:	f000 fa80 	bl	800a024 <__hi0bits>
 8009b24:	42a8      	cmp	r0, r5
 8009b26:	dbe6      	blt.n	8009af6 <__gethex+0x426>
 8009b28:	e7ee      	b.n	8009b08 <__gethex+0x438>
 8009b2a:	bf00      	nop
 8009b2c:	0800d43c 	.word	0x0800d43c

08009b30 <L_shift>:
 8009b30:	f1c2 0208 	rsb	r2, r2, #8
 8009b34:	0092      	lsls	r2, r2, #2
 8009b36:	b570      	push	{r4, r5, r6, lr}
 8009b38:	f1c2 0620 	rsb	r6, r2, #32
 8009b3c:	6843      	ldr	r3, [r0, #4]
 8009b3e:	6804      	ldr	r4, [r0, #0]
 8009b40:	fa03 f506 	lsl.w	r5, r3, r6
 8009b44:	432c      	orrs	r4, r5
 8009b46:	40d3      	lsrs	r3, r2
 8009b48:	6004      	str	r4, [r0, #0]
 8009b4a:	f840 3f04 	str.w	r3, [r0, #4]!
 8009b4e:	4288      	cmp	r0, r1
 8009b50:	d3f4      	bcc.n	8009b3c <L_shift+0xc>
 8009b52:	bd70      	pop	{r4, r5, r6, pc}

08009b54 <__match>:
 8009b54:	b530      	push	{r4, r5, lr}
 8009b56:	6803      	ldr	r3, [r0, #0]
 8009b58:	3301      	adds	r3, #1
 8009b5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b5e:	b914      	cbnz	r4, 8009b66 <__match+0x12>
 8009b60:	6003      	str	r3, [r0, #0]
 8009b62:	2001      	movs	r0, #1
 8009b64:	bd30      	pop	{r4, r5, pc}
 8009b66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b6a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009b6e:	2d19      	cmp	r5, #25
 8009b70:	bf98      	it	ls
 8009b72:	3220      	addls	r2, #32
 8009b74:	42a2      	cmp	r2, r4
 8009b76:	d0f0      	beq.n	8009b5a <__match+0x6>
 8009b78:	2000      	movs	r0, #0
 8009b7a:	e7f3      	b.n	8009b64 <__match+0x10>

08009b7c <__hexnan>:
 8009b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b80:	2500      	movs	r5, #0
 8009b82:	680b      	ldr	r3, [r1, #0]
 8009b84:	4682      	mov	sl, r0
 8009b86:	115e      	asrs	r6, r3, #5
 8009b88:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009b8c:	f013 031f 	ands.w	r3, r3, #31
 8009b90:	bf18      	it	ne
 8009b92:	3604      	addne	r6, #4
 8009b94:	1f37      	subs	r7, r6, #4
 8009b96:	4690      	mov	r8, r2
 8009b98:	46b9      	mov	r9, r7
 8009b9a:	463c      	mov	r4, r7
 8009b9c:	46ab      	mov	fp, r5
 8009b9e:	b087      	sub	sp, #28
 8009ba0:	6801      	ldr	r1, [r0, #0]
 8009ba2:	9301      	str	r3, [sp, #4]
 8009ba4:	f846 5c04 	str.w	r5, [r6, #-4]
 8009ba8:	9502      	str	r5, [sp, #8]
 8009baa:	784a      	ldrb	r2, [r1, #1]
 8009bac:	1c4b      	adds	r3, r1, #1
 8009bae:	9303      	str	r3, [sp, #12]
 8009bb0:	b342      	cbz	r2, 8009c04 <__hexnan+0x88>
 8009bb2:	4610      	mov	r0, r2
 8009bb4:	9105      	str	r1, [sp, #20]
 8009bb6:	9204      	str	r2, [sp, #16]
 8009bb8:	f7ff fd75 	bl	80096a6 <__hexdig_fun>
 8009bbc:	2800      	cmp	r0, #0
 8009bbe:	d14f      	bne.n	8009c60 <__hexnan+0xe4>
 8009bc0:	9a04      	ldr	r2, [sp, #16]
 8009bc2:	9905      	ldr	r1, [sp, #20]
 8009bc4:	2a20      	cmp	r2, #32
 8009bc6:	d818      	bhi.n	8009bfa <__hexnan+0x7e>
 8009bc8:	9b02      	ldr	r3, [sp, #8]
 8009bca:	459b      	cmp	fp, r3
 8009bcc:	dd13      	ble.n	8009bf6 <__hexnan+0x7a>
 8009bce:	454c      	cmp	r4, r9
 8009bd0:	d206      	bcs.n	8009be0 <__hexnan+0x64>
 8009bd2:	2d07      	cmp	r5, #7
 8009bd4:	dc04      	bgt.n	8009be0 <__hexnan+0x64>
 8009bd6:	462a      	mov	r2, r5
 8009bd8:	4649      	mov	r1, r9
 8009bda:	4620      	mov	r0, r4
 8009bdc:	f7ff ffa8 	bl	8009b30 <L_shift>
 8009be0:	4544      	cmp	r4, r8
 8009be2:	d950      	bls.n	8009c86 <__hexnan+0x10a>
 8009be4:	2300      	movs	r3, #0
 8009be6:	f1a4 0904 	sub.w	r9, r4, #4
 8009bea:	f844 3c04 	str.w	r3, [r4, #-4]
 8009bee:	461d      	mov	r5, r3
 8009bf0:	464c      	mov	r4, r9
 8009bf2:	f8cd b008 	str.w	fp, [sp, #8]
 8009bf6:	9903      	ldr	r1, [sp, #12]
 8009bf8:	e7d7      	b.n	8009baa <__hexnan+0x2e>
 8009bfa:	2a29      	cmp	r2, #41	; 0x29
 8009bfc:	d155      	bne.n	8009caa <__hexnan+0x12e>
 8009bfe:	3102      	adds	r1, #2
 8009c00:	f8ca 1000 	str.w	r1, [sl]
 8009c04:	f1bb 0f00 	cmp.w	fp, #0
 8009c08:	d04f      	beq.n	8009caa <__hexnan+0x12e>
 8009c0a:	454c      	cmp	r4, r9
 8009c0c:	d206      	bcs.n	8009c1c <__hexnan+0xa0>
 8009c0e:	2d07      	cmp	r5, #7
 8009c10:	dc04      	bgt.n	8009c1c <__hexnan+0xa0>
 8009c12:	462a      	mov	r2, r5
 8009c14:	4649      	mov	r1, r9
 8009c16:	4620      	mov	r0, r4
 8009c18:	f7ff ff8a 	bl	8009b30 <L_shift>
 8009c1c:	4544      	cmp	r4, r8
 8009c1e:	d934      	bls.n	8009c8a <__hexnan+0x10e>
 8009c20:	4623      	mov	r3, r4
 8009c22:	f1a8 0204 	sub.w	r2, r8, #4
 8009c26:	f853 1b04 	ldr.w	r1, [r3], #4
 8009c2a:	429f      	cmp	r7, r3
 8009c2c:	f842 1f04 	str.w	r1, [r2, #4]!
 8009c30:	d2f9      	bcs.n	8009c26 <__hexnan+0xaa>
 8009c32:	1b3b      	subs	r3, r7, r4
 8009c34:	f023 0303 	bic.w	r3, r3, #3
 8009c38:	3304      	adds	r3, #4
 8009c3a:	3e03      	subs	r6, #3
 8009c3c:	3401      	adds	r4, #1
 8009c3e:	42a6      	cmp	r6, r4
 8009c40:	bf38      	it	cc
 8009c42:	2304      	movcc	r3, #4
 8009c44:	2200      	movs	r2, #0
 8009c46:	4443      	add	r3, r8
 8009c48:	f843 2b04 	str.w	r2, [r3], #4
 8009c4c:	429f      	cmp	r7, r3
 8009c4e:	d2fb      	bcs.n	8009c48 <__hexnan+0xcc>
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	b91b      	cbnz	r3, 8009c5c <__hexnan+0xe0>
 8009c54:	4547      	cmp	r7, r8
 8009c56:	d126      	bne.n	8009ca6 <__hexnan+0x12a>
 8009c58:	2301      	movs	r3, #1
 8009c5a:	603b      	str	r3, [r7, #0]
 8009c5c:	2005      	movs	r0, #5
 8009c5e:	e025      	b.n	8009cac <__hexnan+0x130>
 8009c60:	3501      	adds	r5, #1
 8009c62:	2d08      	cmp	r5, #8
 8009c64:	f10b 0b01 	add.w	fp, fp, #1
 8009c68:	dd06      	ble.n	8009c78 <__hexnan+0xfc>
 8009c6a:	4544      	cmp	r4, r8
 8009c6c:	d9c3      	bls.n	8009bf6 <__hexnan+0x7a>
 8009c6e:	2300      	movs	r3, #0
 8009c70:	2501      	movs	r5, #1
 8009c72:	f844 3c04 	str.w	r3, [r4, #-4]
 8009c76:	3c04      	subs	r4, #4
 8009c78:	6822      	ldr	r2, [r4, #0]
 8009c7a:	f000 000f 	and.w	r0, r0, #15
 8009c7e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009c82:	6020      	str	r0, [r4, #0]
 8009c84:	e7b7      	b.n	8009bf6 <__hexnan+0x7a>
 8009c86:	2508      	movs	r5, #8
 8009c88:	e7b5      	b.n	8009bf6 <__hexnan+0x7a>
 8009c8a:	9b01      	ldr	r3, [sp, #4]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d0df      	beq.n	8009c50 <__hexnan+0xd4>
 8009c90:	f04f 32ff 	mov.w	r2, #4294967295
 8009c94:	f1c3 0320 	rsb	r3, r3, #32
 8009c98:	40da      	lsrs	r2, r3
 8009c9a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009c9e:	4013      	ands	r3, r2
 8009ca0:	f846 3c04 	str.w	r3, [r6, #-4]
 8009ca4:	e7d4      	b.n	8009c50 <__hexnan+0xd4>
 8009ca6:	3f04      	subs	r7, #4
 8009ca8:	e7d2      	b.n	8009c50 <__hexnan+0xd4>
 8009caa:	2004      	movs	r0, #4
 8009cac:	b007      	add	sp, #28
 8009cae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08009cb4 <malloc>:
 8009cb4:	4b02      	ldr	r3, [pc, #8]	; (8009cc0 <malloc+0xc>)
 8009cb6:	4601      	mov	r1, r0
 8009cb8:	6818      	ldr	r0, [r3, #0]
 8009cba:	f000 b823 	b.w	8009d04 <_malloc_r>
 8009cbe:	bf00      	nop
 8009cc0:	2000021c 	.word	0x2000021c

08009cc4 <sbrk_aligned>:
 8009cc4:	b570      	push	{r4, r5, r6, lr}
 8009cc6:	4e0e      	ldr	r6, [pc, #56]	; (8009d00 <sbrk_aligned+0x3c>)
 8009cc8:	460c      	mov	r4, r1
 8009cca:	6831      	ldr	r1, [r6, #0]
 8009ccc:	4605      	mov	r5, r0
 8009cce:	b911      	cbnz	r1, 8009cd6 <sbrk_aligned+0x12>
 8009cd0:	f000 ff8e 	bl	800abf0 <_sbrk_r>
 8009cd4:	6030      	str	r0, [r6, #0]
 8009cd6:	4621      	mov	r1, r4
 8009cd8:	4628      	mov	r0, r5
 8009cda:	f000 ff89 	bl	800abf0 <_sbrk_r>
 8009cde:	1c43      	adds	r3, r0, #1
 8009ce0:	d00a      	beq.n	8009cf8 <sbrk_aligned+0x34>
 8009ce2:	1cc4      	adds	r4, r0, #3
 8009ce4:	f024 0403 	bic.w	r4, r4, #3
 8009ce8:	42a0      	cmp	r0, r4
 8009cea:	d007      	beq.n	8009cfc <sbrk_aligned+0x38>
 8009cec:	1a21      	subs	r1, r4, r0
 8009cee:	4628      	mov	r0, r5
 8009cf0:	f000 ff7e 	bl	800abf0 <_sbrk_r>
 8009cf4:	3001      	adds	r0, #1
 8009cf6:	d101      	bne.n	8009cfc <sbrk_aligned+0x38>
 8009cf8:	f04f 34ff 	mov.w	r4, #4294967295
 8009cfc:	4620      	mov	r0, r4
 8009cfe:	bd70      	pop	{r4, r5, r6, pc}
 8009d00:	20000a10 	.word	0x20000a10

08009d04 <_malloc_r>:
 8009d04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d08:	1ccd      	adds	r5, r1, #3
 8009d0a:	f025 0503 	bic.w	r5, r5, #3
 8009d0e:	3508      	adds	r5, #8
 8009d10:	2d0c      	cmp	r5, #12
 8009d12:	bf38      	it	cc
 8009d14:	250c      	movcc	r5, #12
 8009d16:	2d00      	cmp	r5, #0
 8009d18:	4607      	mov	r7, r0
 8009d1a:	db01      	blt.n	8009d20 <_malloc_r+0x1c>
 8009d1c:	42a9      	cmp	r1, r5
 8009d1e:	d905      	bls.n	8009d2c <_malloc_r+0x28>
 8009d20:	230c      	movs	r3, #12
 8009d22:	2600      	movs	r6, #0
 8009d24:	603b      	str	r3, [r7, #0]
 8009d26:	4630      	mov	r0, r6
 8009d28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d2c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009e00 <_malloc_r+0xfc>
 8009d30:	f000 f87a 	bl	8009e28 <__malloc_lock>
 8009d34:	f8d8 3000 	ldr.w	r3, [r8]
 8009d38:	461c      	mov	r4, r3
 8009d3a:	bb5c      	cbnz	r4, 8009d94 <_malloc_r+0x90>
 8009d3c:	4629      	mov	r1, r5
 8009d3e:	4638      	mov	r0, r7
 8009d40:	f7ff ffc0 	bl	8009cc4 <sbrk_aligned>
 8009d44:	1c43      	adds	r3, r0, #1
 8009d46:	4604      	mov	r4, r0
 8009d48:	d155      	bne.n	8009df6 <_malloc_r+0xf2>
 8009d4a:	f8d8 4000 	ldr.w	r4, [r8]
 8009d4e:	4626      	mov	r6, r4
 8009d50:	2e00      	cmp	r6, #0
 8009d52:	d145      	bne.n	8009de0 <_malloc_r+0xdc>
 8009d54:	2c00      	cmp	r4, #0
 8009d56:	d048      	beq.n	8009dea <_malloc_r+0xe6>
 8009d58:	6823      	ldr	r3, [r4, #0]
 8009d5a:	4631      	mov	r1, r6
 8009d5c:	4638      	mov	r0, r7
 8009d5e:	eb04 0903 	add.w	r9, r4, r3
 8009d62:	f000 ff45 	bl	800abf0 <_sbrk_r>
 8009d66:	4581      	cmp	r9, r0
 8009d68:	d13f      	bne.n	8009dea <_malloc_r+0xe6>
 8009d6a:	6821      	ldr	r1, [r4, #0]
 8009d6c:	4638      	mov	r0, r7
 8009d6e:	1a6d      	subs	r5, r5, r1
 8009d70:	4629      	mov	r1, r5
 8009d72:	f7ff ffa7 	bl	8009cc4 <sbrk_aligned>
 8009d76:	3001      	adds	r0, #1
 8009d78:	d037      	beq.n	8009dea <_malloc_r+0xe6>
 8009d7a:	6823      	ldr	r3, [r4, #0]
 8009d7c:	442b      	add	r3, r5
 8009d7e:	6023      	str	r3, [r4, #0]
 8009d80:	f8d8 3000 	ldr.w	r3, [r8]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d038      	beq.n	8009dfa <_malloc_r+0xf6>
 8009d88:	685a      	ldr	r2, [r3, #4]
 8009d8a:	42a2      	cmp	r2, r4
 8009d8c:	d12b      	bne.n	8009de6 <_malloc_r+0xe2>
 8009d8e:	2200      	movs	r2, #0
 8009d90:	605a      	str	r2, [r3, #4]
 8009d92:	e00f      	b.n	8009db4 <_malloc_r+0xb0>
 8009d94:	6822      	ldr	r2, [r4, #0]
 8009d96:	1b52      	subs	r2, r2, r5
 8009d98:	d41f      	bmi.n	8009dda <_malloc_r+0xd6>
 8009d9a:	2a0b      	cmp	r2, #11
 8009d9c:	d917      	bls.n	8009dce <_malloc_r+0xca>
 8009d9e:	1961      	adds	r1, r4, r5
 8009da0:	42a3      	cmp	r3, r4
 8009da2:	6025      	str	r5, [r4, #0]
 8009da4:	bf18      	it	ne
 8009da6:	6059      	strne	r1, [r3, #4]
 8009da8:	6863      	ldr	r3, [r4, #4]
 8009daa:	bf08      	it	eq
 8009dac:	f8c8 1000 	streq.w	r1, [r8]
 8009db0:	5162      	str	r2, [r4, r5]
 8009db2:	604b      	str	r3, [r1, #4]
 8009db4:	4638      	mov	r0, r7
 8009db6:	f104 060b 	add.w	r6, r4, #11
 8009dba:	f000 f83b 	bl	8009e34 <__malloc_unlock>
 8009dbe:	f026 0607 	bic.w	r6, r6, #7
 8009dc2:	1d23      	adds	r3, r4, #4
 8009dc4:	1af2      	subs	r2, r6, r3
 8009dc6:	d0ae      	beq.n	8009d26 <_malloc_r+0x22>
 8009dc8:	1b9b      	subs	r3, r3, r6
 8009dca:	50a3      	str	r3, [r4, r2]
 8009dcc:	e7ab      	b.n	8009d26 <_malloc_r+0x22>
 8009dce:	42a3      	cmp	r3, r4
 8009dd0:	6862      	ldr	r2, [r4, #4]
 8009dd2:	d1dd      	bne.n	8009d90 <_malloc_r+0x8c>
 8009dd4:	f8c8 2000 	str.w	r2, [r8]
 8009dd8:	e7ec      	b.n	8009db4 <_malloc_r+0xb0>
 8009dda:	4623      	mov	r3, r4
 8009ddc:	6864      	ldr	r4, [r4, #4]
 8009dde:	e7ac      	b.n	8009d3a <_malloc_r+0x36>
 8009de0:	4634      	mov	r4, r6
 8009de2:	6876      	ldr	r6, [r6, #4]
 8009de4:	e7b4      	b.n	8009d50 <_malloc_r+0x4c>
 8009de6:	4613      	mov	r3, r2
 8009de8:	e7cc      	b.n	8009d84 <_malloc_r+0x80>
 8009dea:	230c      	movs	r3, #12
 8009dec:	4638      	mov	r0, r7
 8009dee:	603b      	str	r3, [r7, #0]
 8009df0:	f000 f820 	bl	8009e34 <__malloc_unlock>
 8009df4:	e797      	b.n	8009d26 <_malloc_r+0x22>
 8009df6:	6025      	str	r5, [r4, #0]
 8009df8:	e7dc      	b.n	8009db4 <_malloc_r+0xb0>
 8009dfa:	605b      	str	r3, [r3, #4]
 8009dfc:	deff      	udf	#255	; 0xff
 8009dfe:	bf00      	nop
 8009e00:	20000a0c 	.word	0x20000a0c

08009e04 <__ascii_mbtowc>:
 8009e04:	b082      	sub	sp, #8
 8009e06:	b901      	cbnz	r1, 8009e0a <__ascii_mbtowc+0x6>
 8009e08:	a901      	add	r1, sp, #4
 8009e0a:	b142      	cbz	r2, 8009e1e <__ascii_mbtowc+0x1a>
 8009e0c:	b14b      	cbz	r3, 8009e22 <__ascii_mbtowc+0x1e>
 8009e0e:	7813      	ldrb	r3, [r2, #0]
 8009e10:	600b      	str	r3, [r1, #0]
 8009e12:	7812      	ldrb	r2, [r2, #0]
 8009e14:	1e10      	subs	r0, r2, #0
 8009e16:	bf18      	it	ne
 8009e18:	2001      	movne	r0, #1
 8009e1a:	b002      	add	sp, #8
 8009e1c:	4770      	bx	lr
 8009e1e:	4610      	mov	r0, r2
 8009e20:	e7fb      	b.n	8009e1a <__ascii_mbtowc+0x16>
 8009e22:	f06f 0001 	mvn.w	r0, #1
 8009e26:	e7f8      	b.n	8009e1a <__ascii_mbtowc+0x16>

08009e28 <__malloc_lock>:
 8009e28:	4801      	ldr	r0, [pc, #4]	; (8009e30 <__malloc_lock+0x8>)
 8009e2a:	f7fe bcec 	b.w	8008806 <__retarget_lock_acquire_recursive>
 8009e2e:	bf00      	nop
 8009e30:	20000a08 	.word	0x20000a08

08009e34 <__malloc_unlock>:
 8009e34:	4801      	ldr	r0, [pc, #4]	; (8009e3c <__malloc_unlock+0x8>)
 8009e36:	f7fe bce7 	b.w	8008808 <__retarget_lock_release_recursive>
 8009e3a:	bf00      	nop
 8009e3c:	20000a08 	.word	0x20000a08

08009e40 <_Balloc>:
 8009e40:	b570      	push	{r4, r5, r6, lr}
 8009e42:	69c6      	ldr	r6, [r0, #28]
 8009e44:	4604      	mov	r4, r0
 8009e46:	460d      	mov	r5, r1
 8009e48:	b976      	cbnz	r6, 8009e68 <_Balloc+0x28>
 8009e4a:	2010      	movs	r0, #16
 8009e4c:	f7ff ff32 	bl	8009cb4 <malloc>
 8009e50:	4602      	mov	r2, r0
 8009e52:	61e0      	str	r0, [r4, #28]
 8009e54:	b920      	cbnz	r0, 8009e60 <_Balloc+0x20>
 8009e56:	216b      	movs	r1, #107	; 0x6b
 8009e58:	4b17      	ldr	r3, [pc, #92]	; (8009eb8 <_Balloc+0x78>)
 8009e5a:	4818      	ldr	r0, [pc, #96]	; (8009ebc <_Balloc+0x7c>)
 8009e5c:	f7fe fcfc 	bl	8008858 <__assert_func>
 8009e60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009e64:	6006      	str	r6, [r0, #0]
 8009e66:	60c6      	str	r6, [r0, #12]
 8009e68:	69e6      	ldr	r6, [r4, #28]
 8009e6a:	68f3      	ldr	r3, [r6, #12]
 8009e6c:	b183      	cbz	r3, 8009e90 <_Balloc+0x50>
 8009e6e:	69e3      	ldr	r3, [r4, #28]
 8009e70:	68db      	ldr	r3, [r3, #12]
 8009e72:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009e76:	b9b8      	cbnz	r0, 8009ea8 <_Balloc+0x68>
 8009e78:	2101      	movs	r1, #1
 8009e7a:	fa01 f605 	lsl.w	r6, r1, r5
 8009e7e:	1d72      	adds	r2, r6, #5
 8009e80:	4620      	mov	r0, r4
 8009e82:	0092      	lsls	r2, r2, #2
 8009e84:	f000 fecb 	bl	800ac1e <_calloc_r>
 8009e88:	b160      	cbz	r0, 8009ea4 <_Balloc+0x64>
 8009e8a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009e8e:	e00e      	b.n	8009eae <_Balloc+0x6e>
 8009e90:	2221      	movs	r2, #33	; 0x21
 8009e92:	2104      	movs	r1, #4
 8009e94:	4620      	mov	r0, r4
 8009e96:	f000 fec2 	bl	800ac1e <_calloc_r>
 8009e9a:	69e3      	ldr	r3, [r4, #28]
 8009e9c:	60f0      	str	r0, [r6, #12]
 8009e9e:	68db      	ldr	r3, [r3, #12]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d1e4      	bne.n	8009e6e <_Balloc+0x2e>
 8009ea4:	2000      	movs	r0, #0
 8009ea6:	bd70      	pop	{r4, r5, r6, pc}
 8009ea8:	6802      	ldr	r2, [r0, #0]
 8009eaa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009eae:	2300      	movs	r3, #0
 8009eb0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009eb4:	e7f7      	b.n	8009ea6 <_Balloc+0x66>
 8009eb6:	bf00      	nop
 8009eb8:	0800d322 	.word	0x0800d322
 8009ebc:	0800d4ad 	.word	0x0800d4ad

08009ec0 <_Bfree>:
 8009ec0:	b570      	push	{r4, r5, r6, lr}
 8009ec2:	69c6      	ldr	r6, [r0, #28]
 8009ec4:	4605      	mov	r5, r0
 8009ec6:	460c      	mov	r4, r1
 8009ec8:	b976      	cbnz	r6, 8009ee8 <_Bfree+0x28>
 8009eca:	2010      	movs	r0, #16
 8009ecc:	f7ff fef2 	bl	8009cb4 <malloc>
 8009ed0:	4602      	mov	r2, r0
 8009ed2:	61e8      	str	r0, [r5, #28]
 8009ed4:	b920      	cbnz	r0, 8009ee0 <_Bfree+0x20>
 8009ed6:	218f      	movs	r1, #143	; 0x8f
 8009ed8:	4b08      	ldr	r3, [pc, #32]	; (8009efc <_Bfree+0x3c>)
 8009eda:	4809      	ldr	r0, [pc, #36]	; (8009f00 <_Bfree+0x40>)
 8009edc:	f7fe fcbc 	bl	8008858 <__assert_func>
 8009ee0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009ee4:	6006      	str	r6, [r0, #0]
 8009ee6:	60c6      	str	r6, [r0, #12]
 8009ee8:	b13c      	cbz	r4, 8009efa <_Bfree+0x3a>
 8009eea:	69eb      	ldr	r3, [r5, #28]
 8009eec:	6862      	ldr	r2, [r4, #4]
 8009eee:	68db      	ldr	r3, [r3, #12]
 8009ef0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009ef4:	6021      	str	r1, [r4, #0]
 8009ef6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009efa:	bd70      	pop	{r4, r5, r6, pc}
 8009efc:	0800d322 	.word	0x0800d322
 8009f00:	0800d4ad 	.word	0x0800d4ad

08009f04 <__multadd>:
 8009f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f08:	4607      	mov	r7, r0
 8009f0a:	460c      	mov	r4, r1
 8009f0c:	461e      	mov	r6, r3
 8009f0e:	2000      	movs	r0, #0
 8009f10:	690d      	ldr	r5, [r1, #16]
 8009f12:	f101 0c14 	add.w	ip, r1, #20
 8009f16:	f8dc 3000 	ldr.w	r3, [ip]
 8009f1a:	3001      	adds	r0, #1
 8009f1c:	b299      	uxth	r1, r3
 8009f1e:	fb02 6101 	mla	r1, r2, r1, r6
 8009f22:	0c1e      	lsrs	r6, r3, #16
 8009f24:	0c0b      	lsrs	r3, r1, #16
 8009f26:	fb02 3306 	mla	r3, r2, r6, r3
 8009f2a:	b289      	uxth	r1, r1
 8009f2c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009f30:	4285      	cmp	r5, r0
 8009f32:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009f36:	f84c 1b04 	str.w	r1, [ip], #4
 8009f3a:	dcec      	bgt.n	8009f16 <__multadd+0x12>
 8009f3c:	b30e      	cbz	r6, 8009f82 <__multadd+0x7e>
 8009f3e:	68a3      	ldr	r3, [r4, #8]
 8009f40:	42ab      	cmp	r3, r5
 8009f42:	dc19      	bgt.n	8009f78 <__multadd+0x74>
 8009f44:	6861      	ldr	r1, [r4, #4]
 8009f46:	4638      	mov	r0, r7
 8009f48:	3101      	adds	r1, #1
 8009f4a:	f7ff ff79 	bl	8009e40 <_Balloc>
 8009f4e:	4680      	mov	r8, r0
 8009f50:	b928      	cbnz	r0, 8009f5e <__multadd+0x5a>
 8009f52:	4602      	mov	r2, r0
 8009f54:	21ba      	movs	r1, #186	; 0xba
 8009f56:	4b0c      	ldr	r3, [pc, #48]	; (8009f88 <__multadd+0x84>)
 8009f58:	480c      	ldr	r0, [pc, #48]	; (8009f8c <__multadd+0x88>)
 8009f5a:	f7fe fc7d 	bl	8008858 <__assert_func>
 8009f5e:	6922      	ldr	r2, [r4, #16]
 8009f60:	f104 010c 	add.w	r1, r4, #12
 8009f64:	3202      	adds	r2, #2
 8009f66:	0092      	lsls	r2, r2, #2
 8009f68:	300c      	adds	r0, #12
 8009f6a:	f7fe fc5c 	bl	8008826 <memcpy>
 8009f6e:	4621      	mov	r1, r4
 8009f70:	4638      	mov	r0, r7
 8009f72:	f7ff ffa5 	bl	8009ec0 <_Bfree>
 8009f76:	4644      	mov	r4, r8
 8009f78:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009f7c:	3501      	adds	r5, #1
 8009f7e:	615e      	str	r6, [r3, #20]
 8009f80:	6125      	str	r5, [r4, #16]
 8009f82:	4620      	mov	r0, r4
 8009f84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f88:	0800d43c 	.word	0x0800d43c
 8009f8c:	0800d4ad 	.word	0x0800d4ad

08009f90 <__s2b>:
 8009f90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f94:	4615      	mov	r5, r2
 8009f96:	2209      	movs	r2, #9
 8009f98:	461f      	mov	r7, r3
 8009f9a:	3308      	adds	r3, #8
 8009f9c:	460c      	mov	r4, r1
 8009f9e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009fa2:	4606      	mov	r6, r0
 8009fa4:	2201      	movs	r2, #1
 8009fa6:	2100      	movs	r1, #0
 8009fa8:	429a      	cmp	r2, r3
 8009faa:	db09      	blt.n	8009fc0 <__s2b+0x30>
 8009fac:	4630      	mov	r0, r6
 8009fae:	f7ff ff47 	bl	8009e40 <_Balloc>
 8009fb2:	b940      	cbnz	r0, 8009fc6 <__s2b+0x36>
 8009fb4:	4602      	mov	r2, r0
 8009fb6:	21d3      	movs	r1, #211	; 0xd3
 8009fb8:	4b18      	ldr	r3, [pc, #96]	; (800a01c <__s2b+0x8c>)
 8009fba:	4819      	ldr	r0, [pc, #100]	; (800a020 <__s2b+0x90>)
 8009fbc:	f7fe fc4c 	bl	8008858 <__assert_func>
 8009fc0:	0052      	lsls	r2, r2, #1
 8009fc2:	3101      	adds	r1, #1
 8009fc4:	e7f0      	b.n	8009fa8 <__s2b+0x18>
 8009fc6:	9b08      	ldr	r3, [sp, #32]
 8009fc8:	2d09      	cmp	r5, #9
 8009fca:	6143      	str	r3, [r0, #20]
 8009fcc:	f04f 0301 	mov.w	r3, #1
 8009fd0:	6103      	str	r3, [r0, #16]
 8009fd2:	dd16      	ble.n	800a002 <__s2b+0x72>
 8009fd4:	f104 0909 	add.w	r9, r4, #9
 8009fd8:	46c8      	mov	r8, r9
 8009fda:	442c      	add	r4, r5
 8009fdc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009fe0:	4601      	mov	r1, r0
 8009fe2:	220a      	movs	r2, #10
 8009fe4:	4630      	mov	r0, r6
 8009fe6:	3b30      	subs	r3, #48	; 0x30
 8009fe8:	f7ff ff8c 	bl	8009f04 <__multadd>
 8009fec:	45a0      	cmp	r8, r4
 8009fee:	d1f5      	bne.n	8009fdc <__s2b+0x4c>
 8009ff0:	f1a5 0408 	sub.w	r4, r5, #8
 8009ff4:	444c      	add	r4, r9
 8009ff6:	1b2d      	subs	r5, r5, r4
 8009ff8:	1963      	adds	r3, r4, r5
 8009ffa:	42bb      	cmp	r3, r7
 8009ffc:	db04      	blt.n	800a008 <__s2b+0x78>
 8009ffe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a002:	2509      	movs	r5, #9
 800a004:	340a      	adds	r4, #10
 800a006:	e7f6      	b.n	8009ff6 <__s2b+0x66>
 800a008:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a00c:	4601      	mov	r1, r0
 800a00e:	220a      	movs	r2, #10
 800a010:	4630      	mov	r0, r6
 800a012:	3b30      	subs	r3, #48	; 0x30
 800a014:	f7ff ff76 	bl	8009f04 <__multadd>
 800a018:	e7ee      	b.n	8009ff8 <__s2b+0x68>
 800a01a:	bf00      	nop
 800a01c:	0800d43c 	.word	0x0800d43c
 800a020:	0800d4ad 	.word	0x0800d4ad

0800a024 <__hi0bits>:
 800a024:	0c02      	lsrs	r2, r0, #16
 800a026:	0412      	lsls	r2, r2, #16
 800a028:	4603      	mov	r3, r0
 800a02a:	b9ca      	cbnz	r2, 800a060 <__hi0bits+0x3c>
 800a02c:	0403      	lsls	r3, r0, #16
 800a02e:	2010      	movs	r0, #16
 800a030:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a034:	bf04      	itt	eq
 800a036:	021b      	lsleq	r3, r3, #8
 800a038:	3008      	addeq	r0, #8
 800a03a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a03e:	bf04      	itt	eq
 800a040:	011b      	lsleq	r3, r3, #4
 800a042:	3004      	addeq	r0, #4
 800a044:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a048:	bf04      	itt	eq
 800a04a:	009b      	lsleq	r3, r3, #2
 800a04c:	3002      	addeq	r0, #2
 800a04e:	2b00      	cmp	r3, #0
 800a050:	db05      	blt.n	800a05e <__hi0bits+0x3a>
 800a052:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800a056:	f100 0001 	add.w	r0, r0, #1
 800a05a:	bf08      	it	eq
 800a05c:	2020      	moveq	r0, #32
 800a05e:	4770      	bx	lr
 800a060:	2000      	movs	r0, #0
 800a062:	e7e5      	b.n	800a030 <__hi0bits+0xc>

0800a064 <__lo0bits>:
 800a064:	6803      	ldr	r3, [r0, #0]
 800a066:	4602      	mov	r2, r0
 800a068:	f013 0007 	ands.w	r0, r3, #7
 800a06c:	d00b      	beq.n	800a086 <__lo0bits+0x22>
 800a06e:	07d9      	lsls	r1, r3, #31
 800a070:	d421      	bmi.n	800a0b6 <__lo0bits+0x52>
 800a072:	0798      	lsls	r0, r3, #30
 800a074:	bf49      	itett	mi
 800a076:	085b      	lsrmi	r3, r3, #1
 800a078:	089b      	lsrpl	r3, r3, #2
 800a07a:	2001      	movmi	r0, #1
 800a07c:	6013      	strmi	r3, [r2, #0]
 800a07e:	bf5c      	itt	pl
 800a080:	2002      	movpl	r0, #2
 800a082:	6013      	strpl	r3, [r2, #0]
 800a084:	4770      	bx	lr
 800a086:	b299      	uxth	r1, r3
 800a088:	b909      	cbnz	r1, 800a08e <__lo0bits+0x2a>
 800a08a:	2010      	movs	r0, #16
 800a08c:	0c1b      	lsrs	r3, r3, #16
 800a08e:	b2d9      	uxtb	r1, r3
 800a090:	b909      	cbnz	r1, 800a096 <__lo0bits+0x32>
 800a092:	3008      	adds	r0, #8
 800a094:	0a1b      	lsrs	r3, r3, #8
 800a096:	0719      	lsls	r1, r3, #28
 800a098:	bf04      	itt	eq
 800a09a:	091b      	lsreq	r3, r3, #4
 800a09c:	3004      	addeq	r0, #4
 800a09e:	0799      	lsls	r1, r3, #30
 800a0a0:	bf04      	itt	eq
 800a0a2:	089b      	lsreq	r3, r3, #2
 800a0a4:	3002      	addeq	r0, #2
 800a0a6:	07d9      	lsls	r1, r3, #31
 800a0a8:	d403      	bmi.n	800a0b2 <__lo0bits+0x4e>
 800a0aa:	085b      	lsrs	r3, r3, #1
 800a0ac:	f100 0001 	add.w	r0, r0, #1
 800a0b0:	d003      	beq.n	800a0ba <__lo0bits+0x56>
 800a0b2:	6013      	str	r3, [r2, #0]
 800a0b4:	4770      	bx	lr
 800a0b6:	2000      	movs	r0, #0
 800a0b8:	4770      	bx	lr
 800a0ba:	2020      	movs	r0, #32
 800a0bc:	4770      	bx	lr
	...

0800a0c0 <__i2b>:
 800a0c0:	b510      	push	{r4, lr}
 800a0c2:	460c      	mov	r4, r1
 800a0c4:	2101      	movs	r1, #1
 800a0c6:	f7ff febb 	bl	8009e40 <_Balloc>
 800a0ca:	4602      	mov	r2, r0
 800a0cc:	b928      	cbnz	r0, 800a0da <__i2b+0x1a>
 800a0ce:	f240 1145 	movw	r1, #325	; 0x145
 800a0d2:	4b04      	ldr	r3, [pc, #16]	; (800a0e4 <__i2b+0x24>)
 800a0d4:	4804      	ldr	r0, [pc, #16]	; (800a0e8 <__i2b+0x28>)
 800a0d6:	f7fe fbbf 	bl	8008858 <__assert_func>
 800a0da:	2301      	movs	r3, #1
 800a0dc:	6144      	str	r4, [r0, #20]
 800a0de:	6103      	str	r3, [r0, #16]
 800a0e0:	bd10      	pop	{r4, pc}
 800a0e2:	bf00      	nop
 800a0e4:	0800d43c 	.word	0x0800d43c
 800a0e8:	0800d4ad 	.word	0x0800d4ad

0800a0ec <__multiply>:
 800a0ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0f0:	4691      	mov	r9, r2
 800a0f2:	690a      	ldr	r2, [r1, #16]
 800a0f4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a0f8:	460c      	mov	r4, r1
 800a0fa:	429a      	cmp	r2, r3
 800a0fc:	bfbe      	ittt	lt
 800a0fe:	460b      	movlt	r3, r1
 800a100:	464c      	movlt	r4, r9
 800a102:	4699      	movlt	r9, r3
 800a104:	6927      	ldr	r7, [r4, #16]
 800a106:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a10a:	68a3      	ldr	r3, [r4, #8]
 800a10c:	6861      	ldr	r1, [r4, #4]
 800a10e:	eb07 060a 	add.w	r6, r7, sl
 800a112:	42b3      	cmp	r3, r6
 800a114:	b085      	sub	sp, #20
 800a116:	bfb8      	it	lt
 800a118:	3101      	addlt	r1, #1
 800a11a:	f7ff fe91 	bl	8009e40 <_Balloc>
 800a11e:	b930      	cbnz	r0, 800a12e <__multiply+0x42>
 800a120:	4602      	mov	r2, r0
 800a122:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a126:	4b43      	ldr	r3, [pc, #268]	; (800a234 <__multiply+0x148>)
 800a128:	4843      	ldr	r0, [pc, #268]	; (800a238 <__multiply+0x14c>)
 800a12a:	f7fe fb95 	bl	8008858 <__assert_func>
 800a12e:	f100 0514 	add.w	r5, r0, #20
 800a132:	462b      	mov	r3, r5
 800a134:	2200      	movs	r2, #0
 800a136:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a13a:	4543      	cmp	r3, r8
 800a13c:	d321      	bcc.n	800a182 <__multiply+0x96>
 800a13e:	f104 0314 	add.w	r3, r4, #20
 800a142:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a146:	f109 0314 	add.w	r3, r9, #20
 800a14a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a14e:	9202      	str	r2, [sp, #8]
 800a150:	1b3a      	subs	r2, r7, r4
 800a152:	3a15      	subs	r2, #21
 800a154:	f022 0203 	bic.w	r2, r2, #3
 800a158:	3204      	adds	r2, #4
 800a15a:	f104 0115 	add.w	r1, r4, #21
 800a15e:	428f      	cmp	r7, r1
 800a160:	bf38      	it	cc
 800a162:	2204      	movcc	r2, #4
 800a164:	9201      	str	r2, [sp, #4]
 800a166:	9a02      	ldr	r2, [sp, #8]
 800a168:	9303      	str	r3, [sp, #12]
 800a16a:	429a      	cmp	r2, r3
 800a16c:	d80c      	bhi.n	800a188 <__multiply+0x9c>
 800a16e:	2e00      	cmp	r6, #0
 800a170:	dd03      	ble.n	800a17a <__multiply+0x8e>
 800a172:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a176:	2b00      	cmp	r3, #0
 800a178:	d05a      	beq.n	800a230 <__multiply+0x144>
 800a17a:	6106      	str	r6, [r0, #16]
 800a17c:	b005      	add	sp, #20
 800a17e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a182:	f843 2b04 	str.w	r2, [r3], #4
 800a186:	e7d8      	b.n	800a13a <__multiply+0x4e>
 800a188:	f8b3 a000 	ldrh.w	sl, [r3]
 800a18c:	f1ba 0f00 	cmp.w	sl, #0
 800a190:	d023      	beq.n	800a1da <__multiply+0xee>
 800a192:	46a9      	mov	r9, r5
 800a194:	f04f 0c00 	mov.w	ip, #0
 800a198:	f104 0e14 	add.w	lr, r4, #20
 800a19c:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a1a0:	f8d9 1000 	ldr.w	r1, [r9]
 800a1a4:	fa1f fb82 	uxth.w	fp, r2
 800a1a8:	b289      	uxth	r1, r1
 800a1aa:	fb0a 110b 	mla	r1, sl, fp, r1
 800a1ae:	4461      	add	r1, ip
 800a1b0:	f8d9 c000 	ldr.w	ip, [r9]
 800a1b4:	0c12      	lsrs	r2, r2, #16
 800a1b6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800a1ba:	fb0a c202 	mla	r2, sl, r2, ip
 800a1be:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a1c2:	b289      	uxth	r1, r1
 800a1c4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a1c8:	4577      	cmp	r7, lr
 800a1ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a1ce:	f849 1b04 	str.w	r1, [r9], #4
 800a1d2:	d8e3      	bhi.n	800a19c <__multiply+0xb0>
 800a1d4:	9a01      	ldr	r2, [sp, #4]
 800a1d6:	f845 c002 	str.w	ip, [r5, r2]
 800a1da:	9a03      	ldr	r2, [sp, #12]
 800a1dc:	3304      	adds	r3, #4
 800a1de:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a1e2:	f1b9 0f00 	cmp.w	r9, #0
 800a1e6:	d021      	beq.n	800a22c <__multiply+0x140>
 800a1e8:	46ae      	mov	lr, r5
 800a1ea:	f04f 0a00 	mov.w	sl, #0
 800a1ee:	6829      	ldr	r1, [r5, #0]
 800a1f0:	f104 0c14 	add.w	ip, r4, #20
 800a1f4:	f8bc b000 	ldrh.w	fp, [ip]
 800a1f8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a1fc:	b289      	uxth	r1, r1
 800a1fe:	fb09 220b 	mla	r2, r9, fp, r2
 800a202:	4452      	add	r2, sl
 800a204:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a208:	f84e 1b04 	str.w	r1, [lr], #4
 800a20c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a210:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a214:	f8be 1000 	ldrh.w	r1, [lr]
 800a218:	4567      	cmp	r7, ip
 800a21a:	fb09 110a 	mla	r1, r9, sl, r1
 800a21e:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a222:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a226:	d8e5      	bhi.n	800a1f4 <__multiply+0x108>
 800a228:	9a01      	ldr	r2, [sp, #4]
 800a22a:	50a9      	str	r1, [r5, r2]
 800a22c:	3504      	adds	r5, #4
 800a22e:	e79a      	b.n	800a166 <__multiply+0x7a>
 800a230:	3e01      	subs	r6, #1
 800a232:	e79c      	b.n	800a16e <__multiply+0x82>
 800a234:	0800d43c 	.word	0x0800d43c
 800a238:	0800d4ad 	.word	0x0800d4ad

0800a23c <__pow5mult>:
 800a23c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a240:	4615      	mov	r5, r2
 800a242:	f012 0203 	ands.w	r2, r2, #3
 800a246:	4606      	mov	r6, r0
 800a248:	460f      	mov	r7, r1
 800a24a:	d007      	beq.n	800a25c <__pow5mult+0x20>
 800a24c:	4c25      	ldr	r4, [pc, #148]	; (800a2e4 <__pow5mult+0xa8>)
 800a24e:	3a01      	subs	r2, #1
 800a250:	2300      	movs	r3, #0
 800a252:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a256:	f7ff fe55 	bl	8009f04 <__multadd>
 800a25a:	4607      	mov	r7, r0
 800a25c:	10ad      	asrs	r5, r5, #2
 800a25e:	d03d      	beq.n	800a2dc <__pow5mult+0xa0>
 800a260:	69f4      	ldr	r4, [r6, #28]
 800a262:	b97c      	cbnz	r4, 800a284 <__pow5mult+0x48>
 800a264:	2010      	movs	r0, #16
 800a266:	f7ff fd25 	bl	8009cb4 <malloc>
 800a26a:	4602      	mov	r2, r0
 800a26c:	61f0      	str	r0, [r6, #28]
 800a26e:	b928      	cbnz	r0, 800a27c <__pow5mult+0x40>
 800a270:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a274:	4b1c      	ldr	r3, [pc, #112]	; (800a2e8 <__pow5mult+0xac>)
 800a276:	481d      	ldr	r0, [pc, #116]	; (800a2ec <__pow5mult+0xb0>)
 800a278:	f7fe faee 	bl	8008858 <__assert_func>
 800a27c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a280:	6004      	str	r4, [r0, #0]
 800a282:	60c4      	str	r4, [r0, #12]
 800a284:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a288:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a28c:	b94c      	cbnz	r4, 800a2a2 <__pow5mult+0x66>
 800a28e:	f240 2171 	movw	r1, #625	; 0x271
 800a292:	4630      	mov	r0, r6
 800a294:	f7ff ff14 	bl	800a0c0 <__i2b>
 800a298:	2300      	movs	r3, #0
 800a29a:	4604      	mov	r4, r0
 800a29c:	f8c8 0008 	str.w	r0, [r8, #8]
 800a2a0:	6003      	str	r3, [r0, #0]
 800a2a2:	f04f 0900 	mov.w	r9, #0
 800a2a6:	07eb      	lsls	r3, r5, #31
 800a2a8:	d50a      	bpl.n	800a2c0 <__pow5mult+0x84>
 800a2aa:	4639      	mov	r1, r7
 800a2ac:	4622      	mov	r2, r4
 800a2ae:	4630      	mov	r0, r6
 800a2b0:	f7ff ff1c 	bl	800a0ec <__multiply>
 800a2b4:	4680      	mov	r8, r0
 800a2b6:	4639      	mov	r1, r7
 800a2b8:	4630      	mov	r0, r6
 800a2ba:	f7ff fe01 	bl	8009ec0 <_Bfree>
 800a2be:	4647      	mov	r7, r8
 800a2c0:	106d      	asrs	r5, r5, #1
 800a2c2:	d00b      	beq.n	800a2dc <__pow5mult+0xa0>
 800a2c4:	6820      	ldr	r0, [r4, #0]
 800a2c6:	b938      	cbnz	r0, 800a2d8 <__pow5mult+0x9c>
 800a2c8:	4622      	mov	r2, r4
 800a2ca:	4621      	mov	r1, r4
 800a2cc:	4630      	mov	r0, r6
 800a2ce:	f7ff ff0d 	bl	800a0ec <__multiply>
 800a2d2:	6020      	str	r0, [r4, #0]
 800a2d4:	f8c0 9000 	str.w	r9, [r0]
 800a2d8:	4604      	mov	r4, r0
 800a2da:	e7e4      	b.n	800a2a6 <__pow5mult+0x6a>
 800a2dc:	4638      	mov	r0, r7
 800a2de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2e2:	bf00      	nop
 800a2e4:	0800d5f8 	.word	0x0800d5f8
 800a2e8:	0800d322 	.word	0x0800d322
 800a2ec:	0800d4ad 	.word	0x0800d4ad

0800a2f0 <__lshift>:
 800a2f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2f4:	460c      	mov	r4, r1
 800a2f6:	4607      	mov	r7, r0
 800a2f8:	4691      	mov	r9, r2
 800a2fa:	6923      	ldr	r3, [r4, #16]
 800a2fc:	6849      	ldr	r1, [r1, #4]
 800a2fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a302:	68a3      	ldr	r3, [r4, #8]
 800a304:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a308:	f108 0601 	add.w	r6, r8, #1
 800a30c:	42b3      	cmp	r3, r6
 800a30e:	db0b      	blt.n	800a328 <__lshift+0x38>
 800a310:	4638      	mov	r0, r7
 800a312:	f7ff fd95 	bl	8009e40 <_Balloc>
 800a316:	4605      	mov	r5, r0
 800a318:	b948      	cbnz	r0, 800a32e <__lshift+0x3e>
 800a31a:	4602      	mov	r2, r0
 800a31c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a320:	4b27      	ldr	r3, [pc, #156]	; (800a3c0 <__lshift+0xd0>)
 800a322:	4828      	ldr	r0, [pc, #160]	; (800a3c4 <__lshift+0xd4>)
 800a324:	f7fe fa98 	bl	8008858 <__assert_func>
 800a328:	3101      	adds	r1, #1
 800a32a:	005b      	lsls	r3, r3, #1
 800a32c:	e7ee      	b.n	800a30c <__lshift+0x1c>
 800a32e:	2300      	movs	r3, #0
 800a330:	f100 0114 	add.w	r1, r0, #20
 800a334:	f100 0210 	add.w	r2, r0, #16
 800a338:	4618      	mov	r0, r3
 800a33a:	4553      	cmp	r3, sl
 800a33c:	db33      	blt.n	800a3a6 <__lshift+0xb6>
 800a33e:	6920      	ldr	r0, [r4, #16]
 800a340:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a344:	f104 0314 	add.w	r3, r4, #20
 800a348:	f019 091f 	ands.w	r9, r9, #31
 800a34c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a350:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a354:	d02b      	beq.n	800a3ae <__lshift+0xbe>
 800a356:	468a      	mov	sl, r1
 800a358:	2200      	movs	r2, #0
 800a35a:	f1c9 0e20 	rsb	lr, r9, #32
 800a35e:	6818      	ldr	r0, [r3, #0]
 800a360:	fa00 f009 	lsl.w	r0, r0, r9
 800a364:	4310      	orrs	r0, r2
 800a366:	f84a 0b04 	str.w	r0, [sl], #4
 800a36a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a36e:	459c      	cmp	ip, r3
 800a370:	fa22 f20e 	lsr.w	r2, r2, lr
 800a374:	d8f3      	bhi.n	800a35e <__lshift+0x6e>
 800a376:	ebac 0304 	sub.w	r3, ip, r4
 800a37a:	3b15      	subs	r3, #21
 800a37c:	f023 0303 	bic.w	r3, r3, #3
 800a380:	3304      	adds	r3, #4
 800a382:	f104 0015 	add.w	r0, r4, #21
 800a386:	4584      	cmp	ip, r0
 800a388:	bf38      	it	cc
 800a38a:	2304      	movcc	r3, #4
 800a38c:	50ca      	str	r2, [r1, r3]
 800a38e:	b10a      	cbz	r2, 800a394 <__lshift+0xa4>
 800a390:	f108 0602 	add.w	r6, r8, #2
 800a394:	3e01      	subs	r6, #1
 800a396:	4638      	mov	r0, r7
 800a398:	4621      	mov	r1, r4
 800a39a:	612e      	str	r6, [r5, #16]
 800a39c:	f7ff fd90 	bl	8009ec0 <_Bfree>
 800a3a0:	4628      	mov	r0, r5
 800a3a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3a6:	f842 0f04 	str.w	r0, [r2, #4]!
 800a3aa:	3301      	adds	r3, #1
 800a3ac:	e7c5      	b.n	800a33a <__lshift+0x4a>
 800a3ae:	3904      	subs	r1, #4
 800a3b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3b4:	459c      	cmp	ip, r3
 800a3b6:	f841 2f04 	str.w	r2, [r1, #4]!
 800a3ba:	d8f9      	bhi.n	800a3b0 <__lshift+0xc0>
 800a3bc:	e7ea      	b.n	800a394 <__lshift+0xa4>
 800a3be:	bf00      	nop
 800a3c0:	0800d43c 	.word	0x0800d43c
 800a3c4:	0800d4ad 	.word	0x0800d4ad

0800a3c8 <__mcmp>:
 800a3c8:	4603      	mov	r3, r0
 800a3ca:	690a      	ldr	r2, [r1, #16]
 800a3cc:	6900      	ldr	r0, [r0, #16]
 800a3ce:	b530      	push	{r4, r5, lr}
 800a3d0:	1a80      	subs	r0, r0, r2
 800a3d2:	d10d      	bne.n	800a3f0 <__mcmp+0x28>
 800a3d4:	3314      	adds	r3, #20
 800a3d6:	3114      	adds	r1, #20
 800a3d8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a3dc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a3e0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a3e4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a3e8:	4295      	cmp	r5, r2
 800a3ea:	d002      	beq.n	800a3f2 <__mcmp+0x2a>
 800a3ec:	d304      	bcc.n	800a3f8 <__mcmp+0x30>
 800a3ee:	2001      	movs	r0, #1
 800a3f0:	bd30      	pop	{r4, r5, pc}
 800a3f2:	42a3      	cmp	r3, r4
 800a3f4:	d3f4      	bcc.n	800a3e0 <__mcmp+0x18>
 800a3f6:	e7fb      	b.n	800a3f0 <__mcmp+0x28>
 800a3f8:	f04f 30ff 	mov.w	r0, #4294967295
 800a3fc:	e7f8      	b.n	800a3f0 <__mcmp+0x28>
	...

0800a400 <__mdiff>:
 800a400:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a404:	460d      	mov	r5, r1
 800a406:	4607      	mov	r7, r0
 800a408:	4611      	mov	r1, r2
 800a40a:	4628      	mov	r0, r5
 800a40c:	4614      	mov	r4, r2
 800a40e:	f7ff ffdb 	bl	800a3c8 <__mcmp>
 800a412:	1e06      	subs	r6, r0, #0
 800a414:	d111      	bne.n	800a43a <__mdiff+0x3a>
 800a416:	4631      	mov	r1, r6
 800a418:	4638      	mov	r0, r7
 800a41a:	f7ff fd11 	bl	8009e40 <_Balloc>
 800a41e:	4602      	mov	r2, r0
 800a420:	b928      	cbnz	r0, 800a42e <__mdiff+0x2e>
 800a422:	f240 2137 	movw	r1, #567	; 0x237
 800a426:	4b3a      	ldr	r3, [pc, #232]	; (800a510 <__mdiff+0x110>)
 800a428:	483a      	ldr	r0, [pc, #232]	; (800a514 <__mdiff+0x114>)
 800a42a:	f7fe fa15 	bl	8008858 <__assert_func>
 800a42e:	2301      	movs	r3, #1
 800a430:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a434:	4610      	mov	r0, r2
 800a436:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a43a:	bfa4      	itt	ge
 800a43c:	4623      	movge	r3, r4
 800a43e:	462c      	movge	r4, r5
 800a440:	4638      	mov	r0, r7
 800a442:	6861      	ldr	r1, [r4, #4]
 800a444:	bfa6      	itte	ge
 800a446:	461d      	movge	r5, r3
 800a448:	2600      	movge	r6, #0
 800a44a:	2601      	movlt	r6, #1
 800a44c:	f7ff fcf8 	bl	8009e40 <_Balloc>
 800a450:	4602      	mov	r2, r0
 800a452:	b918      	cbnz	r0, 800a45c <__mdiff+0x5c>
 800a454:	f240 2145 	movw	r1, #581	; 0x245
 800a458:	4b2d      	ldr	r3, [pc, #180]	; (800a510 <__mdiff+0x110>)
 800a45a:	e7e5      	b.n	800a428 <__mdiff+0x28>
 800a45c:	f102 0814 	add.w	r8, r2, #20
 800a460:	46c2      	mov	sl, r8
 800a462:	f04f 0c00 	mov.w	ip, #0
 800a466:	6927      	ldr	r7, [r4, #16]
 800a468:	60c6      	str	r6, [r0, #12]
 800a46a:	692e      	ldr	r6, [r5, #16]
 800a46c:	f104 0014 	add.w	r0, r4, #20
 800a470:	f105 0914 	add.w	r9, r5, #20
 800a474:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800a478:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a47c:	3410      	adds	r4, #16
 800a47e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800a482:	f859 3b04 	ldr.w	r3, [r9], #4
 800a486:	fa1f f18b 	uxth.w	r1, fp
 800a48a:	4461      	add	r1, ip
 800a48c:	fa1f fc83 	uxth.w	ip, r3
 800a490:	0c1b      	lsrs	r3, r3, #16
 800a492:	eba1 010c 	sub.w	r1, r1, ip
 800a496:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a49a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a49e:	b289      	uxth	r1, r1
 800a4a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800a4a4:	454e      	cmp	r6, r9
 800a4a6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800a4aa:	f84a 1b04 	str.w	r1, [sl], #4
 800a4ae:	d8e6      	bhi.n	800a47e <__mdiff+0x7e>
 800a4b0:	1b73      	subs	r3, r6, r5
 800a4b2:	3b15      	subs	r3, #21
 800a4b4:	f023 0303 	bic.w	r3, r3, #3
 800a4b8:	3515      	adds	r5, #21
 800a4ba:	3304      	adds	r3, #4
 800a4bc:	42ae      	cmp	r6, r5
 800a4be:	bf38      	it	cc
 800a4c0:	2304      	movcc	r3, #4
 800a4c2:	4418      	add	r0, r3
 800a4c4:	4443      	add	r3, r8
 800a4c6:	461e      	mov	r6, r3
 800a4c8:	4605      	mov	r5, r0
 800a4ca:	4575      	cmp	r5, lr
 800a4cc:	d30e      	bcc.n	800a4ec <__mdiff+0xec>
 800a4ce:	f10e 0103 	add.w	r1, lr, #3
 800a4d2:	1a09      	subs	r1, r1, r0
 800a4d4:	f021 0103 	bic.w	r1, r1, #3
 800a4d8:	3803      	subs	r0, #3
 800a4da:	4586      	cmp	lr, r0
 800a4dc:	bf38      	it	cc
 800a4de:	2100      	movcc	r1, #0
 800a4e0:	440b      	add	r3, r1
 800a4e2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a4e6:	b189      	cbz	r1, 800a50c <__mdiff+0x10c>
 800a4e8:	6117      	str	r7, [r2, #16]
 800a4ea:	e7a3      	b.n	800a434 <__mdiff+0x34>
 800a4ec:	f855 8b04 	ldr.w	r8, [r5], #4
 800a4f0:	fa1f f188 	uxth.w	r1, r8
 800a4f4:	4461      	add	r1, ip
 800a4f6:	140c      	asrs	r4, r1, #16
 800a4f8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a4fc:	b289      	uxth	r1, r1
 800a4fe:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a502:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800a506:	f846 1b04 	str.w	r1, [r6], #4
 800a50a:	e7de      	b.n	800a4ca <__mdiff+0xca>
 800a50c:	3f01      	subs	r7, #1
 800a50e:	e7e8      	b.n	800a4e2 <__mdiff+0xe2>
 800a510:	0800d43c 	.word	0x0800d43c
 800a514:	0800d4ad 	.word	0x0800d4ad

0800a518 <__ulp>:
 800a518:	4b0e      	ldr	r3, [pc, #56]	; (800a554 <__ulp+0x3c>)
 800a51a:	400b      	ands	r3, r1
 800a51c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800a520:	2b00      	cmp	r3, #0
 800a522:	dc08      	bgt.n	800a536 <__ulp+0x1e>
 800a524:	425b      	negs	r3, r3
 800a526:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800a52a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a52e:	da04      	bge.n	800a53a <__ulp+0x22>
 800a530:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a534:	4113      	asrs	r3, r2
 800a536:	2200      	movs	r2, #0
 800a538:	e008      	b.n	800a54c <__ulp+0x34>
 800a53a:	f1a2 0314 	sub.w	r3, r2, #20
 800a53e:	2b1e      	cmp	r3, #30
 800a540:	bfd6      	itet	le
 800a542:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800a546:	2201      	movgt	r2, #1
 800a548:	40da      	lsrle	r2, r3
 800a54a:	2300      	movs	r3, #0
 800a54c:	4619      	mov	r1, r3
 800a54e:	4610      	mov	r0, r2
 800a550:	4770      	bx	lr
 800a552:	bf00      	nop
 800a554:	7ff00000 	.word	0x7ff00000

0800a558 <__b2d>:
 800a558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a55a:	6905      	ldr	r5, [r0, #16]
 800a55c:	f100 0714 	add.w	r7, r0, #20
 800a560:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a564:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a568:	1f2e      	subs	r6, r5, #4
 800a56a:	4620      	mov	r0, r4
 800a56c:	f7ff fd5a 	bl	800a024 <__hi0bits>
 800a570:	f1c0 0220 	rsb	r2, r0, #32
 800a574:	280a      	cmp	r0, #10
 800a576:	4603      	mov	r3, r0
 800a578:	f8df c068 	ldr.w	ip, [pc, #104]	; 800a5e4 <__b2d+0x8c>
 800a57c:	600a      	str	r2, [r1, #0]
 800a57e:	dc12      	bgt.n	800a5a6 <__b2d+0x4e>
 800a580:	f1c0 0e0b 	rsb	lr, r0, #11
 800a584:	fa24 f20e 	lsr.w	r2, r4, lr
 800a588:	42b7      	cmp	r7, r6
 800a58a:	ea42 010c 	orr.w	r1, r2, ip
 800a58e:	bf2c      	ite	cs
 800a590:	2200      	movcs	r2, #0
 800a592:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800a596:	3315      	adds	r3, #21
 800a598:	fa04 f303 	lsl.w	r3, r4, r3
 800a59c:	fa22 f20e 	lsr.w	r2, r2, lr
 800a5a0:	431a      	orrs	r2, r3
 800a5a2:	4610      	mov	r0, r2
 800a5a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5a6:	42b7      	cmp	r7, r6
 800a5a8:	bf2e      	itee	cs
 800a5aa:	2200      	movcs	r2, #0
 800a5ac:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800a5b0:	f1a5 0608 	subcc.w	r6, r5, #8
 800a5b4:	3b0b      	subs	r3, #11
 800a5b6:	d012      	beq.n	800a5de <__b2d+0x86>
 800a5b8:	f1c3 0520 	rsb	r5, r3, #32
 800a5bc:	fa22 f105 	lsr.w	r1, r2, r5
 800a5c0:	409c      	lsls	r4, r3
 800a5c2:	430c      	orrs	r4, r1
 800a5c4:	42be      	cmp	r6, r7
 800a5c6:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 800a5ca:	bf94      	ite	ls
 800a5cc:	2400      	movls	r4, #0
 800a5ce:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a5d2:	409a      	lsls	r2, r3
 800a5d4:	40ec      	lsrs	r4, r5
 800a5d6:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800a5da:	4322      	orrs	r2, r4
 800a5dc:	e7e1      	b.n	800a5a2 <__b2d+0x4a>
 800a5de:	ea44 010c 	orr.w	r1, r4, ip
 800a5e2:	e7de      	b.n	800a5a2 <__b2d+0x4a>
 800a5e4:	3ff00000 	.word	0x3ff00000

0800a5e8 <__d2b>:
 800a5e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a5ea:	2101      	movs	r1, #1
 800a5ec:	4617      	mov	r7, r2
 800a5ee:	461c      	mov	r4, r3
 800a5f0:	9e08      	ldr	r6, [sp, #32]
 800a5f2:	f7ff fc25 	bl	8009e40 <_Balloc>
 800a5f6:	4605      	mov	r5, r0
 800a5f8:	b930      	cbnz	r0, 800a608 <__d2b+0x20>
 800a5fa:	4602      	mov	r2, r0
 800a5fc:	f240 310f 	movw	r1, #783	; 0x30f
 800a600:	4b22      	ldr	r3, [pc, #136]	; (800a68c <__d2b+0xa4>)
 800a602:	4823      	ldr	r0, [pc, #140]	; (800a690 <__d2b+0xa8>)
 800a604:	f7fe f928 	bl	8008858 <__assert_func>
 800a608:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800a60c:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800a610:	bb24      	cbnz	r4, 800a65c <__d2b+0x74>
 800a612:	2f00      	cmp	r7, #0
 800a614:	9301      	str	r3, [sp, #4]
 800a616:	d026      	beq.n	800a666 <__d2b+0x7e>
 800a618:	4668      	mov	r0, sp
 800a61a:	9700      	str	r7, [sp, #0]
 800a61c:	f7ff fd22 	bl	800a064 <__lo0bits>
 800a620:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a624:	b1e8      	cbz	r0, 800a662 <__d2b+0x7a>
 800a626:	f1c0 0320 	rsb	r3, r0, #32
 800a62a:	fa02 f303 	lsl.w	r3, r2, r3
 800a62e:	430b      	orrs	r3, r1
 800a630:	40c2      	lsrs	r2, r0
 800a632:	616b      	str	r3, [r5, #20]
 800a634:	9201      	str	r2, [sp, #4]
 800a636:	9b01      	ldr	r3, [sp, #4]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	bf14      	ite	ne
 800a63c:	2102      	movne	r1, #2
 800a63e:	2101      	moveq	r1, #1
 800a640:	61ab      	str	r3, [r5, #24]
 800a642:	6129      	str	r1, [r5, #16]
 800a644:	b1bc      	cbz	r4, 800a676 <__d2b+0x8e>
 800a646:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a64a:	4404      	add	r4, r0
 800a64c:	6034      	str	r4, [r6, #0]
 800a64e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a652:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a654:	6018      	str	r0, [r3, #0]
 800a656:	4628      	mov	r0, r5
 800a658:	b003      	add	sp, #12
 800a65a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a65c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a660:	e7d7      	b.n	800a612 <__d2b+0x2a>
 800a662:	6169      	str	r1, [r5, #20]
 800a664:	e7e7      	b.n	800a636 <__d2b+0x4e>
 800a666:	a801      	add	r0, sp, #4
 800a668:	f7ff fcfc 	bl	800a064 <__lo0bits>
 800a66c:	9b01      	ldr	r3, [sp, #4]
 800a66e:	2101      	movs	r1, #1
 800a670:	616b      	str	r3, [r5, #20]
 800a672:	3020      	adds	r0, #32
 800a674:	e7e5      	b.n	800a642 <__d2b+0x5a>
 800a676:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a67a:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800a67e:	6030      	str	r0, [r6, #0]
 800a680:	6918      	ldr	r0, [r3, #16]
 800a682:	f7ff fccf 	bl	800a024 <__hi0bits>
 800a686:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a68a:	e7e2      	b.n	800a652 <__d2b+0x6a>
 800a68c:	0800d43c 	.word	0x0800d43c
 800a690:	0800d4ad 	.word	0x0800d4ad

0800a694 <__ratio>:
 800a694:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a698:	4688      	mov	r8, r1
 800a69a:	4669      	mov	r1, sp
 800a69c:	4681      	mov	r9, r0
 800a69e:	f7ff ff5b 	bl	800a558 <__b2d>
 800a6a2:	460f      	mov	r7, r1
 800a6a4:	4604      	mov	r4, r0
 800a6a6:	460d      	mov	r5, r1
 800a6a8:	4640      	mov	r0, r8
 800a6aa:	a901      	add	r1, sp, #4
 800a6ac:	f7ff ff54 	bl	800a558 <__b2d>
 800a6b0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a6b4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a6b8:	468b      	mov	fp, r1
 800a6ba:	eba3 0c02 	sub.w	ip, r3, r2
 800a6be:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a6c2:	1a9b      	subs	r3, r3, r2
 800a6c4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	bfd5      	itete	le
 800a6cc:	460a      	movle	r2, r1
 800a6ce:	462a      	movgt	r2, r5
 800a6d0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a6d4:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a6d8:	bfd8      	it	le
 800a6da:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a6de:	465b      	mov	r3, fp
 800a6e0:	4602      	mov	r2, r0
 800a6e2:	4639      	mov	r1, r7
 800a6e4:	4620      	mov	r0, r4
 800a6e6:	f7f6 f821 	bl	800072c <__aeabi_ddiv>
 800a6ea:	b003      	add	sp, #12
 800a6ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a6f0 <__copybits>:
 800a6f0:	3901      	subs	r1, #1
 800a6f2:	b570      	push	{r4, r5, r6, lr}
 800a6f4:	1149      	asrs	r1, r1, #5
 800a6f6:	6914      	ldr	r4, [r2, #16]
 800a6f8:	3101      	adds	r1, #1
 800a6fa:	f102 0314 	add.w	r3, r2, #20
 800a6fe:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a702:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a706:	1f05      	subs	r5, r0, #4
 800a708:	42a3      	cmp	r3, r4
 800a70a:	d30c      	bcc.n	800a726 <__copybits+0x36>
 800a70c:	1aa3      	subs	r3, r4, r2
 800a70e:	3b11      	subs	r3, #17
 800a710:	f023 0303 	bic.w	r3, r3, #3
 800a714:	3211      	adds	r2, #17
 800a716:	42a2      	cmp	r2, r4
 800a718:	bf88      	it	hi
 800a71a:	2300      	movhi	r3, #0
 800a71c:	4418      	add	r0, r3
 800a71e:	2300      	movs	r3, #0
 800a720:	4288      	cmp	r0, r1
 800a722:	d305      	bcc.n	800a730 <__copybits+0x40>
 800a724:	bd70      	pop	{r4, r5, r6, pc}
 800a726:	f853 6b04 	ldr.w	r6, [r3], #4
 800a72a:	f845 6f04 	str.w	r6, [r5, #4]!
 800a72e:	e7eb      	b.n	800a708 <__copybits+0x18>
 800a730:	f840 3b04 	str.w	r3, [r0], #4
 800a734:	e7f4      	b.n	800a720 <__copybits+0x30>

0800a736 <__any_on>:
 800a736:	f100 0214 	add.w	r2, r0, #20
 800a73a:	6900      	ldr	r0, [r0, #16]
 800a73c:	114b      	asrs	r3, r1, #5
 800a73e:	4298      	cmp	r0, r3
 800a740:	b510      	push	{r4, lr}
 800a742:	db11      	blt.n	800a768 <__any_on+0x32>
 800a744:	dd0a      	ble.n	800a75c <__any_on+0x26>
 800a746:	f011 011f 	ands.w	r1, r1, #31
 800a74a:	d007      	beq.n	800a75c <__any_on+0x26>
 800a74c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a750:	fa24 f001 	lsr.w	r0, r4, r1
 800a754:	fa00 f101 	lsl.w	r1, r0, r1
 800a758:	428c      	cmp	r4, r1
 800a75a:	d10b      	bne.n	800a774 <__any_on+0x3e>
 800a75c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a760:	4293      	cmp	r3, r2
 800a762:	d803      	bhi.n	800a76c <__any_on+0x36>
 800a764:	2000      	movs	r0, #0
 800a766:	bd10      	pop	{r4, pc}
 800a768:	4603      	mov	r3, r0
 800a76a:	e7f7      	b.n	800a75c <__any_on+0x26>
 800a76c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a770:	2900      	cmp	r1, #0
 800a772:	d0f5      	beq.n	800a760 <__any_on+0x2a>
 800a774:	2001      	movs	r0, #1
 800a776:	e7f6      	b.n	800a766 <__any_on+0x30>

0800a778 <__ascii_wctomb>:
 800a778:	4603      	mov	r3, r0
 800a77a:	4608      	mov	r0, r1
 800a77c:	b141      	cbz	r1, 800a790 <__ascii_wctomb+0x18>
 800a77e:	2aff      	cmp	r2, #255	; 0xff
 800a780:	d904      	bls.n	800a78c <__ascii_wctomb+0x14>
 800a782:	228a      	movs	r2, #138	; 0x8a
 800a784:	f04f 30ff 	mov.w	r0, #4294967295
 800a788:	601a      	str	r2, [r3, #0]
 800a78a:	4770      	bx	lr
 800a78c:	2001      	movs	r0, #1
 800a78e:	700a      	strb	r2, [r1, #0]
 800a790:	4770      	bx	lr

0800a792 <__ssputs_r>:
 800a792:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a796:	461f      	mov	r7, r3
 800a798:	688e      	ldr	r6, [r1, #8]
 800a79a:	4682      	mov	sl, r0
 800a79c:	42be      	cmp	r6, r7
 800a79e:	460c      	mov	r4, r1
 800a7a0:	4690      	mov	r8, r2
 800a7a2:	680b      	ldr	r3, [r1, #0]
 800a7a4:	d82c      	bhi.n	800a800 <__ssputs_r+0x6e>
 800a7a6:	898a      	ldrh	r2, [r1, #12]
 800a7a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a7ac:	d026      	beq.n	800a7fc <__ssputs_r+0x6a>
 800a7ae:	6965      	ldr	r5, [r4, #20]
 800a7b0:	6909      	ldr	r1, [r1, #16]
 800a7b2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a7b6:	eba3 0901 	sub.w	r9, r3, r1
 800a7ba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a7be:	1c7b      	adds	r3, r7, #1
 800a7c0:	444b      	add	r3, r9
 800a7c2:	106d      	asrs	r5, r5, #1
 800a7c4:	429d      	cmp	r5, r3
 800a7c6:	bf38      	it	cc
 800a7c8:	461d      	movcc	r5, r3
 800a7ca:	0553      	lsls	r3, r2, #21
 800a7cc:	d527      	bpl.n	800a81e <__ssputs_r+0x8c>
 800a7ce:	4629      	mov	r1, r5
 800a7d0:	f7ff fa98 	bl	8009d04 <_malloc_r>
 800a7d4:	4606      	mov	r6, r0
 800a7d6:	b360      	cbz	r0, 800a832 <__ssputs_r+0xa0>
 800a7d8:	464a      	mov	r2, r9
 800a7da:	6921      	ldr	r1, [r4, #16]
 800a7dc:	f7fe f823 	bl	8008826 <memcpy>
 800a7e0:	89a3      	ldrh	r3, [r4, #12]
 800a7e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a7e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7ea:	81a3      	strh	r3, [r4, #12]
 800a7ec:	6126      	str	r6, [r4, #16]
 800a7ee:	444e      	add	r6, r9
 800a7f0:	6026      	str	r6, [r4, #0]
 800a7f2:	463e      	mov	r6, r7
 800a7f4:	6165      	str	r5, [r4, #20]
 800a7f6:	eba5 0509 	sub.w	r5, r5, r9
 800a7fa:	60a5      	str	r5, [r4, #8]
 800a7fc:	42be      	cmp	r6, r7
 800a7fe:	d900      	bls.n	800a802 <__ssputs_r+0x70>
 800a800:	463e      	mov	r6, r7
 800a802:	4632      	mov	r2, r6
 800a804:	4641      	mov	r1, r8
 800a806:	6820      	ldr	r0, [r4, #0]
 800a808:	f000 f9d8 	bl	800abbc <memmove>
 800a80c:	2000      	movs	r0, #0
 800a80e:	68a3      	ldr	r3, [r4, #8]
 800a810:	1b9b      	subs	r3, r3, r6
 800a812:	60a3      	str	r3, [r4, #8]
 800a814:	6823      	ldr	r3, [r4, #0]
 800a816:	4433      	add	r3, r6
 800a818:	6023      	str	r3, [r4, #0]
 800a81a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a81e:	462a      	mov	r2, r5
 800a820:	f000 fa11 	bl	800ac46 <_realloc_r>
 800a824:	4606      	mov	r6, r0
 800a826:	2800      	cmp	r0, #0
 800a828:	d1e0      	bne.n	800a7ec <__ssputs_r+0x5a>
 800a82a:	4650      	mov	r0, sl
 800a82c:	6921      	ldr	r1, [r4, #16]
 800a82e:	f7fe fe9f 	bl	8009570 <_free_r>
 800a832:	230c      	movs	r3, #12
 800a834:	f8ca 3000 	str.w	r3, [sl]
 800a838:	89a3      	ldrh	r3, [r4, #12]
 800a83a:	f04f 30ff 	mov.w	r0, #4294967295
 800a83e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a842:	81a3      	strh	r3, [r4, #12]
 800a844:	e7e9      	b.n	800a81a <__ssputs_r+0x88>
	...

0800a848 <_svfiprintf_r>:
 800a848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a84c:	4698      	mov	r8, r3
 800a84e:	898b      	ldrh	r3, [r1, #12]
 800a850:	4607      	mov	r7, r0
 800a852:	061b      	lsls	r3, r3, #24
 800a854:	460d      	mov	r5, r1
 800a856:	4614      	mov	r4, r2
 800a858:	b09d      	sub	sp, #116	; 0x74
 800a85a:	d50e      	bpl.n	800a87a <_svfiprintf_r+0x32>
 800a85c:	690b      	ldr	r3, [r1, #16]
 800a85e:	b963      	cbnz	r3, 800a87a <_svfiprintf_r+0x32>
 800a860:	2140      	movs	r1, #64	; 0x40
 800a862:	f7ff fa4f 	bl	8009d04 <_malloc_r>
 800a866:	6028      	str	r0, [r5, #0]
 800a868:	6128      	str	r0, [r5, #16]
 800a86a:	b920      	cbnz	r0, 800a876 <_svfiprintf_r+0x2e>
 800a86c:	230c      	movs	r3, #12
 800a86e:	603b      	str	r3, [r7, #0]
 800a870:	f04f 30ff 	mov.w	r0, #4294967295
 800a874:	e0d0      	b.n	800aa18 <_svfiprintf_r+0x1d0>
 800a876:	2340      	movs	r3, #64	; 0x40
 800a878:	616b      	str	r3, [r5, #20]
 800a87a:	2300      	movs	r3, #0
 800a87c:	9309      	str	r3, [sp, #36]	; 0x24
 800a87e:	2320      	movs	r3, #32
 800a880:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a884:	2330      	movs	r3, #48	; 0x30
 800a886:	f04f 0901 	mov.w	r9, #1
 800a88a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a88e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800aa30 <_svfiprintf_r+0x1e8>
 800a892:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a896:	4623      	mov	r3, r4
 800a898:	469a      	mov	sl, r3
 800a89a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a89e:	b10a      	cbz	r2, 800a8a4 <_svfiprintf_r+0x5c>
 800a8a0:	2a25      	cmp	r2, #37	; 0x25
 800a8a2:	d1f9      	bne.n	800a898 <_svfiprintf_r+0x50>
 800a8a4:	ebba 0b04 	subs.w	fp, sl, r4
 800a8a8:	d00b      	beq.n	800a8c2 <_svfiprintf_r+0x7a>
 800a8aa:	465b      	mov	r3, fp
 800a8ac:	4622      	mov	r2, r4
 800a8ae:	4629      	mov	r1, r5
 800a8b0:	4638      	mov	r0, r7
 800a8b2:	f7ff ff6e 	bl	800a792 <__ssputs_r>
 800a8b6:	3001      	adds	r0, #1
 800a8b8:	f000 80a9 	beq.w	800aa0e <_svfiprintf_r+0x1c6>
 800a8bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a8be:	445a      	add	r2, fp
 800a8c0:	9209      	str	r2, [sp, #36]	; 0x24
 800a8c2:	f89a 3000 	ldrb.w	r3, [sl]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	f000 80a1 	beq.w	800aa0e <_svfiprintf_r+0x1c6>
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	f04f 32ff 	mov.w	r2, #4294967295
 800a8d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a8d6:	f10a 0a01 	add.w	sl, sl, #1
 800a8da:	9304      	str	r3, [sp, #16]
 800a8dc:	9307      	str	r3, [sp, #28]
 800a8de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a8e2:	931a      	str	r3, [sp, #104]	; 0x68
 800a8e4:	4654      	mov	r4, sl
 800a8e6:	2205      	movs	r2, #5
 800a8e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8ec:	4850      	ldr	r0, [pc, #320]	; (800aa30 <_svfiprintf_r+0x1e8>)
 800a8ee:	f7fd ff8c 	bl	800880a <memchr>
 800a8f2:	9a04      	ldr	r2, [sp, #16]
 800a8f4:	b9d8      	cbnz	r0, 800a92e <_svfiprintf_r+0xe6>
 800a8f6:	06d0      	lsls	r0, r2, #27
 800a8f8:	bf44      	itt	mi
 800a8fa:	2320      	movmi	r3, #32
 800a8fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a900:	0711      	lsls	r1, r2, #28
 800a902:	bf44      	itt	mi
 800a904:	232b      	movmi	r3, #43	; 0x2b
 800a906:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a90a:	f89a 3000 	ldrb.w	r3, [sl]
 800a90e:	2b2a      	cmp	r3, #42	; 0x2a
 800a910:	d015      	beq.n	800a93e <_svfiprintf_r+0xf6>
 800a912:	4654      	mov	r4, sl
 800a914:	2000      	movs	r0, #0
 800a916:	f04f 0c0a 	mov.w	ip, #10
 800a91a:	9a07      	ldr	r2, [sp, #28]
 800a91c:	4621      	mov	r1, r4
 800a91e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a922:	3b30      	subs	r3, #48	; 0x30
 800a924:	2b09      	cmp	r3, #9
 800a926:	d94d      	bls.n	800a9c4 <_svfiprintf_r+0x17c>
 800a928:	b1b0      	cbz	r0, 800a958 <_svfiprintf_r+0x110>
 800a92a:	9207      	str	r2, [sp, #28]
 800a92c:	e014      	b.n	800a958 <_svfiprintf_r+0x110>
 800a92e:	eba0 0308 	sub.w	r3, r0, r8
 800a932:	fa09 f303 	lsl.w	r3, r9, r3
 800a936:	4313      	orrs	r3, r2
 800a938:	46a2      	mov	sl, r4
 800a93a:	9304      	str	r3, [sp, #16]
 800a93c:	e7d2      	b.n	800a8e4 <_svfiprintf_r+0x9c>
 800a93e:	9b03      	ldr	r3, [sp, #12]
 800a940:	1d19      	adds	r1, r3, #4
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	9103      	str	r1, [sp, #12]
 800a946:	2b00      	cmp	r3, #0
 800a948:	bfbb      	ittet	lt
 800a94a:	425b      	neglt	r3, r3
 800a94c:	f042 0202 	orrlt.w	r2, r2, #2
 800a950:	9307      	strge	r3, [sp, #28]
 800a952:	9307      	strlt	r3, [sp, #28]
 800a954:	bfb8      	it	lt
 800a956:	9204      	strlt	r2, [sp, #16]
 800a958:	7823      	ldrb	r3, [r4, #0]
 800a95a:	2b2e      	cmp	r3, #46	; 0x2e
 800a95c:	d10c      	bne.n	800a978 <_svfiprintf_r+0x130>
 800a95e:	7863      	ldrb	r3, [r4, #1]
 800a960:	2b2a      	cmp	r3, #42	; 0x2a
 800a962:	d134      	bne.n	800a9ce <_svfiprintf_r+0x186>
 800a964:	9b03      	ldr	r3, [sp, #12]
 800a966:	3402      	adds	r4, #2
 800a968:	1d1a      	adds	r2, r3, #4
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	9203      	str	r2, [sp, #12]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	bfb8      	it	lt
 800a972:	f04f 33ff 	movlt.w	r3, #4294967295
 800a976:	9305      	str	r3, [sp, #20]
 800a978:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800aa34 <_svfiprintf_r+0x1ec>
 800a97c:	2203      	movs	r2, #3
 800a97e:	4650      	mov	r0, sl
 800a980:	7821      	ldrb	r1, [r4, #0]
 800a982:	f7fd ff42 	bl	800880a <memchr>
 800a986:	b138      	cbz	r0, 800a998 <_svfiprintf_r+0x150>
 800a988:	2240      	movs	r2, #64	; 0x40
 800a98a:	9b04      	ldr	r3, [sp, #16]
 800a98c:	eba0 000a 	sub.w	r0, r0, sl
 800a990:	4082      	lsls	r2, r0
 800a992:	4313      	orrs	r3, r2
 800a994:	3401      	adds	r4, #1
 800a996:	9304      	str	r3, [sp, #16]
 800a998:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a99c:	2206      	movs	r2, #6
 800a99e:	4826      	ldr	r0, [pc, #152]	; (800aa38 <_svfiprintf_r+0x1f0>)
 800a9a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a9a4:	f7fd ff31 	bl	800880a <memchr>
 800a9a8:	2800      	cmp	r0, #0
 800a9aa:	d038      	beq.n	800aa1e <_svfiprintf_r+0x1d6>
 800a9ac:	4b23      	ldr	r3, [pc, #140]	; (800aa3c <_svfiprintf_r+0x1f4>)
 800a9ae:	bb1b      	cbnz	r3, 800a9f8 <_svfiprintf_r+0x1b0>
 800a9b0:	9b03      	ldr	r3, [sp, #12]
 800a9b2:	3307      	adds	r3, #7
 800a9b4:	f023 0307 	bic.w	r3, r3, #7
 800a9b8:	3308      	adds	r3, #8
 800a9ba:	9303      	str	r3, [sp, #12]
 800a9bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9be:	4433      	add	r3, r6
 800a9c0:	9309      	str	r3, [sp, #36]	; 0x24
 800a9c2:	e768      	b.n	800a896 <_svfiprintf_r+0x4e>
 800a9c4:	460c      	mov	r4, r1
 800a9c6:	2001      	movs	r0, #1
 800a9c8:	fb0c 3202 	mla	r2, ip, r2, r3
 800a9cc:	e7a6      	b.n	800a91c <_svfiprintf_r+0xd4>
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	f04f 0c0a 	mov.w	ip, #10
 800a9d4:	4619      	mov	r1, r3
 800a9d6:	3401      	adds	r4, #1
 800a9d8:	9305      	str	r3, [sp, #20]
 800a9da:	4620      	mov	r0, r4
 800a9dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a9e0:	3a30      	subs	r2, #48	; 0x30
 800a9e2:	2a09      	cmp	r2, #9
 800a9e4:	d903      	bls.n	800a9ee <_svfiprintf_r+0x1a6>
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d0c6      	beq.n	800a978 <_svfiprintf_r+0x130>
 800a9ea:	9105      	str	r1, [sp, #20]
 800a9ec:	e7c4      	b.n	800a978 <_svfiprintf_r+0x130>
 800a9ee:	4604      	mov	r4, r0
 800a9f0:	2301      	movs	r3, #1
 800a9f2:	fb0c 2101 	mla	r1, ip, r1, r2
 800a9f6:	e7f0      	b.n	800a9da <_svfiprintf_r+0x192>
 800a9f8:	ab03      	add	r3, sp, #12
 800a9fa:	9300      	str	r3, [sp, #0]
 800a9fc:	462a      	mov	r2, r5
 800a9fe:	4638      	mov	r0, r7
 800aa00:	4b0f      	ldr	r3, [pc, #60]	; (800aa40 <_svfiprintf_r+0x1f8>)
 800aa02:	a904      	add	r1, sp, #16
 800aa04:	f7fc fefc 	bl	8007800 <_printf_float>
 800aa08:	1c42      	adds	r2, r0, #1
 800aa0a:	4606      	mov	r6, r0
 800aa0c:	d1d6      	bne.n	800a9bc <_svfiprintf_r+0x174>
 800aa0e:	89ab      	ldrh	r3, [r5, #12]
 800aa10:	065b      	lsls	r3, r3, #25
 800aa12:	f53f af2d 	bmi.w	800a870 <_svfiprintf_r+0x28>
 800aa16:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aa18:	b01d      	add	sp, #116	; 0x74
 800aa1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa1e:	ab03      	add	r3, sp, #12
 800aa20:	9300      	str	r3, [sp, #0]
 800aa22:	462a      	mov	r2, r5
 800aa24:	4638      	mov	r0, r7
 800aa26:	4b06      	ldr	r3, [pc, #24]	; (800aa40 <_svfiprintf_r+0x1f8>)
 800aa28:	a904      	add	r1, sp, #16
 800aa2a:	f7fd f989 	bl	8007d40 <_printf_i>
 800aa2e:	e7eb      	b.n	800aa08 <_svfiprintf_r+0x1c0>
 800aa30:	0800d604 	.word	0x0800d604
 800aa34:	0800d60a 	.word	0x0800d60a
 800aa38:	0800d60e 	.word	0x0800d60e
 800aa3c:	08007801 	.word	0x08007801
 800aa40:	0800a793 	.word	0x0800a793

0800aa44 <__sflush_r>:
 800aa44:	898a      	ldrh	r2, [r1, #12]
 800aa46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa48:	4605      	mov	r5, r0
 800aa4a:	0710      	lsls	r0, r2, #28
 800aa4c:	460c      	mov	r4, r1
 800aa4e:	d457      	bmi.n	800ab00 <__sflush_r+0xbc>
 800aa50:	684b      	ldr	r3, [r1, #4]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	dc04      	bgt.n	800aa60 <__sflush_r+0x1c>
 800aa56:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	dc01      	bgt.n	800aa60 <__sflush_r+0x1c>
 800aa5c:	2000      	movs	r0, #0
 800aa5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aa62:	2e00      	cmp	r6, #0
 800aa64:	d0fa      	beq.n	800aa5c <__sflush_r+0x18>
 800aa66:	2300      	movs	r3, #0
 800aa68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aa6c:	682f      	ldr	r7, [r5, #0]
 800aa6e:	6a21      	ldr	r1, [r4, #32]
 800aa70:	602b      	str	r3, [r5, #0]
 800aa72:	d032      	beq.n	800aada <__sflush_r+0x96>
 800aa74:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aa76:	89a3      	ldrh	r3, [r4, #12]
 800aa78:	075a      	lsls	r2, r3, #29
 800aa7a:	d505      	bpl.n	800aa88 <__sflush_r+0x44>
 800aa7c:	6863      	ldr	r3, [r4, #4]
 800aa7e:	1ac0      	subs	r0, r0, r3
 800aa80:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aa82:	b10b      	cbz	r3, 800aa88 <__sflush_r+0x44>
 800aa84:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aa86:	1ac0      	subs	r0, r0, r3
 800aa88:	2300      	movs	r3, #0
 800aa8a:	4602      	mov	r2, r0
 800aa8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aa8e:	4628      	mov	r0, r5
 800aa90:	6a21      	ldr	r1, [r4, #32]
 800aa92:	47b0      	blx	r6
 800aa94:	1c43      	adds	r3, r0, #1
 800aa96:	89a3      	ldrh	r3, [r4, #12]
 800aa98:	d106      	bne.n	800aaa8 <__sflush_r+0x64>
 800aa9a:	6829      	ldr	r1, [r5, #0]
 800aa9c:	291d      	cmp	r1, #29
 800aa9e:	d82b      	bhi.n	800aaf8 <__sflush_r+0xb4>
 800aaa0:	4a28      	ldr	r2, [pc, #160]	; (800ab44 <__sflush_r+0x100>)
 800aaa2:	410a      	asrs	r2, r1
 800aaa4:	07d6      	lsls	r6, r2, #31
 800aaa6:	d427      	bmi.n	800aaf8 <__sflush_r+0xb4>
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	6062      	str	r2, [r4, #4]
 800aaac:	6922      	ldr	r2, [r4, #16]
 800aaae:	04d9      	lsls	r1, r3, #19
 800aab0:	6022      	str	r2, [r4, #0]
 800aab2:	d504      	bpl.n	800aabe <__sflush_r+0x7a>
 800aab4:	1c42      	adds	r2, r0, #1
 800aab6:	d101      	bne.n	800aabc <__sflush_r+0x78>
 800aab8:	682b      	ldr	r3, [r5, #0]
 800aaba:	b903      	cbnz	r3, 800aabe <__sflush_r+0x7a>
 800aabc:	6560      	str	r0, [r4, #84]	; 0x54
 800aabe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aac0:	602f      	str	r7, [r5, #0]
 800aac2:	2900      	cmp	r1, #0
 800aac4:	d0ca      	beq.n	800aa5c <__sflush_r+0x18>
 800aac6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aaca:	4299      	cmp	r1, r3
 800aacc:	d002      	beq.n	800aad4 <__sflush_r+0x90>
 800aace:	4628      	mov	r0, r5
 800aad0:	f7fe fd4e 	bl	8009570 <_free_r>
 800aad4:	2000      	movs	r0, #0
 800aad6:	6360      	str	r0, [r4, #52]	; 0x34
 800aad8:	e7c1      	b.n	800aa5e <__sflush_r+0x1a>
 800aada:	2301      	movs	r3, #1
 800aadc:	4628      	mov	r0, r5
 800aade:	47b0      	blx	r6
 800aae0:	1c41      	adds	r1, r0, #1
 800aae2:	d1c8      	bne.n	800aa76 <__sflush_r+0x32>
 800aae4:	682b      	ldr	r3, [r5, #0]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d0c5      	beq.n	800aa76 <__sflush_r+0x32>
 800aaea:	2b1d      	cmp	r3, #29
 800aaec:	d001      	beq.n	800aaf2 <__sflush_r+0xae>
 800aaee:	2b16      	cmp	r3, #22
 800aaf0:	d101      	bne.n	800aaf6 <__sflush_r+0xb2>
 800aaf2:	602f      	str	r7, [r5, #0]
 800aaf4:	e7b2      	b.n	800aa5c <__sflush_r+0x18>
 800aaf6:	89a3      	ldrh	r3, [r4, #12]
 800aaf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aafc:	81a3      	strh	r3, [r4, #12]
 800aafe:	e7ae      	b.n	800aa5e <__sflush_r+0x1a>
 800ab00:	690f      	ldr	r7, [r1, #16]
 800ab02:	2f00      	cmp	r7, #0
 800ab04:	d0aa      	beq.n	800aa5c <__sflush_r+0x18>
 800ab06:	0793      	lsls	r3, r2, #30
 800ab08:	bf18      	it	ne
 800ab0a:	2300      	movne	r3, #0
 800ab0c:	680e      	ldr	r6, [r1, #0]
 800ab0e:	bf08      	it	eq
 800ab10:	694b      	ldreq	r3, [r1, #20]
 800ab12:	1bf6      	subs	r6, r6, r7
 800ab14:	600f      	str	r7, [r1, #0]
 800ab16:	608b      	str	r3, [r1, #8]
 800ab18:	2e00      	cmp	r6, #0
 800ab1a:	dd9f      	ble.n	800aa5c <__sflush_r+0x18>
 800ab1c:	4633      	mov	r3, r6
 800ab1e:	463a      	mov	r2, r7
 800ab20:	4628      	mov	r0, r5
 800ab22:	6a21      	ldr	r1, [r4, #32]
 800ab24:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800ab28:	47e0      	blx	ip
 800ab2a:	2800      	cmp	r0, #0
 800ab2c:	dc06      	bgt.n	800ab3c <__sflush_r+0xf8>
 800ab2e:	89a3      	ldrh	r3, [r4, #12]
 800ab30:	f04f 30ff 	mov.w	r0, #4294967295
 800ab34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab38:	81a3      	strh	r3, [r4, #12]
 800ab3a:	e790      	b.n	800aa5e <__sflush_r+0x1a>
 800ab3c:	4407      	add	r7, r0
 800ab3e:	1a36      	subs	r6, r6, r0
 800ab40:	e7ea      	b.n	800ab18 <__sflush_r+0xd4>
 800ab42:	bf00      	nop
 800ab44:	dfbffffe 	.word	0xdfbffffe

0800ab48 <_fflush_r>:
 800ab48:	b538      	push	{r3, r4, r5, lr}
 800ab4a:	690b      	ldr	r3, [r1, #16]
 800ab4c:	4605      	mov	r5, r0
 800ab4e:	460c      	mov	r4, r1
 800ab50:	b913      	cbnz	r3, 800ab58 <_fflush_r+0x10>
 800ab52:	2500      	movs	r5, #0
 800ab54:	4628      	mov	r0, r5
 800ab56:	bd38      	pop	{r3, r4, r5, pc}
 800ab58:	b118      	cbz	r0, 800ab62 <_fflush_r+0x1a>
 800ab5a:	6a03      	ldr	r3, [r0, #32]
 800ab5c:	b90b      	cbnz	r3, 800ab62 <_fflush_r+0x1a>
 800ab5e:	f7fd fcab 	bl	80084b8 <__sinit>
 800ab62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d0f3      	beq.n	800ab52 <_fflush_r+0xa>
 800ab6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ab6c:	07d0      	lsls	r0, r2, #31
 800ab6e:	d404      	bmi.n	800ab7a <_fflush_r+0x32>
 800ab70:	0599      	lsls	r1, r3, #22
 800ab72:	d402      	bmi.n	800ab7a <_fflush_r+0x32>
 800ab74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab76:	f7fd fe46 	bl	8008806 <__retarget_lock_acquire_recursive>
 800ab7a:	4628      	mov	r0, r5
 800ab7c:	4621      	mov	r1, r4
 800ab7e:	f7ff ff61 	bl	800aa44 <__sflush_r>
 800ab82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ab84:	4605      	mov	r5, r0
 800ab86:	07da      	lsls	r2, r3, #31
 800ab88:	d4e4      	bmi.n	800ab54 <_fflush_r+0xc>
 800ab8a:	89a3      	ldrh	r3, [r4, #12]
 800ab8c:	059b      	lsls	r3, r3, #22
 800ab8e:	d4e1      	bmi.n	800ab54 <_fflush_r+0xc>
 800ab90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab92:	f7fd fe39 	bl	8008808 <__retarget_lock_release_recursive>
 800ab96:	e7dd      	b.n	800ab54 <_fflush_r+0xc>

0800ab98 <fiprintf>:
 800ab98:	b40e      	push	{r1, r2, r3}
 800ab9a:	b503      	push	{r0, r1, lr}
 800ab9c:	4601      	mov	r1, r0
 800ab9e:	ab03      	add	r3, sp, #12
 800aba0:	4805      	ldr	r0, [pc, #20]	; (800abb8 <fiprintf+0x20>)
 800aba2:	f853 2b04 	ldr.w	r2, [r3], #4
 800aba6:	6800      	ldr	r0, [r0, #0]
 800aba8:	9301      	str	r3, [sp, #4]
 800abaa:	f000 f8a3 	bl	800acf4 <_vfiprintf_r>
 800abae:	b002      	add	sp, #8
 800abb0:	f85d eb04 	ldr.w	lr, [sp], #4
 800abb4:	b003      	add	sp, #12
 800abb6:	4770      	bx	lr
 800abb8:	2000021c 	.word	0x2000021c

0800abbc <memmove>:
 800abbc:	4288      	cmp	r0, r1
 800abbe:	b510      	push	{r4, lr}
 800abc0:	eb01 0402 	add.w	r4, r1, r2
 800abc4:	d902      	bls.n	800abcc <memmove+0x10>
 800abc6:	4284      	cmp	r4, r0
 800abc8:	4623      	mov	r3, r4
 800abca:	d807      	bhi.n	800abdc <memmove+0x20>
 800abcc:	1e43      	subs	r3, r0, #1
 800abce:	42a1      	cmp	r1, r4
 800abd0:	d008      	beq.n	800abe4 <memmove+0x28>
 800abd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800abd6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800abda:	e7f8      	b.n	800abce <memmove+0x12>
 800abdc:	4601      	mov	r1, r0
 800abde:	4402      	add	r2, r0
 800abe0:	428a      	cmp	r2, r1
 800abe2:	d100      	bne.n	800abe6 <memmove+0x2a>
 800abe4:	bd10      	pop	{r4, pc}
 800abe6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800abea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800abee:	e7f7      	b.n	800abe0 <memmove+0x24>

0800abf0 <_sbrk_r>:
 800abf0:	b538      	push	{r3, r4, r5, lr}
 800abf2:	2300      	movs	r3, #0
 800abf4:	4d05      	ldr	r5, [pc, #20]	; (800ac0c <_sbrk_r+0x1c>)
 800abf6:	4604      	mov	r4, r0
 800abf8:	4608      	mov	r0, r1
 800abfa:	602b      	str	r3, [r5, #0]
 800abfc:	f7f8 f892 	bl	8002d24 <_sbrk>
 800ac00:	1c43      	adds	r3, r0, #1
 800ac02:	d102      	bne.n	800ac0a <_sbrk_r+0x1a>
 800ac04:	682b      	ldr	r3, [r5, #0]
 800ac06:	b103      	cbz	r3, 800ac0a <_sbrk_r+0x1a>
 800ac08:	6023      	str	r3, [r4, #0]
 800ac0a:	bd38      	pop	{r3, r4, r5, pc}
 800ac0c:	20000a04 	.word	0x20000a04

0800ac10 <abort>:
 800ac10:	2006      	movs	r0, #6
 800ac12:	b508      	push	{r3, lr}
 800ac14:	f000 fa46 	bl	800b0a4 <raise>
 800ac18:	2001      	movs	r0, #1
 800ac1a:	f7f8 f810 	bl	8002c3e <_exit>

0800ac1e <_calloc_r>:
 800ac1e:	b570      	push	{r4, r5, r6, lr}
 800ac20:	fba1 5402 	umull	r5, r4, r1, r2
 800ac24:	b934      	cbnz	r4, 800ac34 <_calloc_r+0x16>
 800ac26:	4629      	mov	r1, r5
 800ac28:	f7ff f86c 	bl	8009d04 <_malloc_r>
 800ac2c:	4606      	mov	r6, r0
 800ac2e:	b928      	cbnz	r0, 800ac3c <_calloc_r+0x1e>
 800ac30:	4630      	mov	r0, r6
 800ac32:	bd70      	pop	{r4, r5, r6, pc}
 800ac34:	220c      	movs	r2, #12
 800ac36:	2600      	movs	r6, #0
 800ac38:	6002      	str	r2, [r0, #0]
 800ac3a:	e7f9      	b.n	800ac30 <_calloc_r+0x12>
 800ac3c:	462a      	mov	r2, r5
 800ac3e:	4621      	mov	r1, r4
 800ac40:	f7fd fcd3 	bl	80085ea <memset>
 800ac44:	e7f4      	b.n	800ac30 <_calloc_r+0x12>

0800ac46 <_realloc_r>:
 800ac46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac4a:	4680      	mov	r8, r0
 800ac4c:	4614      	mov	r4, r2
 800ac4e:	460e      	mov	r6, r1
 800ac50:	b921      	cbnz	r1, 800ac5c <_realloc_r+0x16>
 800ac52:	4611      	mov	r1, r2
 800ac54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac58:	f7ff b854 	b.w	8009d04 <_malloc_r>
 800ac5c:	b92a      	cbnz	r2, 800ac6a <_realloc_r+0x24>
 800ac5e:	f7fe fc87 	bl	8009570 <_free_r>
 800ac62:	4625      	mov	r5, r4
 800ac64:	4628      	mov	r0, r5
 800ac66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac6a:	f000 fa37 	bl	800b0dc <_malloc_usable_size_r>
 800ac6e:	4284      	cmp	r4, r0
 800ac70:	4607      	mov	r7, r0
 800ac72:	d802      	bhi.n	800ac7a <_realloc_r+0x34>
 800ac74:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ac78:	d812      	bhi.n	800aca0 <_realloc_r+0x5a>
 800ac7a:	4621      	mov	r1, r4
 800ac7c:	4640      	mov	r0, r8
 800ac7e:	f7ff f841 	bl	8009d04 <_malloc_r>
 800ac82:	4605      	mov	r5, r0
 800ac84:	2800      	cmp	r0, #0
 800ac86:	d0ed      	beq.n	800ac64 <_realloc_r+0x1e>
 800ac88:	42bc      	cmp	r4, r7
 800ac8a:	4622      	mov	r2, r4
 800ac8c:	4631      	mov	r1, r6
 800ac8e:	bf28      	it	cs
 800ac90:	463a      	movcs	r2, r7
 800ac92:	f7fd fdc8 	bl	8008826 <memcpy>
 800ac96:	4631      	mov	r1, r6
 800ac98:	4640      	mov	r0, r8
 800ac9a:	f7fe fc69 	bl	8009570 <_free_r>
 800ac9e:	e7e1      	b.n	800ac64 <_realloc_r+0x1e>
 800aca0:	4635      	mov	r5, r6
 800aca2:	e7df      	b.n	800ac64 <_realloc_r+0x1e>

0800aca4 <__sfputc_r>:
 800aca4:	6893      	ldr	r3, [r2, #8]
 800aca6:	b410      	push	{r4}
 800aca8:	3b01      	subs	r3, #1
 800acaa:	2b00      	cmp	r3, #0
 800acac:	6093      	str	r3, [r2, #8]
 800acae:	da07      	bge.n	800acc0 <__sfputc_r+0x1c>
 800acb0:	6994      	ldr	r4, [r2, #24]
 800acb2:	42a3      	cmp	r3, r4
 800acb4:	db01      	blt.n	800acba <__sfputc_r+0x16>
 800acb6:	290a      	cmp	r1, #10
 800acb8:	d102      	bne.n	800acc0 <__sfputc_r+0x1c>
 800acba:	bc10      	pop	{r4}
 800acbc:	f000 b934 	b.w	800af28 <__swbuf_r>
 800acc0:	6813      	ldr	r3, [r2, #0]
 800acc2:	1c58      	adds	r0, r3, #1
 800acc4:	6010      	str	r0, [r2, #0]
 800acc6:	7019      	strb	r1, [r3, #0]
 800acc8:	4608      	mov	r0, r1
 800acca:	bc10      	pop	{r4}
 800accc:	4770      	bx	lr

0800acce <__sfputs_r>:
 800acce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acd0:	4606      	mov	r6, r0
 800acd2:	460f      	mov	r7, r1
 800acd4:	4614      	mov	r4, r2
 800acd6:	18d5      	adds	r5, r2, r3
 800acd8:	42ac      	cmp	r4, r5
 800acda:	d101      	bne.n	800ace0 <__sfputs_r+0x12>
 800acdc:	2000      	movs	r0, #0
 800acde:	e007      	b.n	800acf0 <__sfputs_r+0x22>
 800ace0:	463a      	mov	r2, r7
 800ace2:	4630      	mov	r0, r6
 800ace4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ace8:	f7ff ffdc 	bl	800aca4 <__sfputc_r>
 800acec:	1c43      	adds	r3, r0, #1
 800acee:	d1f3      	bne.n	800acd8 <__sfputs_r+0xa>
 800acf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800acf4 <_vfiprintf_r>:
 800acf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acf8:	460d      	mov	r5, r1
 800acfa:	4614      	mov	r4, r2
 800acfc:	4698      	mov	r8, r3
 800acfe:	4606      	mov	r6, r0
 800ad00:	b09d      	sub	sp, #116	; 0x74
 800ad02:	b118      	cbz	r0, 800ad0c <_vfiprintf_r+0x18>
 800ad04:	6a03      	ldr	r3, [r0, #32]
 800ad06:	b90b      	cbnz	r3, 800ad0c <_vfiprintf_r+0x18>
 800ad08:	f7fd fbd6 	bl	80084b8 <__sinit>
 800ad0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ad0e:	07d9      	lsls	r1, r3, #31
 800ad10:	d405      	bmi.n	800ad1e <_vfiprintf_r+0x2a>
 800ad12:	89ab      	ldrh	r3, [r5, #12]
 800ad14:	059a      	lsls	r2, r3, #22
 800ad16:	d402      	bmi.n	800ad1e <_vfiprintf_r+0x2a>
 800ad18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad1a:	f7fd fd74 	bl	8008806 <__retarget_lock_acquire_recursive>
 800ad1e:	89ab      	ldrh	r3, [r5, #12]
 800ad20:	071b      	lsls	r3, r3, #28
 800ad22:	d501      	bpl.n	800ad28 <_vfiprintf_r+0x34>
 800ad24:	692b      	ldr	r3, [r5, #16]
 800ad26:	b99b      	cbnz	r3, 800ad50 <_vfiprintf_r+0x5c>
 800ad28:	4629      	mov	r1, r5
 800ad2a:	4630      	mov	r0, r6
 800ad2c:	f000 f93a 	bl	800afa4 <__swsetup_r>
 800ad30:	b170      	cbz	r0, 800ad50 <_vfiprintf_r+0x5c>
 800ad32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ad34:	07dc      	lsls	r4, r3, #31
 800ad36:	d504      	bpl.n	800ad42 <_vfiprintf_r+0x4e>
 800ad38:	f04f 30ff 	mov.w	r0, #4294967295
 800ad3c:	b01d      	add	sp, #116	; 0x74
 800ad3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad42:	89ab      	ldrh	r3, [r5, #12]
 800ad44:	0598      	lsls	r0, r3, #22
 800ad46:	d4f7      	bmi.n	800ad38 <_vfiprintf_r+0x44>
 800ad48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad4a:	f7fd fd5d 	bl	8008808 <__retarget_lock_release_recursive>
 800ad4e:	e7f3      	b.n	800ad38 <_vfiprintf_r+0x44>
 800ad50:	2300      	movs	r3, #0
 800ad52:	9309      	str	r3, [sp, #36]	; 0x24
 800ad54:	2320      	movs	r3, #32
 800ad56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ad5a:	2330      	movs	r3, #48	; 0x30
 800ad5c:	f04f 0901 	mov.w	r9, #1
 800ad60:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad64:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800af14 <_vfiprintf_r+0x220>
 800ad68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ad6c:	4623      	mov	r3, r4
 800ad6e:	469a      	mov	sl, r3
 800ad70:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad74:	b10a      	cbz	r2, 800ad7a <_vfiprintf_r+0x86>
 800ad76:	2a25      	cmp	r2, #37	; 0x25
 800ad78:	d1f9      	bne.n	800ad6e <_vfiprintf_r+0x7a>
 800ad7a:	ebba 0b04 	subs.w	fp, sl, r4
 800ad7e:	d00b      	beq.n	800ad98 <_vfiprintf_r+0xa4>
 800ad80:	465b      	mov	r3, fp
 800ad82:	4622      	mov	r2, r4
 800ad84:	4629      	mov	r1, r5
 800ad86:	4630      	mov	r0, r6
 800ad88:	f7ff ffa1 	bl	800acce <__sfputs_r>
 800ad8c:	3001      	adds	r0, #1
 800ad8e:	f000 80a9 	beq.w	800aee4 <_vfiprintf_r+0x1f0>
 800ad92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad94:	445a      	add	r2, fp
 800ad96:	9209      	str	r2, [sp, #36]	; 0x24
 800ad98:	f89a 3000 	ldrb.w	r3, [sl]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	f000 80a1 	beq.w	800aee4 <_vfiprintf_r+0x1f0>
 800ada2:	2300      	movs	r3, #0
 800ada4:	f04f 32ff 	mov.w	r2, #4294967295
 800ada8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800adac:	f10a 0a01 	add.w	sl, sl, #1
 800adb0:	9304      	str	r3, [sp, #16]
 800adb2:	9307      	str	r3, [sp, #28]
 800adb4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800adb8:	931a      	str	r3, [sp, #104]	; 0x68
 800adba:	4654      	mov	r4, sl
 800adbc:	2205      	movs	r2, #5
 800adbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adc2:	4854      	ldr	r0, [pc, #336]	; (800af14 <_vfiprintf_r+0x220>)
 800adc4:	f7fd fd21 	bl	800880a <memchr>
 800adc8:	9a04      	ldr	r2, [sp, #16]
 800adca:	b9d8      	cbnz	r0, 800ae04 <_vfiprintf_r+0x110>
 800adcc:	06d1      	lsls	r1, r2, #27
 800adce:	bf44      	itt	mi
 800add0:	2320      	movmi	r3, #32
 800add2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800add6:	0713      	lsls	r3, r2, #28
 800add8:	bf44      	itt	mi
 800adda:	232b      	movmi	r3, #43	; 0x2b
 800addc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ade0:	f89a 3000 	ldrb.w	r3, [sl]
 800ade4:	2b2a      	cmp	r3, #42	; 0x2a
 800ade6:	d015      	beq.n	800ae14 <_vfiprintf_r+0x120>
 800ade8:	4654      	mov	r4, sl
 800adea:	2000      	movs	r0, #0
 800adec:	f04f 0c0a 	mov.w	ip, #10
 800adf0:	9a07      	ldr	r2, [sp, #28]
 800adf2:	4621      	mov	r1, r4
 800adf4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800adf8:	3b30      	subs	r3, #48	; 0x30
 800adfa:	2b09      	cmp	r3, #9
 800adfc:	d94d      	bls.n	800ae9a <_vfiprintf_r+0x1a6>
 800adfe:	b1b0      	cbz	r0, 800ae2e <_vfiprintf_r+0x13a>
 800ae00:	9207      	str	r2, [sp, #28]
 800ae02:	e014      	b.n	800ae2e <_vfiprintf_r+0x13a>
 800ae04:	eba0 0308 	sub.w	r3, r0, r8
 800ae08:	fa09 f303 	lsl.w	r3, r9, r3
 800ae0c:	4313      	orrs	r3, r2
 800ae0e:	46a2      	mov	sl, r4
 800ae10:	9304      	str	r3, [sp, #16]
 800ae12:	e7d2      	b.n	800adba <_vfiprintf_r+0xc6>
 800ae14:	9b03      	ldr	r3, [sp, #12]
 800ae16:	1d19      	adds	r1, r3, #4
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	9103      	str	r1, [sp, #12]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	bfbb      	ittet	lt
 800ae20:	425b      	neglt	r3, r3
 800ae22:	f042 0202 	orrlt.w	r2, r2, #2
 800ae26:	9307      	strge	r3, [sp, #28]
 800ae28:	9307      	strlt	r3, [sp, #28]
 800ae2a:	bfb8      	it	lt
 800ae2c:	9204      	strlt	r2, [sp, #16]
 800ae2e:	7823      	ldrb	r3, [r4, #0]
 800ae30:	2b2e      	cmp	r3, #46	; 0x2e
 800ae32:	d10c      	bne.n	800ae4e <_vfiprintf_r+0x15a>
 800ae34:	7863      	ldrb	r3, [r4, #1]
 800ae36:	2b2a      	cmp	r3, #42	; 0x2a
 800ae38:	d134      	bne.n	800aea4 <_vfiprintf_r+0x1b0>
 800ae3a:	9b03      	ldr	r3, [sp, #12]
 800ae3c:	3402      	adds	r4, #2
 800ae3e:	1d1a      	adds	r2, r3, #4
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	9203      	str	r2, [sp, #12]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	bfb8      	it	lt
 800ae48:	f04f 33ff 	movlt.w	r3, #4294967295
 800ae4c:	9305      	str	r3, [sp, #20]
 800ae4e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800af18 <_vfiprintf_r+0x224>
 800ae52:	2203      	movs	r2, #3
 800ae54:	4650      	mov	r0, sl
 800ae56:	7821      	ldrb	r1, [r4, #0]
 800ae58:	f7fd fcd7 	bl	800880a <memchr>
 800ae5c:	b138      	cbz	r0, 800ae6e <_vfiprintf_r+0x17a>
 800ae5e:	2240      	movs	r2, #64	; 0x40
 800ae60:	9b04      	ldr	r3, [sp, #16]
 800ae62:	eba0 000a 	sub.w	r0, r0, sl
 800ae66:	4082      	lsls	r2, r0
 800ae68:	4313      	orrs	r3, r2
 800ae6a:	3401      	adds	r4, #1
 800ae6c:	9304      	str	r3, [sp, #16]
 800ae6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae72:	2206      	movs	r2, #6
 800ae74:	4829      	ldr	r0, [pc, #164]	; (800af1c <_vfiprintf_r+0x228>)
 800ae76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ae7a:	f7fd fcc6 	bl	800880a <memchr>
 800ae7e:	2800      	cmp	r0, #0
 800ae80:	d03f      	beq.n	800af02 <_vfiprintf_r+0x20e>
 800ae82:	4b27      	ldr	r3, [pc, #156]	; (800af20 <_vfiprintf_r+0x22c>)
 800ae84:	bb1b      	cbnz	r3, 800aece <_vfiprintf_r+0x1da>
 800ae86:	9b03      	ldr	r3, [sp, #12]
 800ae88:	3307      	adds	r3, #7
 800ae8a:	f023 0307 	bic.w	r3, r3, #7
 800ae8e:	3308      	adds	r3, #8
 800ae90:	9303      	str	r3, [sp, #12]
 800ae92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae94:	443b      	add	r3, r7
 800ae96:	9309      	str	r3, [sp, #36]	; 0x24
 800ae98:	e768      	b.n	800ad6c <_vfiprintf_r+0x78>
 800ae9a:	460c      	mov	r4, r1
 800ae9c:	2001      	movs	r0, #1
 800ae9e:	fb0c 3202 	mla	r2, ip, r2, r3
 800aea2:	e7a6      	b.n	800adf2 <_vfiprintf_r+0xfe>
 800aea4:	2300      	movs	r3, #0
 800aea6:	f04f 0c0a 	mov.w	ip, #10
 800aeaa:	4619      	mov	r1, r3
 800aeac:	3401      	adds	r4, #1
 800aeae:	9305      	str	r3, [sp, #20]
 800aeb0:	4620      	mov	r0, r4
 800aeb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aeb6:	3a30      	subs	r2, #48	; 0x30
 800aeb8:	2a09      	cmp	r2, #9
 800aeba:	d903      	bls.n	800aec4 <_vfiprintf_r+0x1d0>
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d0c6      	beq.n	800ae4e <_vfiprintf_r+0x15a>
 800aec0:	9105      	str	r1, [sp, #20]
 800aec2:	e7c4      	b.n	800ae4e <_vfiprintf_r+0x15a>
 800aec4:	4604      	mov	r4, r0
 800aec6:	2301      	movs	r3, #1
 800aec8:	fb0c 2101 	mla	r1, ip, r1, r2
 800aecc:	e7f0      	b.n	800aeb0 <_vfiprintf_r+0x1bc>
 800aece:	ab03      	add	r3, sp, #12
 800aed0:	9300      	str	r3, [sp, #0]
 800aed2:	462a      	mov	r2, r5
 800aed4:	4630      	mov	r0, r6
 800aed6:	4b13      	ldr	r3, [pc, #76]	; (800af24 <_vfiprintf_r+0x230>)
 800aed8:	a904      	add	r1, sp, #16
 800aeda:	f7fc fc91 	bl	8007800 <_printf_float>
 800aede:	4607      	mov	r7, r0
 800aee0:	1c78      	adds	r0, r7, #1
 800aee2:	d1d6      	bne.n	800ae92 <_vfiprintf_r+0x19e>
 800aee4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aee6:	07d9      	lsls	r1, r3, #31
 800aee8:	d405      	bmi.n	800aef6 <_vfiprintf_r+0x202>
 800aeea:	89ab      	ldrh	r3, [r5, #12]
 800aeec:	059a      	lsls	r2, r3, #22
 800aeee:	d402      	bmi.n	800aef6 <_vfiprintf_r+0x202>
 800aef0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aef2:	f7fd fc89 	bl	8008808 <__retarget_lock_release_recursive>
 800aef6:	89ab      	ldrh	r3, [r5, #12]
 800aef8:	065b      	lsls	r3, r3, #25
 800aefa:	f53f af1d 	bmi.w	800ad38 <_vfiprintf_r+0x44>
 800aefe:	9809      	ldr	r0, [sp, #36]	; 0x24
 800af00:	e71c      	b.n	800ad3c <_vfiprintf_r+0x48>
 800af02:	ab03      	add	r3, sp, #12
 800af04:	9300      	str	r3, [sp, #0]
 800af06:	462a      	mov	r2, r5
 800af08:	4630      	mov	r0, r6
 800af0a:	4b06      	ldr	r3, [pc, #24]	; (800af24 <_vfiprintf_r+0x230>)
 800af0c:	a904      	add	r1, sp, #16
 800af0e:	f7fc ff17 	bl	8007d40 <_printf_i>
 800af12:	e7e4      	b.n	800aede <_vfiprintf_r+0x1ea>
 800af14:	0800d604 	.word	0x0800d604
 800af18:	0800d60a 	.word	0x0800d60a
 800af1c:	0800d60e 	.word	0x0800d60e
 800af20:	08007801 	.word	0x08007801
 800af24:	0800accf 	.word	0x0800accf

0800af28 <__swbuf_r>:
 800af28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af2a:	460e      	mov	r6, r1
 800af2c:	4614      	mov	r4, r2
 800af2e:	4605      	mov	r5, r0
 800af30:	b118      	cbz	r0, 800af3a <__swbuf_r+0x12>
 800af32:	6a03      	ldr	r3, [r0, #32]
 800af34:	b90b      	cbnz	r3, 800af3a <__swbuf_r+0x12>
 800af36:	f7fd fabf 	bl	80084b8 <__sinit>
 800af3a:	69a3      	ldr	r3, [r4, #24]
 800af3c:	60a3      	str	r3, [r4, #8]
 800af3e:	89a3      	ldrh	r3, [r4, #12]
 800af40:	071a      	lsls	r2, r3, #28
 800af42:	d525      	bpl.n	800af90 <__swbuf_r+0x68>
 800af44:	6923      	ldr	r3, [r4, #16]
 800af46:	b31b      	cbz	r3, 800af90 <__swbuf_r+0x68>
 800af48:	6823      	ldr	r3, [r4, #0]
 800af4a:	6922      	ldr	r2, [r4, #16]
 800af4c:	b2f6      	uxtb	r6, r6
 800af4e:	1a98      	subs	r0, r3, r2
 800af50:	6963      	ldr	r3, [r4, #20]
 800af52:	4637      	mov	r7, r6
 800af54:	4283      	cmp	r3, r0
 800af56:	dc04      	bgt.n	800af62 <__swbuf_r+0x3a>
 800af58:	4621      	mov	r1, r4
 800af5a:	4628      	mov	r0, r5
 800af5c:	f7ff fdf4 	bl	800ab48 <_fflush_r>
 800af60:	b9e0      	cbnz	r0, 800af9c <__swbuf_r+0x74>
 800af62:	68a3      	ldr	r3, [r4, #8]
 800af64:	3b01      	subs	r3, #1
 800af66:	60a3      	str	r3, [r4, #8]
 800af68:	6823      	ldr	r3, [r4, #0]
 800af6a:	1c5a      	adds	r2, r3, #1
 800af6c:	6022      	str	r2, [r4, #0]
 800af6e:	701e      	strb	r6, [r3, #0]
 800af70:	6962      	ldr	r2, [r4, #20]
 800af72:	1c43      	adds	r3, r0, #1
 800af74:	429a      	cmp	r2, r3
 800af76:	d004      	beq.n	800af82 <__swbuf_r+0x5a>
 800af78:	89a3      	ldrh	r3, [r4, #12]
 800af7a:	07db      	lsls	r3, r3, #31
 800af7c:	d506      	bpl.n	800af8c <__swbuf_r+0x64>
 800af7e:	2e0a      	cmp	r6, #10
 800af80:	d104      	bne.n	800af8c <__swbuf_r+0x64>
 800af82:	4621      	mov	r1, r4
 800af84:	4628      	mov	r0, r5
 800af86:	f7ff fddf 	bl	800ab48 <_fflush_r>
 800af8a:	b938      	cbnz	r0, 800af9c <__swbuf_r+0x74>
 800af8c:	4638      	mov	r0, r7
 800af8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af90:	4621      	mov	r1, r4
 800af92:	4628      	mov	r0, r5
 800af94:	f000 f806 	bl	800afa4 <__swsetup_r>
 800af98:	2800      	cmp	r0, #0
 800af9a:	d0d5      	beq.n	800af48 <__swbuf_r+0x20>
 800af9c:	f04f 37ff 	mov.w	r7, #4294967295
 800afa0:	e7f4      	b.n	800af8c <__swbuf_r+0x64>
	...

0800afa4 <__swsetup_r>:
 800afa4:	b538      	push	{r3, r4, r5, lr}
 800afa6:	4b2a      	ldr	r3, [pc, #168]	; (800b050 <__swsetup_r+0xac>)
 800afa8:	4605      	mov	r5, r0
 800afaa:	6818      	ldr	r0, [r3, #0]
 800afac:	460c      	mov	r4, r1
 800afae:	b118      	cbz	r0, 800afb8 <__swsetup_r+0x14>
 800afb0:	6a03      	ldr	r3, [r0, #32]
 800afb2:	b90b      	cbnz	r3, 800afb8 <__swsetup_r+0x14>
 800afb4:	f7fd fa80 	bl	80084b8 <__sinit>
 800afb8:	89a3      	ldrh	r3, [r4, #12]
 800afba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800afbe:	0718      	lsls	r0, r3, #28
 800afc0:	d422      	bmi.n	800b008 <__swsetup_r+0x64>
 800afc2:	06d9      	lsls	r1, r3, #27
 800afc4:	d407      	bmi.n	800afd6 <__swsetup_r+0x32>
 800afc6:	2309      	movs	r3, #9
 800afc8:	602b      	str	r3, [r5, #0]
 800afca:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800afce:	f04f 30ff 	mov.w	r0, #4294967295
 800afd2:	81a3      	strh	r3, [r4, #12]
 800afd4:	e034      	b.n	800b040 <__swsetup_r+0x9c>
 800afd6:	0758      	lsls	r0, r3, #29
 800afd8:	d512      	bpl.n	800b000 <__swsetup_r+0x5c>
 800afda:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800afdc:	b141      	cbz	r1, 800aff0 <__swsetup_r+0x4c>
 800afde:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800afe2:	4299      	cmp	r1, r3
 800afe4:	d002      	beq.n	800afec <__swsetup_r+0x48>
 800afe6:	4628      	mov	r0, r5
 800afe8:	f7fe fac2 	bl	8009570 <_free_r>
 800afec:	2300      	movs	r3, #0
 800afee:	6363      	str	r3, [r4, #52]	; 0x34
 800aff0:	89a3      	ldrh	r3, [r4, #12]
 800aff2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800aff6:	81a3      	strh	r3, [r4, #12]
 800aff8:	2300      	movs	r3, #0
 800affa:	6063      	str	r3, [r4, #4]
 800affc:	6923      	ldr	r3, [r4, #16]
 800affe:	6023      	str	r3, [r4, #0]
 800b000:	89a3      	ldrh	r3, [r4, #12]
 800b002:	f043 0308 	orr.w	r3, r3, #8
 800b006:	81a3      	strh	r3, [r4, #12]
 800b008:	6923      	ldr	r3, [r4, #16]
 800b00a:	b94b      	cbnz	r3, 800b020 <__swsetup_r+0x7c>
 800b00c:	89a3      	ldrh	r3, [r4, #12]
 800b00e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b012:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b016:	d003      	beq.n	800b020 <__swsetup_r+0x7c>
 800b018:	4621      	mov	r1, r4
 800b01a:	4628      	mov	r0, r5
 800b01c:	f000 f88b 	bl	800b136 <__smakebuf_r>
 800b020:	89a0      	ldrh	r0, [r4, #12]
 800b022:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b026:	f010 0301 	ands.w	r3, r0, #1
 800b02a:	d00a      	beq.n	800b042 <__swsetup_r+0x9e>
 800b02c:	2300      	movs	r3, #0
 800b02e:	60a3      	str	r3, [r4, #8]
 800b030:	6963      	ldr	r3, [r4, #20]
 800b032:	425b      	negs	r3, r3
 800b034:	61a3      	str	r3, [r4, #24]
 800b036:	6923      	ldr	r3, [r4, #16]
 800b038:	b943      	cbnz	r3, 800b04c <__swsetup_r+0xa8>
 800b03a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b03e:	d1c4      	bne.n	800afca <__swsetup_r+0x26>
 800b040:	bd38      	pop	{r3, r4, r5, pc}
 800b042:	0781      	lsls	r1, r0, #30
 800b044:	bf58      	it	pl
 800b046:	6963      	ldrpl	r3, [r4, #20]
 800b048:	60a3      	str	r3, [r4, #8]
 800b04a:	e7f4      	b.n	800b036 <__swsetup_r+0x92>
 800b04c:	2000      	movs	r0, #0
 800b04e:	e7f7      	b.n	800b040 <__swsetup_r+0x9c>
 800b050:	2000021c 	.word	0x2000021c

0800b054 <_raise_r>:
 800b054:	291f      	cmp	r1, #31
 800b056:	b538      	push	{r3, r4, r5, lr}
 800b058:	4604      	mov	r4, r0
 800b05a:	460d      	mov	r5, r1
 800b05c:	d904      	bls.n	800b068 <_raise_r+0x14>
 800b05e:	2316      	movs	r3, #22
 800b060:	6003      	str	r3, [r0, #0]
 800b062:	f04f 30ff 	mov.w	r0, #4294967295
 800b066:	bd38      	pop	{r3, r4, r5, pc}
 800b068:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b06a:	b112      	cbz	r2, 800b072 <_raise_r+0x1e>
 800b06c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b070:	b94b      	cbnz	r3, 800b086 <_raise_r+0x32>
 800b072:	4620      	mov	r0, r4
 800b074:	f000 f830 	bl	800b0d8 <_getpid_r>
 800b078:	462a      	mov	r2, r5
 800b07a:	4601      	mov	r1, r0
 800b07c:	4620      	mov	r0, r4
 800b07e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b082:	f000 b817 	b.w	800b0b4 <_kill_r>
 800b086:	2b01      	cmp	r3, #1
 800b088:	d00a      	beq.n	800b0a0 <_raise_r+0x4c>
 800b08a:	1c59      	adds	r1, r3, #1
 800b08c:	d103      	bne.n	800b096 <_raise_r+0x42>
 800b08e:	2316      	movs	r3, #22
 800b090:	6003      	str	r3, [r0, #0]
 800b092:	2001      	movs	r0, #1
 800b094:	e7e7      	b.n	800b066 <_raise_r+0x12>
 800b096:	2400      	movs	r4, #0
 800b098:	4628      	mov	r0, r5
 800b09a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b09e:	4798      	blx	r3
 800b0a0:	2000      	movs	r0, #0
 800b0a2:	e7e0      	b.n	800b066 <_raise_r+0x12>

0800b0a4 <raise>:
 800b0a4:	4b02      	ldr	r3, [pc, #8]	; (800b0b0 <raise+0xc>)
 800b0a6:	4601      	mov	r1, r0
 800b0a8:	6818      	ldr	r0, [r3, #0]
 800b0aa:	f7ff bfd3 	b.w	800b054 <_raise_r>
 800b0ae:	bf00      	nop
 800b0b0:	2000021c 	.word	0x2000021c

0800b0b4 <_kill_r>:
 800b0b4:	b538      	push	{r3, r4, r5, lr}
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	4d06      	ldr	r5, [pc, #24]	; (800b0d4 <_kill_r+0x20>)
 800b0ba:	4604      	mov	r4, r0
 800b0bc:	4608      	mov	r0, r1
 800b0be:	4611      	mov	r1, r2
 800b0c0:	602b      	str	r3, [r5, #0]
 800b0c2:	f7f7 fdac 	bl	8002c1e <_kill>
 800b0c6:	1c43      	adds	r3, r0, #1
 800b0c8:	d102      	bne.n	800b0d0 <_kill_r+0x1c>
 800b0ca:	682b      	ldr	r3, [r5, #0]
 800b0cc:	b103      	cbz	r3, 800b0d0 <_kill_r+0x1c>
 800b0ce:	6023      	str	r3, [r4, #0]
 800b0d0:	bd38      	pop	{r3, r4, r5, pc}
 800b0d2:	bf00      	nop
 800b0d4:	20000a04 	.word	0x20000a04

0800b0d8 <_getpid_r>:
 800b0d8:	f7f7 bd9a 	b.w	8002c10 <_getpid>

0800b0dc <_malloc_usable_size_r>:
 800b0dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b0e0:	1f18      	subs	r0, r3, #4
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	bfbc      	itt	lt
 800b0e6:	580b      	ldrlt	r3, [r1, r0]
 800b0e8:	18c0      	addlt	r0, r0, r3
 800b0ea:	4770      	bx	lr

0800b0ec <__swhatbuf_r>:
 800b0ec:	b570      	push	{r4, r5, r6, lr}
 800b0ee:	460c      	mov	r4, r1
 800b0f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0f4:	4615      	mov	r5, r2
 800b0f6:	2900      	cmp	r1, #0
 800b0f8:	461e      	mov	r6, r3
 800b0fa:	b096      	sub	sp, #88	; 0x58
 800b0fc:	da0c      	bge.n	800b118 <__swhatbuf_r+0x2c>
 800b0fe:	89a3      	ldrh	r3, [r4, #12]
 800b100:	2100      	movs	r1, #0
 800b102:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b106:	bf0c      	ite	eq
 800b108:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b10c:	2340      	movne	r3, #64	; 0x40
 800b10e:	2000      	movs	r0, #0
 800b110:	6031      	str	r1, [r6, #0]
 800b112:	602b      	str	r3, [r5, #0]
 800b114:	b016      	add	sp, #88	; 0x58
 800b116:	bd70      	pop	{r4, r5, r6, pc}
 800b118:	466a      	mov	r2, sp
 800b11a:	f000 f849 	bl	800b1b0 <_fstat_r>
 800b11e:	2800      	cmp	r0, #0
 800b120:	dbed      	blt.n	800b0fe <__swhatbuf_r+0x12>
 800b122:	9901      	ldr	r1, [sp, #4]
 800b124:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b128:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b12c:	4259      	negs	r1, r3
 800b12e:	4159      	adcs	r1, r3
 800b130:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b134:	e7eb      	b.n	800b10e <__swhatbuf_r+0x22>

0800b136 <__smakebuf_r>:
 800b136:	898b      	ldrh	r3, [r1, #12]
 800b138:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b13a:	079d      	lsls	r5, r3, #30
 800b13c:	4606      	mov	r6, r0
 800b13e:	460c      	mov	r4, r1
 800b140:	d507      	bpl.n	800b152 <__smakebuf_r+0x1c>
 800b142:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b146:	6023      	str	r3, [r4, #0]
 800b148:	6123      	str	r3, [r4, #16]
 800b14a:	2301      	movs	r3, #1
 800b14c:	6163      	str	r3, [r4, #20]
 800b14e:	b002      	add	sp, #8
 800b150:	bd70      	pop	{r4, r5, r6, pc}
 800b152:	466a      	mov	r2, sp
 800b154:	ab01      	add	r3, sp, #4
 800b156:	f7ff ffc9 	bl	800b0ec <__swhatbuf_r>
 800b15a:	9900      	ldr	r1, [sp, #0]
 800b15c:	4605      	mov	r5, r0
 800b15e:	4630      	mov	r0, r6
 800b160:	f7fe fdd0 	bl	8009d04 <_malloc_r>
 800b164:	b948      	cbnz	r0, 800b17a <__smakebuf_r+0x44>
 800b166:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b16a:	059a      	lsls	r2, r3, #22
 800b16c:	d4ef      	bmi.n	800b14e <__smakebuf_r+0x18>
 800b16e:	f023 0303 	bic.w	r3, r3, #3
 800b172:	f043 0302 	orr.w	r3, r3, #2
 800b176:	81a3      	strh	r3, [r4, #12]
 800b178:	e7e3      	b.n	800b142 <__smakebuf_r+0xc>
 800b17a:	89a3      	ldrh	r3, [r4, #12]
 800b17c:	6020      	str	r0, [r4, #0]
 800b17e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b182:	81a3      	strh	r3, [r4, #12]
 800b184:	9b00      	ldr	r3, [sp, #0]
 800b186:	6120      	str	r0, [r4, #16]
 800b188:	6163      	str	r3, [r4, #20]
 800b18a:	9b01      	ldr	r3, [sp, #4]
 800b18c:	b15b      	cbz	r3, 800b1a6 <__smakebuf_r+0x70>
 800b18e:	4630      	mov	r0, r6
 800b190:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b194:	f000 f81e 	bl	800b1d4 <_isatty_r>
 800b198:	b128      	cbz	r0, 800b1a6 <__smakebuf_r+0x70>
 800b19a:	89a3      	ldrh	r3, [r4, #12]
 800b19c:	f023 0303 	bic.w	r3, r3, #3
 800b1a0:	f043 0301 	orr.w	r3, r3, #1
 800b1a4:	81a3      	strh	r3, [r4, #12]
 800b1a6:	89a3      	ldrh	r3, [r4, #12]
 800b1a8:	431d      	orrs	r5, r3
 800b1aa:	81a5      	strh	r5, [r4, #12]
 800b1ac:	e7cf      	b.n	800b14e <__smakebuf_r+0x18>
	...

0800b1b0 <_fstat_r>:
 800b1b0:	b538      	push	{r3, r4, r5, lr}
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	4d06      	ldr	r5, [pc, #24]	; (800b1d0 <_fstat_r+0x20>)
 800b1b6:	4604      	mov	r4, r0
 800b1b8:	4608      	mov	r0, r1
 800b1ba:	4611      	mov	r1, r2
 800b1bc:	602b      	str	r3, [r5, #0]
 800b1be:	f7f7 fd8c 	bl	8002cda <_fstat>
 800b1c2:	1c43      	adds	r3, r0, #1
 800b1c4:	d102      	bne.n	800b1cc <_fstat_r+0x1c>
 800b1c6:	682b      	ldr	r3, [r5, #0]
 800b1c8:	b103      	cbz	r3, 800b1cc <_fstat_r+0x1c>
 800b1ca:	6023      	str	r3, [r4, #0]
 800b1cc:	bd38      	pop	{r3, r4, r5, pc}
 800b1ce:	bf00      	nop
 800b1d0:	20000a04 	.word	0x20000a04

0800b1d4 <_isatty_r>:
 800b1d4:	b538      	push	{r3, r4, r5, lr}
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	4d05      	ldr	r5, [pc, #20]	; (800b1f0 <_isatty_r+0x1c>)
 800b1da:	4604      	mov	r4, r0
 800b1dc:	4608      	mov	r0, r1
 800b1de:	602b      	str	r3, [r5, #0]
 800b1e0:	f7f7 fd8a 	bl	8002cf8 <_isatty>
 800b1e4:	1c43      	adds	r3, r0, #1
 800b1e6:	d102      	bne.n	800b1ee <_isatty_r+0x1a>
 800b1e8:	682b      	ldr	r3, [r5, #0]
 800b1ea:	b103      	cbz	r3, 800b1ee <_isatty_r+0x1a>
 800b1ec:	6023      	str	r3, [r4, #0]
 800b1ee:	bd38      	pop	{r3, r4, r5, pc}
 800b1f0:	20000a04 	.word	0x20000a04

0800b1f4 <_init>:
 800b1f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1f6:	bf00      	nop
 800b1f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1fa:	bc08      	pop	{r3}
 800b1fc:	469e      	mov	lr, r3
 800b1fe:	4770      	bx	lr

0800b200 <_fini>:
 800b200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b202:	bf00      	nop
 800b204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b206:	bc08      	pop	{r3}
 800b208:	469e      	mov	lr, r3
 800b20a:	4770      	bx	lr
